Program.Sub.ScreenSU.Start
Gui.Form..Create(BaseForm)
Gui.Form..Caption("Mass Replace Parts on Open Work Orders (6169)")
Gui.Form..Size(17760,9765)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..BackColor(-2147483633)
Gui.Form..MousePointer(0)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form..AlwaysOnTop(False)
Gui.Form..FontName("Tahoma")
Gui.Form..FontSize(8.25)
Gui.Form..ControlBox(True)
Gui.Form..MaxButton(True)
Gui.Form..MinButton(True)
Gui.Form..Moveable(True)
Gui.Form..Sizeable(True)
Gui.Form..ShowInTaskBar(True)
Gui.Form..TitleBar(True)
Gui.Form.frameReplace.Create(Frame)
Gui.Form.frameReplace.Enabled(True)
Gui.Form.frameReplace.Visible(True)
Gui.Form.frameReplace.Zorder(0)
Gui.Form.frameReplace.Size(16815,9180)
Gui.Form.frameReplace.Position(825,120)
Gui.Form.frameReplace.Caption("")
Gui.Form.frameReplace.FontName("Tahoma")
Gui.Form.frameReplace.FontSize(8.25)
Gui.Form.frmNewPartNo.Create(Frame)
Gui.Form.frmNewPartNo.Enabled(True)
Gui.Form.frmNewPartNo.Visible(True)
Gui.Form.frmNewPartNo.Zorder(0)
Gui.Form.frmNewPartNo.Size(6405,2160)
Gui.Form.frmNewPartNo.Position(6930,180)
Gui.Form.frmNewPartNo.Caption("New Part No")
Gui.Form.frmNewPartNo.FontName("Tahoma")
Gui.Form.frmNewPartNo.FontSize(10)
Gui.Form.frmNewPartNo.BorderStyle(3)
Gui.Form.frmNewPartNo.Parent("frameReplace")
Gui.Form.lbl11.Create(Label,"Rev",True,285,195,0,3090,645,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl11.BorderStyle(0)
Gui.Form.lbl11.Parent("frmNewPartNo")
Gui.Form.txtNewPartLoc.Create(TextBox,"",True,480,330,0,3735,855,True,0,"Tahoma",10,,1)
Gui.Form.txtNewPartLoc.TabStop(True)
Gui.Form.txtNewPartLoc.TabIndex(3)
Gui.Form.txtNewPartLoc.Parent("frmNewPartNo")
Gui.Form.txtNewPartLoc.Event(LostFocus,txtNewPartLoc_LostFocus)
Gui.Form.txtNewPartRev.Create(TextBox,"",True,600,330,0,3075,855,True,0,"Tahoma",10,,1)
Gui.Form.txtNewPartRev.TabStop(True)
Gui.Form.txtNewPartRev.TabIndex(2)
Gui.Form.txtNewPartRev.Parent("frmNewPartNo")
Gui.Form.txtNewPartNo.Create(TextBox,"",True,2880,330,0,135,855,True,0,"Tahoma",10,,1)
Gui.Form.txtNewPartNo.TabStop(True)
Gui.Form.txtNewPartNo.TabIndex(1)
Gui.Form.txtNewPartNo.Parent("frmNewPartNo")
Gui.Form.txtNewPartUM.Create(TextBox,"",True,480,300,0,5835,1560,False,2,"Tahoma",8,,1)
Gui.Form.txtNewPartUM.Locked(True)
Gui.Form.txtNewPartUM.Parent("frmNewPartNo")
Gui.Form.lbl9.Create(Label,"UM",True,225,195,0,5955,1335,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl9.BorderStyle(0)
Gui.Form.lbl9.Parent("frmNewPartNo")
Gui.Form.lbl6.Create(Label,"Part Description",True,1140,195,0,195,1365,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl6.BorderStyle(0)
Gui.Form.lbl6.Parent("frmNewPartNo")
Gui.Form.txtNewPartDesc.Create(TextBox,"",False,5580,300,0,135,1890,False,0,"Tahoma",8,,1)
Gui.Form.txtNewPartDesc.Locked(True)
Gui.Form.txtNewPartDesc.Parent("frmNewPartNo")
Gui.Form.txtNewPartExtraDesc.Create(TextBox,"",True,5580,300,0,135,1575,False,0,"Tahoma",8,,1)
Gui.Form.txtNewPartExtraDesc.Locked(True)
Gui.Form.txtNewPartExtraDesc.Parent("frmNewPartNo")
Gui.Form.lbl4.Create(Label,"Part No",True,540,195,0,165,645,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl4.BorderStyle(0)
Gui.Form.lbl4.Parent("frmNewPartNo")
Gui.Form.cmdBrowseNewPart.Create(Button)
Gui.Form.cmdBrowseNewPart.Enabled(True)
Gui.Form.cmdBrowseNewPart.Visible(True)
Gui.Form.cmdBrowseNewPart.Zorder(0)
Gui.Form.cmdBrowseNewPart.Size(540,345)
Gui.Form.cmdBrowseNewPart.Position(4410,840)
Gui.Form.cmdBrowseNewPart.TabStop(True)
Gui.Form.cmdBrowseNewPart.TabIndex(4)
Gui.Form.cmdBrowseNewPart.Caption("^")
Gui.Form.cmdBrowseNewPart.FontName("Tahoma")
Gui.Form.cmdBrowseNewPart.FontSize(8.25)
Gui.Form.cmdBrowseNewPart.Parent("frmNewPartNo")
Gui.Form.cmdBrowseNewPart.Event(Click,cmdBrowseNewPart_Click)
Gui.Form.lbl5.Create(Label,"Loc",True,240,195,0,3795,645,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl5.BorderStyle(0)
Gui.Form.lbl5.Parent("frmNewPartNo")
Gui.Form.frmLegend.Create(Frame)
Gui.Form.frmLegend.Enabled(True)
Gui.Form.frmLegend.Visible(True)
Gui.Form.frmLegend.Zorder(0)
Gui.Form.frmLegend.Size(2115,1605)
Gui.Form.frmLegend.Position(14400,195)
Gui.Form.frmLegend.Caption("Legend")
Gui.Form.frmLegend.FontName("Tahoma")
Gui.Form.frmLegend.FontSize(10)
Gui.Form.frmLegend.BorderStyle(3)
Gui.Form.frmLegend.Parent("frameReplace")
Gui.Form.txtFullyIssued.Create(TextBox,"Fully Issued",True,1845,300,0,135,840,False,2,"Tahoma",8.25,65280,1)
Gui.Form.txtFullyIssued.ForeColor(16711680)
Gui.Form.txtFullyIssued.Parent("frmLegend")
Gui.Form.txtPartiallyIssued.Create(TextBox,"Partially Issued",True,1845,300,0,135,1200,False,2,"Tahoma",8.25,65535,1)
Gui.Form.txtPartiallyIssued.ForeColor(16711680)
Gui.Form.txtPartiallyIssued.Parent("frmLegend")
Gui.Form.txtOverIssued.Create(TextBox,"Over Issued",True,1845,300,0,135,480,False,2,"Tahoma",8.25,255,1)
Gui.Form.txtOverIssued.ForeColor(16711680)
Gui.Form.txtOverIssued.Parent("frmLegend")
Gui.Form.gsWO.Create(GsGridControl)
Gui.Form.gsWO.Size(16545,6525)
Gui.Form.gsWO.Position(135,2490)
Gui.Form.gsWO.Event(RowCellClick,gsWO_RowCellClick)
Gui.Form.gsWO.Event(CellValueChanged,gsWO_CellValueChanged)
Gui.Form.gsWO.Event(KeyPress,gsWO_KeyPress)
Gui.Form.gsWO.Event(MouseDown,gsWO_MouseDown)
Gui.Form.gsWO.Enabled(True)
Gui.Form.gsWO.Visible(True)
Gui.Form.gsWO.Zorder(0)
Gui.Form.gsWO.Parent("frameReplace")
Gui.Form.cmdExport.Create(Button)
Gui.Form.cmdExport.Size(825,375)
Gui.Form.cmdExport.Position(13470,660)
Gui.Form.cmdExport.Caption("Export")
Gui.Form.cmdExport.Event(Click,cmdExport_Click)
Gui.Form.cmdExport.Enabled(True)
Gui.Form.cmdExport.Visible(True)
Gui.Form.cmdExport.Zorder(0)
Gui.Form.cmdExport.FontName("Tahoma")
Gui.Form.cmdExport.FontSize(8.25)
Gui.Form.cmdExport.Parent("frameReplace")
Gui.Form.cmdUpdate.Create(Button)
Gui.Form.cmdUpdate.Enabled(True)
Gui.Form.cmdUpdate.Visible(True)
Gui.Form.cmdUpdate.Zorder(0)
Gui.Form.cmdUpdate.Size(840,375)
Gui.Form.cmdUpdate.Position(13455,195)
Gui.Form.cmdUpdate.Caption("Update")
Gui.Form.cmdUpdate.FontName("Tahoma")
Gui.Form.cmdUpdate.FontSize(8.25)
Gui.Form.cmdUpdate.Anchor(9)
Gui.Form.cmdUpdate.Event(Click,cmdUpdate_Click)
Gui.Form.cmdUpdate.Parent("frameReplace")
Gui.Form.frmCurrentPartNo.Create(Frame)
Gui.Form.frmCurrentPartNo.Enabled(True)
Gui.Form.frmCurrentPartNo.Visible(True)
Gui.Form.frmCurrentPartNo.Zorder(0)
Gui.Form.frmCurrentPartNo.Size(6675,2160)
Gui.Form.frmCurrentPartNo.Position(135,180)
Gui.Form.frmCurrentPartNo.Caption("Current Part No")
Gui.Form.frmCurrentPartNo.FontName("Tahoma")
Gui.Form.frmCurrentPartNo.FontSize(10)
Gui.Form.frmCurrentPartNo.BorderStyle(3)
Gui.Form.frmCurrentPartNo.Parent("frameReplace")
Gui.Form.lbl8.Create(Label,"UM",True,225,195,0,6210,1335,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl8.BorderStyle(0)
Gui.Form.lbl8.Parent("frmCurrentPartNo")
Gui.Form.lbl3.Create(Label,"Part Description",True,1140,195,0,210,1350,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl3.BorderStyle(0)
Gui.Form.lbl3.Parent("frmCurrentPartNo")
Gui.Form.cmdBrowsePart.Create(Button)
Gui.Form.cmdBrowsePart.Enabled(True)
Gui.Form.cmdBrowsePart.Visible(True)
Gui.Form.cmdBrowsePart.Zorder(0)
Gui.Form.cmdBrowsePart.Size(540,345)
Gui.Form.cmdBrowsePart.Position(4470,840)
Gui.Form.cmdBrowsePart.Caption("^")
Gui.Form.cmdBrowsePart.FontName("Tahoma")
Gui.Form.cmdBrowsePart.FontSize(8.25)
Gui.Form.cmdBrowsePart.Parent("frmCurrentPartNo")
Gui.Form.cmdBrowsePart.Event(Click,cmdBrowsePart_Click)
Gui.Form.cmdBrowsePart.TabStop(True)
Gui.Form.cmdBrowsePart.TabIndex(4)
Gui.Form.cmdRefresh.Create(Button)
Gui.Form.cmdRefresh.Enabled(True)
Gui.Form.cmdRefresh.Visible(True)
Gui.Form.cmdRefresh.Zorder(0)
Gui.Form.cmdRefresh.Size(855,375)
Gui.Form.cmdRefresh.Position(5100,825)
Gui.Form.cmdRefresh.Caption("Refresh")
Gui.Form.cmdRefresh.FontName("Tahoma")
Gui.Form.cmdRefresh.FontSize(8.25)
Gui.Form.cmdRefresh.Parent("frmCurrentPartNo")
Gui.Form.cmdRefresh.TabStop(True)
Gui.Form.cmdRefresh.TabIndex(5)
Gui.Form.cmdRefresh.Event(Click,cmdRefresh_Click)
Gui.Form.txtPartRev.Create(TextBox,"",True,585,330,0,3120,855,True,0,"Tahoma",10,,1)
Gui.Form.txtPartRev.TabStop(True)
Gui.Form.txtPartRev.TabIndex(2)
Gui.Form.txtPartRev.Parent("frmCurrentPartNo")
Gui.Form.lbl2.Create(Label,"Loc",True,240,195,0,3840,645,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl2.BorderStyle(0)
Gui.Form.lbl2.Parent("frmCurrentPartNo")
Gui.Form.txtPartLoc.Create(TextBox,"",True,480,330,0,3795,855,True,0,"Tahoma",10,,1)
Gui.Form.txtPartLoc.Parent("frmCurrentPartNo")
Gui.Form.txtPartLoc.TabStop(True)
Gui.Form.txtPartLoc.TabIndex(3)
Gui.Form.txtPartLoc.Event(LostFocus,txtPartLoc_LostFocus)
Gui.Form.txtPartUM.Create(TextBox,"",True,465,300,0,6105,1560,False,2,"Tahoma",8,,1)
Gui.Form.txtPartUM.Locked(True)
Gui.Form.txtPartUM.Parent("frmCurrentPartNo")
Gui.Form.txtPartDesc.Create(TextBox,"",False,5850,300,0,165,1905,False,0,"Tahoma",8,,1)
Gui.Form.txtPartDesc.Parent("frmCurrentPartNo")
Gui.Form.txtPartDesc.Locked(True)
Gui.Form.lbl10.Create(Label,"Rev",True,285,195,0,3150,645,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl10.BorderStyle(0)
Gui.Form.lbl10.Parent("frmCurrentPartNo")
Gui.Form.txtPartExtraDesc.Create(TextBox,"",True,5850,300,0,165,1560,False,0,"Tahoma",8,,1)
Gui.Form.txtPartExtraDesc.Locked(True)
Gui.Form.txtPartExtraDesc.Parent("frmCurrentPartNo")
Gui.Form.txtPartNo.Create(TextBox,"",True,2865,330,0,165,855,True,0,"Tahoma",10,,1)
Gui.Form.txtPartNo.Parent("frmCurrentPartNo")
Gui.Form.txtPartNo.TabStop(True)
Gui.Form.txtPartNo.TabIndex(1)
Gui.Form.lbl1.Create(Label,"Part No",True,540,195,0,210,645,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl1.BorderStyle(0)
Gui.Form.lbl1.Parent("frmCurrentPartNo")
Gui.Form.frameAdd.Create(Frame)
Gui.Form.frameAdd.Enabled(True)
Gui.Form.frameAdd.Visible(False)
Gui.Form.frameAdd.Zorder(0)
Gui.Form.frameAdd.Size(16800,9135)
Gui.Form.frameAdd.Position(840,120)
Gui.Form.frameAdd.Caption("")
Gui.Form.frameAdd.FontName("Tahoma")
Gui.Form.frameAdd.FontSize(8.25)
Gui.Form.SplitContainerAdd.Create(SplitContainer)
Gui.Form.SplitContainerAdd.Enabled(True)
Gui.Form.SplitContainerAdd.Visible(True)
Gui.Form.SplitContainerAdd.Zorder(0)
Gui.Form.SplitContainerAdd.Size(16605,8025)
Gui.Form.SplitContainerAdd.Position(105,975)
Gui.Form.SplitContainerAdd.Orientation(1)
Gui.Form.SplitContainerAdd.SplitterPosition(5415)
Gui.Form.SplitContainerAdd.Collapsed(False)
Gui.Form.SplitContainerAdd.Parent("frameAdd")
Gui.Form.gsNewMaterial.Create(GsGridControl)
Gui.Form.gsNewMaterial.Enabled(True)
Gui.Form.gsNewMaterial.Visible(True)
Gui.Form.gsNewMaterial.Zorder(0)
Gui.Form.gsNewMaterial.Size(16605,2430)
Gui.Form.gsNewMaterial.Position(0,0)
Gui.Form.gsNewMaterial.Parent("SplitContainerAdd",1)
Gui.Form.gsNewMaterial.Dock(5)
Gui.Form.gsNewMaterial.Event(RowCellClick,gsNewMaterial_RowCellClick)
Gui.Form.gsNewMaterial.Event(CellValueChanged,gsNewMaterial_CellValueChanged)
Gui.Form.gsBOM.Create(GsGridControl)
Gui.Form.gsBOM.Enabled(True)
Gui.Form.gsBOM.Visible(True)
Gui.Form.gsBOM.Zorder(0)
Gui.Form.gsBOM.Size(16605,5415)
Gui.Form.gsBOM.Position(0,0)
Gui.Form.gsBOM.Parent("SplitContainerAdd",0)
Gui.Form.gsBOM.Dock(5)
Gui.Form.gsBOM.Event(RowCellClick,gsBOM_RowCellClick)
Gui.Form.lbl7.Create(Label,"BOM",True,330,195,0,225,165,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lbl7.BorderStyle(0)
Gui.Form.lbl7.Parent("frameAdd")
Gui.Form.frameScheduling.Create(Frame)
Gui.Form.frameScheduling.Enabled(True)
Gui.Form.frameScheduling.Visible(True)
Gui.Form.frameScheduling.Zorder(0)
Gui.Form.frameScheduling.Size(2730,615)
Gui.Form.frameScheduling.Position(13905,105)
Gui.Form.frameScheduling.Caption("Scheduling")
Gui.Form.frameScheduling.FontName("Tahoma")
Gui.Form.frameScheduling.FontSize(8.25)
Gui.Form.frameScheduling.ToolTip("Work Order Scheduling")
Gui.Form.frameScheduling.Parent("frameAdd")
Gui.Form.optForwardSched.Create(Option)
Gui.Form.optForwardSched.Enabled(True)
Gui.Form.optForwardSched.Visible(True)
Gui.Form.optForwardSched.Zorder(0)
Gui.Form.optForwardSched.Size(1065,285)
Gui.Form.optForwardSched.Position(195,285)
Gui.Form.optForwardSched.Caption("Forward")
Gui.Form.optForwardSched.FontName("Tahoma")
Gui.Form.optForwardSched.FontSize(8.25)
Gui.Form.optForwardSched.DefaultValue(True)
Gui.Form.optForwardSched.Parent("frameScheduling")
Gui.Form.optBackwardSched.Create(Option)
Gui.Form.optBackwardSched.Enabled(True)
Gui.Form.optBackwardSched.Visible(True)
Gui.Form.optBackwardSched.Zorder(0)
Gui.Form.optBackwardSched.Size(1170,285)
Gui.Form.optBackwardSched.Position(1455,285)
Gui.Form.optBackwardSched.Caption("Backward")
Gui.Form.optBackwardSched.FontName("Tahoma")
Gui.Form.optBackwardSched.FontSize(8.25)
Gui.Form.optBackwardSched.DefaultValue(False)
Gui.Form.optBackwardSched.Parent("frameScheduling")
Gui.Form.txtBOM.Create(TextBox,"",True,2160,300,0,660,105,True,0,"Tahoma",8.25,,1)
Gui.Form.txtBOM.Parent("frameAdd")
Gui.Form.txtBOM.TabStop(True)
Gui.Form.txtBOM.TabIndex(1)
Gui.Form.cmdBrowseBOM.Create(Button)
Gui.Form.cmdBrowseBOM.Enabled(True)
Gui.Form.cmdBrowseBOM.Visible(True)
Gui.Form.cmdBrowseBOM.Zorder(0)
Gui.Form.cmdBrowseBOM.Size(390,315)
Gui.Form.cmdBrowseBOM.Position(3555,90)
Gui.Form.cmdBrowseBOM.Caption("^")
Gui.Form.cmdBrowseBOM.FontName("Tahoma")
Gui.Form.cmdBrowseBOM.FontSize(8.25)
Gui.Form.cmdBrowseBOM.Parent("frameAdd")
Gui.Form.cmdBrowseBOM.Event(Click,cmdBrowseBOM_Click)
Gui.Form.cmdBrowseBOM.TabStop(True)
Gui.Form.cmdBrowseBOM.TabIndex(3)
Gui.Form.lblBOMDescr.Create(Label,"",True,4815,225,0,660,495,True,9,"Tahoma",8.25,,0,1)
Gui.Form.lblBOMDescr.BorderStyle(0)
Gui.Form.lblBOMDescr.Parent("frameAdd")
Gui.Form.txtRev.Create(TextBox,"",True,495,300,0,2925,105,True,0,"Tahoma",8.25,,1)
Gui.Form.txtRev.Parent("frameAdd")
Gui.Form.txtRev.TabStop(True)
Gui.Form.txtRev.TabIndex(1)
Gui.Form.txtRev.Event(LostFocus,txtRev_LostFocus)
Gui.Form.cmdAdd.Create(Button)
Gui.Form.cmdAdd.Enabled(True)
Gui.Form.cmdAdd.Visible(True)
Gui.Form.cmdAdd.Zorder(0)
Gui.Form.cmdAdd.Size(1275,375)
Gui.Form.cmdAdd.Position(12555,105)
Gui.Form.cmdAdd.Caption("Add Material")
Gui.Form.cmdAdd.FontName("Tahoma")
Gui.Form.cmdAdd.FontSize(8.25)
Gui.Form.cmdAdd.Parent("frameAdd")
Gui.Form.cmdAdd.Event(Click,cmdAdd_Click)
Gui.Form.cmdAdd.TabStop(True)
Gui.Form.cmdAdd.TabIndex(4)
Gui.Form.cmdReset.Create(Button)
Gui.Form.cmdReset.Enabled(True)
Gui.Form.cmdReset.Visible(True)
Gui.Form.cmdReset.Zorder(0)
Gui.Form.cmdReset.Size(1275,375)
Gui.Form.cmdReset.Position(12570,525)
Gui.Form.cmdReset.TabStop(True)
Gui.Form.cmdReset.TabIndex(4)
Gui.Form.cmdReset.Caption("Reset")
Gui.Form.cmdReset.FontName("Tahoma")
Gui.Form.cmdReset.FontSize(8.25)
Gui.Form.cmdReset.Parent("frameAdd")
Gui.Form.cmdReset.Event(Click,cmdReset_Click)
Gui.Form.acc.Create(AccordionControl)
Gui.Form.acc.Enabled(True)
Gui.Form.acc.Visible(True)
Gui.Form.acc.Size(705,9315)
Gui.Form.acc.Position(0,0)
Gui.Form.acc.Minimized(True)
Gui.Form.acc.AllowResize(False)
Gui.Form.acc.Event(ElementClick,acc_ElementClick)
Gui.Form.acc.Dock(3)
Gui.Form.acc.AddElement(accAddMatl,"Add Material","",240,240,,-1,0,"",False,True,False,1)
Gui.Form.acc.AddElement(accReplaceMatl,"Replace Material","",240,240,,-1,0,"",False,True,False,1)
Gui.Form.timerAutoCopyCacheFiles.Create(Timer)
Gui.Form.timerAutoCopyCacheFiles.Enabled(False)
Gui.Form.timerAutoCopyCacheFiles.Interval(300000)
Gui.Form.timerAutoCopyCacheFiles.Event(Timer,timerAutoCopyCacheFiles_Timer)
Gui.Form.lookupInventoryPart.Create(Lookup)
Gui.Form.lookupInventoryPart.Enabled(True)
Gui.Form.lookupInventoryPart.PopulateMode(4)
Gui.Form.lookupInventoryPart.Title("Please select current Part No")
Gui.Form.lookupInventoryPart.StringBasis("")
Gui.Form.lookupInventoryPart.FileBasis("")
Gui.Form.lookupInventoryPart.ColumnDelim("")
Gui.Form.lookupInventoryPart.RowDelim("")
Gui.Form.lookupInventoryPart.PreferredStyle(1)
Gui.Form.lookupInventoryPart.Event(SelectionMade,lookupInventoryPart_SelectionMade)
Gui.Form.lookupInventoryPart.AssociatedControl("txtPartNo")
Gui.Form.lookupInventoryNewPart.Create(Lookup)
Gui.Form.lookupInventoryNewPart.Enabled(True)
Gui.Form.lookupInventoryNewPart.PopulateMode(4)
Gui.Form.lookupInventoryNewPart.Title("Please select new Part No")
Gui.Form.lookupInventoryNewPart.StringBasis("")
Gui.Form.lookupInventoryNewPart.FileBasis("")
Gui.Form.lookupInventoryNewPart.ColumnDelim("")
Gui.Form.lookupInventoryNewPart.RowDelim("")
Gui.Form.lookupInventoryNewPart.PreferredStyle(1)
Gui.Form.lookupInventoryNewPart.Event(SelectionMade,lookupInventoryNewPart_SelectionMade)
Gui.Form.lookupInventoryNewPart.AssociatedControl("txtNewPartNo")
Gui.Form.lookupBOM.Create(Lookup)
Gui.Form.lookupBOM.Enabled(True)
Gui.Form.lookupBOM.PopulateMode(4)
Gui.Form.lookupBOM.Title("Please select BOM")
Gui.Form.lookupBOM.StringBasis("")
Gui.Form.lookupBOM.FileBasis("")
Gui.Form.lookupBOM.ColumnDelim("")
Gui.Form.lookupBOM.RowDelim("")
Gui.Form.lookupBOM.PreferredStyle(0)
Gui.Form.lookupBOM.AssociatedControl("cmdBrowseBOM")
Gui.Form.lookupBOM.Event(SelectionMade,lookupBOM_SelectionMade)
Gui.Form.lookupBOM.BeakLocation(2)
Gui.Form.lookupNewMatlInventoryBrowser.Create(Lookup)
Gui.Form.lookupNewMatlInventoryBrowser.Enabled(True)
Gui.Form.lookupNewMatlInventoryBrowser.PopulateMode(4)
Gui.Form.lookupNewMatlInventoryBrowser.Title("Please select a Part")
Gui.Form.lookupNewMatlInventoryBrowser.StringBasis("")
Gui.Form.lookupNewMatlInventoryBrowser.FileBasis("")
Gui.Form.lookupNewMatlInventoryBrowser.ColumnDelim("")
Gui.Form.lookupNewMatlInventoryBrowser.RowDelim("")
Gui.Form.lookupNewMatlInventoryBrowser.PreferredStyle(1)
Gui.Form.lookupNewMatlInventoryBrowser.Event(SelectionMade,lookupNewMatlInventoryBrowser_SelectionMade)
Gui.Form.lookupNewMatlOpCodeBrowser.Create(Lookup)
Gui.Form.lookupNewMatlOpCodeBrowser.Enabled(True)
Gui.Form.lookupNewMatlOpCodeBrowser.PopulateMode(4)
Gui.Form.lookupNewMatlOpCodeBrowser.Title("Please select an OpCode")
Gui.Form.lookupNewMatlOpCodeBrowser.StringBasis("")
Gui.Form.lookupNewMatlOpCodeBrowser.FileBasis("")
Gui.Form.lookupNewMatlOpCodeBrowser.ColumnDelim("")
Gui.Form.lookupNewMatlOpCodeBrowser.RowDelim("")
Gui.Form.lookupNewMatlOpCodeBrowser.PreferredStyle(1)
Gui.Form.lookupNewMatlOpCodeBrowser.Event(SelectionMade,lookupNewMatlOpCodeBrowser_SelectionMade)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.Global.bLock.Declare
V.Global.lProgID.Declare
V.Global.bSqlTrans.Declare
V.Global.bPartReplaced.Declare
V.Global.bArc5897Installed.Declare
V.Global.bLoadData.Declare
'											Part*!*PartRev*!*PartLoc*!*PartLU*!*PartDesc*!*OpCode*!*OpCodeLU*!*OpCodeDesc*!*UM*!*LeadTime*!*QtyToMake1*!*Rate*!*Add*!*Delete	
V.Global.sNewRowGVNEWMATERIAL.Declare("String","*!**!**!**!**!**!**!**!**!*0*!*0.00*!*0.0000*!*0*!*0")

V.Global.iCon.Declare(Long,0)
V.Global.fDayLengthHrs.Declare(Float,0)
V.Global.bUseRevision.Declare(Boolean)
V.Global.iSelectedRow.Declare
V.Global.sInventoryBrowserFilename.Declare
V.Global.sBomBrowserFilename.Declare
V.Global.sOpCodeBrowserFilename.Declare
V.Global.sInvExtraTextFilename.Declare
V.Global.iWorkDayMask.Declare
'Program.External.Include.Library("6008.lib")
Program.External.Include.Library("GAB_6169_6008.lib")
Program.External.Include.Library("500030.lib")
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare	
	v.Local.sRet.Declare
	V.Local.bExist.Declare
	V.Local.iCnt.Declare
	V.Local.bDayActive.Declare
	V.Local.bMultipleLocation.Declare
		
	'Create Object Database connection
	F.Global.Object.CreateDB("oDatabase",v.Caller.CompanyCode,v.Ambient.DBServerName,True,v.Global.iCon)
	
	F.ODBC.Connection!conx.OpenCompanyConnection(600)
	
	'Get Standard Day Length i Hours in Manufacturing Options
	F.Global.General.ReadOption(400799,2,8.00,0,V.Global.fDayLengthHrs)
	
	'Get whether using Revision Level
	F.Global.General.ReadOption(70008,0,False,0,V.Global.bUseRevision)
	
	'Setting whether Revision Level is used or not
	F.Intrinsic.Control.If(V.Global.bUseRevision.Not)
		Gui.Form.txtPartRev.Locked(True)
		Gui.Form.txtNewPartRev.Locked(True)
		Gui.Form.txtRev.Locked(True)
	F.Intrinsic.Control.EndIf
	
	'Get Manufacturing - Material Scheduling Days
	F.Intrinsic.Control.For(V.Local.iCnt,0,6,1)
		F.Global.General.ReadOption(401144,0,False,V.Local.iCnt,V.Local.bDayActive)
		F.Intrinsic.Control.If(V.Local.bDayActive)
			F.Intrinsic.Control.SelectCase(V.Local.iCnt)
				F.Intrinsic.Control.Case(0)		'Sunday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,1,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(1)		'Monday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,2,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(2)		'Tuesday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,4,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(3)		'Wednesday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,8,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(4)		'Thursday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,16,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(5)		'Friday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,32,V.Global.iWorkDayMask)
				F.Intrinsic.Control.Case(6)		'Saturday
					F.Intrinsic.Math.Add(V.Global.iWorkDayMask,64,V.Global.iWorkDayMask)
			F.Intrinsic.Control.EndSelect
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	'Get whether using multiple locations
	F.Global.General.ReadOption(400363,0,False,0,V.Local.bMultipleLocation)
	
	'Setting whether Multiple Location is used or not
	F.Intrinsic.Control.If(V.Local.bMultipleLocation.Not)
		Gui.Form.txtPartLoc.Locked(True)
		Gui.Form.txtNewPartLoc.Locked(True)
	F.Intrinsic.Control.EndIf
	
	'Setting the Program ID
	V.Global.lProgID.Set(6169)
	
	V.Global.bPartReplaced.Set(False)
	V.Global.bSqlTrans.Set(False)	
	
	'Set browser cache filenames
	F.Intrinsic.String.Build("{0}GAB_6169_InventoryBrowser_{1}.xml",V.Caller.GasDir,V.Caller.CompanyCode,V.Global.sInventoryBrowserFilename)
	F.Intrinsic.String.Build("{0}GAB_6169_BomBrowser_{1}.xml",V.Caller.GasDir,V.Caller.CompanyCode,V.Global.sBomBrowserFilename)
	F.Intrinsic.String.Build("{0}GAB_6169_OpCodeBrowser_{1}.xml",V.Caller.GasDir,V.Caller.CompanyCode,V.Global.sOpCodeBrowserFilename)
	F.Intrinsic.String.Build("{0}GAB_6169_InvExtraText_{1}.xml",V.Caller.GasDir,V.Caller.CompanyCode,V.Global.sInvExtraTextFilename)
	
	'Check custom tables
	F.Intrinsic.Control.CallSub(CheckCustomTable)
	F.Intrinsic.Control.CallSub(DeleteDataFromCustomTable)
	
	'Check whether ARC 5897 - Custom Inventory Browser is installed
'	F.Intrinsic.Control.CallSub(CheckArc5897)
'	Gui.Form.timerAutoCopyCacheFiles.Visible(False)
'	F.Intrinsic.Control.If(V.Global.bArc5897Installed)
'		'Set Auto Copy Cache Files Interval to 5 minutes
'		Gui.Form.timerAutoCopyCacheFiles.Interval(300000)
'		Gui.Form.timerAutoCopyCacheFiles.Enabled(True)
'		F.Intrinsic.Control.CallSub(timerAutoCopyCacheFiles_Timer)
'	F.Intrinsic.Control.Else
'		Gui.Form.timerAutoCopyCacheFiles.Enabled(False)
'	F.Intrinsic.Control.EndIf
	
	'Called from custom menu item that opens the dashboard
	F.Intrinsic.Control.CallSub(SetAnchors)
	gui.Form.frmNewPartNo.Enabled(False)
	Gui.Form.optBackwardSched.Value(True)
	
	F.Intrinsic.Control.CallSub(SetContextMenus)	
	
'	'Disable Rev column if Using Revision option is inactive
'	F.Intrinsic.Control.If(V.Global.bUseRevision.Not)
'		Gui.Form.txtNewPartRev.Enabled(False)
'		Gui.Form.txtPartRev.Enabled(False)
'		Gui.Form.txtRev.Enabled(False)
'	F.Intrinsic.Control.EndIf
	
	Gui.Form..Caption("Mass Replace Parts on Open Work Orders (6169) - Replace Material")
	Gui.Form.frameReplace.Visible(True)
	Gui.Form.frameAdd.Visible(False)
	
	'Set the character behavior to UpperCase
	Gui.Form.txtBOM.CharacterCasing(1)
	Gui.Form.txtRev.CharacterCasing(1)
	Gui.Form.txtPartNo.CharacterCasing(1)
	Gui.Form.txtPartRev.CharacterCasing(1)
	Gui.Form.txtPartLoc.CharacterCasing(1)
	Gui.Form.txtNewPartNo.CharacterCasing(1)
	Gui.Form.txtNewPartRev.CharacterCasing(1)
	Gui.Form.txtNewPartLoc.CharacterCasing(1)
	
	Gui.Form..Show

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.CheckArc5897.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sRet.Declare
		
''	F.Intrinsic.Control.If(v.Object.oHook!IsNothing,=,False)
''		F.Global.Object.Dispose("oHook")
''	F.Intrinsic.Control.EndIf
'	F.Global.Object.Create("oHook","Support.HookAssociationSequences","oDatabase",v.Global.iCon,True)
'''	F.Global.Object.Load("oHook",9,"38130","True","38130","True",v.Local.iRet)
'	F.Global.Object.LoadDataTable("dtHook","oHook","Support.HookAssociationSequences","oDatabase",v.Global.iCon,9,True,,-1,"38130","True","38130","True")
''	F.Intrinsic.Control.If(v.Object.oHook!IsNothing,=,False)
'		F.Global.Object.Dispose("oHook")
''	F.Intrinsic.Control.EndIf
	
	F.Global.Object.LoadDataTable("dtHook","oHook","Support.HookAssociationSequences","oDatabase",v.Global.iCon,9,False,,-1,"38130","True","38130","True")
	F.Data.DataTable.Select("dtHook","[Gab-FileCD-Information-FileName] like '*GAB_5897*'",V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet,=,"***NORETURN***")
		V.Global.bArc5897Installed.Set(False)
	F.Intrinsic.Control.Else
		V.Global.bArc5897Installed.Set(True)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(v.DataTable.dtHook.Exists,=,True)
		F.Data.DataTable.Close("dtHook")
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.CheckArc5897.End

Program.Sub.SetAnchors.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	' 1- top  2- Bottom  4- Left  8- Right
	gui.Form.frmCurrentPartNo.Anchor(5)
	Gui.Form.cmdExport.Anchor(5)
	gui.Form.cmdUpdate.Anchor(5)
	Gui.Form.gsWO.Anchor(15)
	gui.Form.frmLegend.Anchor(5)
	
	Gui.Form.frameReplace.Anchor(15)
	Gui.Form.acc.Anchor(5)
	
	Gui.Form.frameAdd.Anchor(15)
	Gui.Form.SplitContainerAdd.Anchor(15)
	
	Gui.Form.frameScheduling.Anchor(9)
	Gui.Form.cmdAdd.Anchor(9)
	Gui.Form.cmdReset.Anchor(9)
		
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.SetAnchors.End

Program.Sub.Bind.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sQuery.Declare
	V.Local.sPartNo.Declare
	V.Local.sPartRev.Declare
	V.Local.sPartLoc.Declare
	V.Local.sPartWithRev.Declare
	V.Local.bFileExists.Declare
	
'	F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected part","Mass Replace Parts on Open WOs [ARC 6169]")
		
	V.Global.bLoadData.Set(True)
	
	'Create MainTB
	f.Intrinsic.Control.If(v.DataTable.MainTB.Exists)
		f.Data.DataTable.Close("MainTB")
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.GSSPartString(V.Args.sPartNo.Trim,V.Args.sPartRev.Trim,V.Local.sPartWithRev)
	V.Local.sPartNo.Set(V.Args.sPartNo.Trim)
	V.Local.sPartRev.Set(V.Args.sPartRev.Trim)
	V.Local.sPartLoc.Set(V.Args.sPartLoc.Trim)
	
'	F.Intrinsic.Control.If(V.Global.bUseRevision)
'		F.Intrinsic.String.GSSPartString(V.Args.sPartNo.Trim,V.Args.sPartRev.Trim,V.Local.sPartNo)
'		V.Local.sPartLoc.Set(V.Args.sPartLoc)
'	F.Intrinsic.Control.Else
'		V.Local.sPartNo.Set(V.Args.sPartNo)
'		V.Local.sPartRev.Set(V.Args.sPartRev)
'		V.Local.sPartLoc.Set(V.Args.sPartLoc)
'	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.If(V.Global.bUseRevision)
		f.Intrinsic.String.Build("SELECT h.Job,h.Suffix,o.Seq,h.Job + '-' + h.Suffix + '-' + o.Seq as JobSuffixSeq, h.Part As ParentPartWithRev, LEFT(h.Part,17) As ParentPart, RIGHT(h.Part,3) As ParentPartRev, h.Location as ParentPartLoc,h.Part + '-' + h.Location as ParentPartWithLoc, h.Description as ParentPartDesc, '' as ParentPartExtraDesc,'' as ParentPartSortCode,h.Customer_PO,h.Customer,otw.ORDER_NO as SalesOrder, LEFT(otw.ORDER_LINE,3) as SalesOrderLine,'' as CustomerName,o.Part as PartToIssueWithRev,LEFT(o.Part,17) as PartToIssue,RIGHT(o.Part,3) as PartToIssueRev,if(o.Locn = '00', '  ', o.Locn) as PartToIssueLoc, o.Part + '-' + if(o.Locn='00','  ',o.Locn) as PartToIssueWithLoc,Case when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual = 0) then 'Fully Issued' when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual < 0) then 'Over Issued' when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual > 0) then 'Partially Issued' else '' end as IssueStatus,Case when h.Date_Closed <>  '1900-01-01' then 'Closed' when h.Date_Closed = '1900-01-01' then '' end as FlagClosed,o.OPERATION as OpCode,o.Date_Start,o.Date_Due,o.Description as PartToIssueDesc,'' as PartToIssueExtraDesc,'' as PartToIssueSortCode,h.QTY_ORDER AS QTY_ORDER,if(i.Qty_Onhand is null, 0, i.Qty_Onhand) as OnHand,o.Hours_Estimated as Required,o.Hours_Actual as Issued,o.Hours_Estimated - o.Hours_Actual as ToBeIssued,qty_onhand + QTY_ONORDER_PO + QTY_ONORDER_WO - QTY_REQUIRED as NetQty ,o.Hours_Estimated - o.Hours_Actual as OpenQty FROM V_JOB_HEADER h LEFT JOIN V_JOB_OPERATIONS o ON h.Job = o.Job and h.suffix = o.Suffix LEFT JOIN V_Inventory_Mstr i on o.Part = i.Part and if(o.Locn = '00', '  ', o.Locn) = i.Location LEFT JOIN V_ORDER_TO_WO otw on otw.JOB = h.JOB and otw.SUFFIX = h.SUFFIX WHERE h.Date_Closed = '1900-01-01' and o.Part = '{0}' and if(o.Locn = '00', '', o.Locn) = '{1}' and o.LMO = 'M' and o.SEQ < '995000' Order By o.Part, i.Qty_Onhand",V.Local.sPartWithRev.Trim,V.Local.sPartLoc,V.Local.sQuery)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("SELECT h.Job,h.Suffix,o.Seq,h.Job + '-' + h.Suffix + '-' + o.Seq as JobSuffixSeq, h.Part As ParentPartWithRev, h.Part as ParentPart, '' As ParentPartRev, h.Location as ParentPartLoc,h.Part + '-' + h.Location as ParentPartWithLoc, h.Description as ParentPartDesc, '' as ParentPartExtraDesc,'' as ParentPartSortCode,h.Customer_PO,h.Customer,otw.ORDER_NO as SalesOrder, LEFT(otw.ORDER_LINE,3) as SalesOrderLine,'' as CustomerName,o.Part as PartToIssueWithRev,o.Part as PartToIssue,'' as PartToIssueRev,if(o.Locn = '00', '  ', o.Locn) as PartToIssueLoc, o.Part + '-' + if(o.Locn='00','  ',o.Locn) as PartToIssueWithLoc,Case when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual = 0) then 'Fully Issued' when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual < 0) then 'Over Issued' when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual > 0) then 'Partially Issued' else '' end as IssueStatus,Case when h.Date_Closed <>  '1900-01-01' then 'Closed' when h.Date_Closed = '1900-01-01' then '' end as FlagClosed,o.OPERATION as OpCode,o.Date_Start,o.Date_Due,o.Description as PartToIssueDesc,'' as PartToIssueExtraDesc,'' as PartToIssueSortCode,h.QTY_ORDER AS QTY_ORDER,if(i.Qty_Onhand is null, 0, i.Qty_Onhand) as OnHand,o.Hours_Estimated as Required,o.Hours_Actual as Issued,o.Hours_Estimated - o.Hours_Actual as ToBeIssued,qty_onhand + QTY_ONORDER_PO + QTY_ONORDER_WO - QTY_REQUIRED as NetQty ,o.Hours_Estimated - o.Hours_Actual as OpenQty FROM V_JOB_HEADER h LEFT JOIN V_JOB_OPERATIONS o ON h.Job = o.Job and h.suffix = o.Suffix LEFT JOIN V_Inventory_Mstr i on o.Part = i.Part and if(o.Locn = '00', '  ', o.Locn) = i.Location LEFT JOIN V_ORDER_TO_WO otw on otw.JOB = h.JOB and otw.SUFFIX = h.SUFFIX WHERE h.Date_Closed = '1900-01-01' and o.Part = '{0}' and if(o.Locn = '00', '', o.Locn) = '{1}' and o.LMO = 'M' and o.SEQ < '995000' Order By o.Part, i.Qty_Onhand",V.Local.sPartWithRev.Trim,V.Local.sPartLoc,V.Local.sQuery)
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("MainTB","conx",V.Local.sQuery,True)
							
	'Sort Dictionary
	f.Data.Dictionary.CreateFromSQL("SortCodeDict","conx","Select Part + '-' + Location as PartLoc,Code_Sort from V_Inventory_mstr")
	f.Data.Dictionary.SetDefaultReturn("SortCodeDict","")
	f.Data.DataTable.FillFromDictionary("MainTB","SortCodeDict","ParentPartWithLoc","ParentPartSortCode")
	f.Data.DataTable.FillFromDictionary("MainTB","SortCodeDict","PartToIssueWithLoc","PartToIssueSortCode")
	f.Data.Dictionary.Close("SortCodeDict")	

	'Customer Name dictionary
	f.Data.Dictionary.CreateFromSQL("CustNameDict","conx","Select Customer,Name_Customer from V_Customer_master")
	f.Data.Dictionary.SetDefaultReturn("CustNameDict","")
	f.Data.DataTable.FillFromDictionary("MainTB","CustNameDict","Customer","CustomerName")
	f.Data.Dictionary.Close("CustNameDict")
	
'	'Extra Text dictionary
'	f.Data.Dictionary.CreateFromSQL("PartDict","conx","Select Part,Text from V_INV_EXTRA_TEXT")
'	f.Data.Dictionary.SetDefaultReturn("PartDict","")
'	f.Data.DataTable.FillFromDictionary("MainTB","PartDict","ParentPartWithRev","ParentPartExtraDesc")
'	f.Data.DataTable.FillFromDictionary("MainTB","PartDict","PartToIssueWithRev","PartToIssueExtraDesc")
'	f.Data.Dictionary.Close("PartDict")
	
	'Extra Text dictionary
	F.Intrinsic.File.Exists(V.Global.sInvExtraTextFilename,V.Local.bFileExists)
	F.Intrinsic.Control.If(V.Local.bFileExists.Not)
		'Generate Inventory Extra Text XML file
		F.Intrinsic.Control.If(V.DataTable.dtInvExtraText.Exists)
			F.Data.DataTable.Close("dtInvExtraText")
		F.Intrinsic.Control.EndIf
		F.Data.DataTable.CreateFromSQL("dtInvExtraText","conx","Select Part,Text from V_INV_EXTRA_TEXT",True)
		F.Data.DataTable.SaveToXML("dtInvExtraText",0,True,v.Global.sInvExtraTextFilename)
		F.Data.DataTable.Close("dtInvExtraText")
	F.Intrinsic.Control.EndIf
	'Load the Inv Extra Text to dtPartDict from XML file
	F.Intrinsic.Control.If(V.DataTable.dtPartDict.Exists)
		F.Data.DataTable.Close("dtPartDict")
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromXML("dtPartDict",V.Global.sInvExtraTextFilename,True)		
	f.Data.Dictionary.CreateFromDataTable("PartDict","dtPartDict","Part","Text")
	f.Data.Dictionary.SetDefaultReturn("PartDict","")
	f.Data.DataTable.FillFromDictionary("MainTB","PartDict","ParentPartWithRev","ParentPartExtraDesc")
	f.Data.DataTable.FillFromDictionary("MainTB","PartDict","PartToIssueWithRev","PartToIssueExtraDesc")
	f.Data.Dictionary.Close("PartDict")
	
	'Add Replace Flag to Data Table
	F.Data.DataTable.AddColumn("MainTB","FlagUpdate","Boolean")
	F.Data.DataTable.SetValue("MainTB",-1,"FlagUpdate",False)
		
	'Bind to grid		
	gui.Form.gsWO.AddGridviewFromDatatable("GVMain","MainTB")
	f.Intrinsic.Control.CallSub(Format_Grid)
	gui.Form.gsWO.MainView("GVMain")
	
	f.Intrinsic.Control.CallSub(Deserialize)
	
'	f.Intrinsic.UI.CloseWaitDialog
		
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.Bind.End

'Program.Sub.Bind.Start
'F.Intrinsic.Control.Try
'	V.Local.sError.Declare
'	V.Local.sFilter.Declare
'	V.Local.iRet.Declare(Long)
'		
''	F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected part","Mass Replace Parts on Open WOs [ARC 6169]")
'	
'	V.Global.bLoadData.Set(True)
'	
'	'Create MainTB
'	f.Intrinsic.Control.If(v.DataTable.MainTB.Exists)
'		f.Data.DataTable.Close("MainTB")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.Control.If(v.DataTable.TempMainTB.Exists)
'		f.Data.DataTable.Close("TempMainTB")
'	f.Intrinsic.Control.EndIf
'	
'	Function.Intrinsic.Debug.InvokeDebugger
'	Function.Intrinsic.Debug.Stop
'	
'	f.Global.Object.Create("oJobOperations","Manufacturing.WorkOrderOperations","oDatabase",V.Global.iCon,True)
''	f.Global.Object.Load("oJobOperations",256,"","","","~~~~~~","~~~",V.Args.sPartNo.Trim,V.Args.sPartRev.Trim,V.Local.iRet)
'	f.Global.Object.Load("oJobOperations",330,"","","~~~~~~",V.Args.sPartNo.Trim,V.Args.sPartRev.Trim,V.Local.iRet)

'	f.Global.Object.Create("oJobOperations","Manufacturing.WorkOrderOperations","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oJobHeaders","Manufacturing.WorkOrders","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oParentParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oMaterialParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oOrderToWO","Sales.SalesOrderWorkOrderCrossReferences","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oCustomers","Sales.Customers","oDatabase",V.Global.iCon,True)
'	f.Intrinsic.String.Build("O.RouterOperation.Material.Part.PartNumber = '{0}' AND O.RouterOperation.Material.Part.PartNumberRevision = '{1}' AND O.RouterOperation.Material.Part.LocationCode = '{2}' AND H.Scheduling.ClosedDate = '1900-01-01'",V.Args.sPartNo.Trim,V.Args.sPartRev.Trim,V.Args.sPartLoc.Trim,V.Local.sFilter)
'	f.Data.Linq.Join("LEFTJOIN","OBJECT","oJobOperations*!*O",256,"","","~~~~~~","~~~",V.Args.sPartNo.Trim,V.Args.sPartRev.Trim,"OBJECT","oJobHeaders*!*H",149,"","","~~~~~~","H.WorkOrderNumber = O.WorkOrderNumber AND H.WorkOrderSuffix = O.WorkOrderSuffix","OBJECT","oParentParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = H.Part.PartNumber AND P.PartNumberRevision = H.Part.PartNumberRevision","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = H.Part.PartNumber AND E.PartNumberRevision = H.Part.PartNumberRevision","OBJECT","oCustomers*!*C",10,"","~~~~~~","C.CustomerNumber = H.Customer.CustomerNumber","OBJECT","oMaterialParts*!*M",1286,"","","~~~~~~~~~~~~~~~~~","~~~","M.PartNumber = O.RouterOperation.Material.Part.PartNumber AND M.PartNumberRevision = O.RouterOperation.Material.Part.PartNumberRevision","OBJECT","oExtraTextParts*!*E2",3,"","","~~~~~~~~~~~~~~~~~","~~~","E2.PartNumber = O.RouterOperation.Material.Part.PartNumber AND E2.PartNumberRevision = O.RouterOperation.Material.Part.PartNumberRevision","H.WorkOrderNumber As Job*!*H.WorkOrderSuffix As Suffix*!*O.WorkOrderSequence As Seq*!*H.Part.PartNumber As ParentPart*!*H.Part.PartNumberRevision As ParentPartRev*!*H.Part.LocationCode As ParentPartLoc*!*P.Description.Primary As ParentPartDesc*!*E.Information.Comment As ParentPartExtraDesc*!*H.Customer.CustomerNumber As Customer*!*C.Billing.Address.Name As CustomerName*!*H.Information.CustomerPurchaseOrderNumber As Customer_PO*!*O.RouterOperation.Material.Part.PartNumber As PartToIssue*!*O.RouterOperation.Material.Part.PartNumberRevision As PartToIssueRev*!*O.RouterOperation.Material.Part.LocationCode As PartToIssueLoc*!*O.RouterOperation.Outside.Vendor.VendorNumber As OpCode*!*O.Scheduling.DueDate As Date_Due*!*O.Scheduling.StartDate As Date_Start*!*H.Scheduling.ClosedDate As Date_Closed*!*O.RouterOperation.Information.Description As PartToIssueDesc*!*E2.Information.Comment As PartToIssueExtraDesc*!*H.Scheduling.Quantity.Run As QTY_ORDER*!*O.Estimated.Quantity As Required*!*O.Actual.Quantity As Issued*!*M.InventoryStatus.OnHand As QTY_ONHAND*!*M.InventoryStatus.OnOrderPurchaseOrder As QTY_ONORDER_PO*!*M.InventoryStatus.OnOrderWorkOrder As QTY_ONORDER_WO*!*M.InventoryStatus.Required As QTY_REQUIRED*!*P.UserDefined.SortCode As SortCode*!*H.SalesOrderLine.SalesOrderNumber As SalesOrder*!*H.SalesOrderLine.SalesOrderLineNumber As SalesOrderLine",V.Local.sFilter,"","H.WorkOrderNumber,H.WorkOrderSuffix","TempMainTB",True)
''	f.Data.Linq.Join("LEFTJOIN","OBJECT","oJobOperations*!*O",277,"","","~~~~~~","OBJECT","oJobHeaders*!*H",149,"","","~~~~~~","H.WorkOrderNumber = O.WorkOrderNumber AND H.WorkOrderSuffix = O.WorkOrderSuffix","OBJECT","oParentParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = H.Part.PartNumber AND P.PartNumberRevision = H.Part.PartNumberRevision","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = H.Part.PartNumber AND E.PartNumberRevision = H.Part.PartNumberRevision","OBJECT","oCustomers*!*C",10,"","~~~~~~","C.CustomerNumber = H.Customer.CustomerNumber","OBJECT","oMaterialParts*!*M",1286,"","","~~~~~~~~~~~~~~~~~","~~~","M.PartNumber = O.RouterOperation.Material.Part.PartNumber AND M.PartNumberRevision = O.RouterOperation.Material.Part.PartNumberRevision","OBJECT","oExtraTextParts*!*E2",3,"","","~~~~~~~~~~~~~~~~~","~~~","E2.PartNumber = O.RouterOperation.Material.Part.PartNumber AND E2.PartNumberRevision = O.RouterOperation.Material.Part.PartNumberRevision","H.WorkOrderNumber As Job*!*H.WorkOrderSuffix As Suffix*!*O.WorkOrderSequence As Seq*!*H.Part.PartNumber As ParentPart*!*H.Part.PartNumberRevision As ParentPartRev*!*H.Part.LocationCode As ParentPartLoc*!*P.Description.Primary As ParentPartDesc*!*E.Information.Comment As ParentPartExtraDesc*!*H.Customer.CustomerNumber As Customer*!*C.Billing.Address.Name As CustomerName*!*H.Information.CustomerPurchaseOrderNumber As Customer_PO*!*O.RouterOperation.Material.Part.PartNumber As PartToIssue*!*O.RouterOperation.Material.Part.PartNumberRevision As PartToIssueRev*!*O.RouterOperation.Material.Part.LocationCode As PartToIssueLoc*!*O.RouterOperation.Outside.Vendor.VendorNumber As OpCode*!*O.Scheduling.DueDate As Date_Due*!*O.Scheduling.StartDate As Date_Start*!*H.Scheduling.ClosedDate As Date_Closed*!*O.RouterOperation.Information.Description As PartToIssueDesc*!*E2.Information.Comment As PartToIssueExtraDesc*!*H.Scheduling.Quantity.Run As QTY_ORDER*!*O.Estimated.Quantity As Required*!*O.Actual.Quantity As Issued*!*M.InventoryStatus.OnHand As QTY_ONHAND*!*M.InventoryStatus.OnOrderPurchaseOrder As QTY_ONORDER_PO*!*M.InventoryStatus.OnOrderWorkOrder As QTY_ONORDER_WO*!*M.InventoryStatus.Required As QTY_REQUIRED*!*P.UserDefined.SortCode As SortCode*!*H.SalesOrderLine.SalesOrderNumber As SalesOrder*!*H.SalesOrderLine.SalesOrderLineNumber As SalesOrderLine",V.Local.sFilter,"","H.WorkOrderNumber,H.WorkOrderSuffix","TempMainTB",True)	
'	
'	f.Global.Object.Dispose("oJobOperations")
'	f.Global.Object.Dispose("oJobHeaders")
'	f.Global.Object.Dispose("oParentParts")
'	f.Global.Object.Dispose("oMaterialParts")
'	f.Global.Object.Dispose("oOrderToWO")
'	f.Global.Object.Dispose("oExtraTextParts")
'	f.Global.Object.Dispose("oCustomers")
'	
'	Function.Intrinsic.Debug.InvokeDebugger
'	Function.Intrinsic.Debug.Stop
'	
''	f.Global.Object.Create("oTestParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
''	f.Global.Object.Load("oTestParts",3,"","","~~~~~~~~~~~~~~~~~","~~~",V.Local.iRet)
''	f.Global.Object.LoadDictionary("PartExtraTextDictionary","oTestParts","PartNumber+PartNumberRevision","Information.Comment")
''	f.Global.Object.Dispose("oTestParts")

''	f.Global.Object.LoadDataTable("dtPartExtraText","oPartExtraText","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,3,False,,-1,"","","~~~~~~~~~~~~~~~~~","~~~")
''	f.Data.DataTable.AddExpressionColumn("dtPartExtraText","PartNumberWithRev","String","[PartNumber]+'*!*'+[PartNumberRevision]")
''	f.Data.Dictionary.CreateFromDataTable("dictPartExtraText","dtPartExtraText","PartNumberWithRev","Information-Comment")
'	
'	f.Data.DataTable.Replace("TempMainTB","PartToIssueLoc","00","")
'	
'	F.Intrinsic.String.Build("PartToIssueLoc = '{0}'",V.Args.sPartLoc.Trim,V.Local.sFilter)
'	f.Data.DataView.Create("TempMainTB","TempMainTBView",22,V.Local.sFilter,"")
'	f.Data.DataView.ToDataTable("TempMainTB","TempMainTBView","MainTB",True)
'	
'	f.Data.DataTable.Close("TempMainTB")
'	
'	f.Data.DataTable.AddExpressionColumn("MainTB","FlagClosed","String","IIF(Date_Closed='1900-01-01','','Closed')")
'	f.Data.DataTable.AddExpressionColumn("MainTB","IssueStatus","String","IIF(Issued > 0 AND Required - Issued = 0,'Fully Issued',IIF(Issued > 0 AND Required - Issued < 0,'Over Issued',IIF(Issued > 0 AND Required - Issued > 0,'Partially Issued','')))")
'	f.Data.DataTable.AddExpressionColumn("MainTB","ToBeIssued","Float","Required - Issued")
'	f.Data.DataTable.AddExpressionColumn("MainTB","NetQty","Float","QTY_ONHAND + QTY_ONORDER_PO + QTY_ONORDER_WO - QTY_REQUIRED")
'	f.Data.DataTable.AddExpressionColumn("MainTB","OpenQty","Float","Required - Issued")
'	f.Data.DataTable.AddExpressionColumn("MainTB","ParentPartDescription","String","IIF(ParentPartExtraDesc <> '',ParentPartExtraDesc,ParentPartDesc)")
'	f.Data.DataTable.AddExpressionColumn("MainTB","PartToIssueDescription","String","IIF(PartToIssueExtraDesc <> '',PartToIssueExtraDesc,PartToIssueDesc)")
'	
'	'Add Replace Flag to Data Table
'	F.Data.DataTable.AddColumn("MainTB","FlagUpdate","Boolean")
'	F.Data.DataTable.SetValue("MainTB",-1,"FlagUpdate",False)
'		
'	'Bind to grid		
'	gui.Form.gsWO.AddGridviewFromDatatable("GVMain","MainTB")
'	
'	f.Intrinsic.Control.CallSub(Format_Grid)
'	gui.Form.gsWO.MainView("GVMain")
'	
'	f.Intrinsic.Control.CallSub(Deserialize)
'		
''	f.Intrinsic.UI.CloseWaitDialog
'		
'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.Bind.End

'Program.Sub.Bind.Start
'F.Intrinsic.Control.Try
'	V.Local.sError.Declare
'	V.Local.sFilter.Declare
'		
''	F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected part","Mass Replace Parts on Open WOs [ARC 6169]")
'	
'	V.Global.bLoadData.Set(True)
'	
'	'Create MainTB
'	f.Intrinsic.Control.If(v.DataTable.MainTB.Exists)
'		f.Data.DataTable.Close("MainTB")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.Control.If(v.DataTable.TempMainTB.Exists)
'		f.Data.DataTable.Close("TempMainTB")
'	f.Intrinsic.Control.EndIf
'	
'	f.Global.Object.Create("oJobOperations","Manufacturing.WorkOrderOperations","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oJobHeaders","Manufacturing.WorkOrders","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oParentParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oMaterialParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oOrderToWO","Sales.SalesOrderWorkOrderCrossReferences","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oCustomers","Sales.Customers","oDatabase",V.Global.iCon,True)
'	f.Intrinsic.String.Build("O.RouterOperation.Material.Part.PartNumber = '{0}' AND O.RouterOperation.Material.Part.PartNumberRevision = '{1}' AND H.Scheduling.ClosedDate = '1900-01-01'",V.Args.sPartNo.Trim,V.Args.sPartRev.Trim,V.Args.sPartLoc.Trim,V.Local.sFilter)
'	f.Data.Linq.Join("LEFTJOIN","OBJECT","oJobOperations*!*O",277,"","","~~~~~~","M","OBJECT","oJobHeaders*!*H",86,"","","H.WorkOrderNumber = O.WorkOrderNumber AND H.WorkOrderSuffix = O.WorkOrderSuffix","OBJECT","oParentParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = H.Part.PartNumber AND P.PartNumberRevision = H.Part.PartNumberRevision","OBJECT","oOrderToWO*!*W",3,"","~~~~~~","H.WorkOrderNumber = W.WorkOrderNumber AND H.WorkOrderSuffix = W.WorkOrderSuffix","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = H.Part.PartNumber AND E.PartNumberRevision = H.Part.PartNumberRevision","OBJECT","oCustomers*!*C",10,"","~~~~~~","C.CustomerNumber = H.Customer.CustomerNumber","OBJECT","oMaterialParts*!*M",1286,"","","~~~~~~~~~~~~~~~~~","~~~","M.PartNumber = O.RouterOperation.Material.Part.PartNumber AND M.PartNumberRevision = O.RouterOperation.Material.Part.PartNumberRevision","OBJECT","oExtraTextParts*!*E2",3,"","","~~~~~~~~~~~~~~~~~","~~~","E2.PartNumber = O.RouterOperation.Material.Part.PartNumber AND E2.PartNumberRevision = O.RouterOperation.Material.Part.PartNumberRevision","H.WorkOrderNumber As Job*!*H.WorkOrderSuffix As Suffix*!*O.WorkOrderSequence As Seq*!*H.Part.PartNumber As ParentPart*!*H.Part.PartNumberRevision As ParentPartRev*!*H.Part.LocationCode As ParentPartLoc*!*P.Description.Primary As ParentPartDesc*!*E.Information.Comment As ParentPartExtraDesc*!*H.Customer.CustomerNumber As Customer*!*C.Billing.Address.Name As CustomerName*!*H.Information.CustomerPurchaseOrderNumber As Customer_PO*!*O.RouterOperation.Material.Part.PartNumber As PartToIssue*!*O.RouterOperation.Material.Part.PartNumberRevision As PartToIssueRev*!*O.RouterOperation.Material.Part.LocationCode As PartToIssueLoc*!*O.RouterOperation.Outside.Vendor.VendorNumber As OpCode*!*O.Scheduling.DueDate As Date_Due*!*O.Scheduling.StartDate As Date_Start*!*H.Scheduling.ClosedDate As Date_Closed*!*O.RouterOperation.Information.Description As PartToIssueDesc*!*E2.Information.Comment As PartToIssueExtraDesc*!*H.Scheduling.Quantity.Run As QTY_ORDER*!*O.Estimated.Quantity As Required*!*O.Actual.Quantity As Issued*!*M.InventoryStatus.OnHand As QTY_ONHAND*!*M.InventoryStatus.OnOrderPurchaseOrder As QTY_ONORDER_PO*!*M.InventoryStatus.OnOrderWorkOrder As QTY_ONORDER_WO*!*M.InventoryStatus.Required As QTY_REQUIRED*!*P.UserDefined.SortCode As SortCode*!*W.SalesOrderLine.SalesOrderNumber As SalesOrder*!*W.SalesOrderLine.SalesOrderLineNumber As SalesOrderLine",V.Local.sFilter,"","H.WorkOrderNumber,H.WorkOrderSuffix","TempMainTB",True)
'	
'	f.Global.Object.Dispose("oJobOperations")
'	f.Global.Object.Dispose("oJobHeaders")
'	f.Global.Object.Dispose("oParentParts")
'	f.Global.Object.Dispose("oMaterialParts")
'	f.Global.Object.Dispose("oOrderToWO")
'	f.Global.Object.Dispose("oExtraTextParts")
'	f.Global.Object.Dispose("oCustomers")
'	
'	f.Data.DataTable.Replace("TempMainTB","PartToIssueLoc","00","")
'	
'	F.Intrinsic.String.Build("PartToIssueLoc = '{0}'",V.Args.sPartLoc.Trim,V.Local.sFilter)
'	f.Data.DataView.Create("TempMainTB","TempMainTBView",22,V.Local.sFilter,"")
'	f.Data.DataView.ToDataTable("TempMainTB","TempMainTBView","MainTB",True)
'	
'	f.Data.DataTable.Close("TempMainTB")
'	
'	f.Data.DataTable.AddExpressionColumn("MainTB","FlagClosed","String","IIF(Date_Closed='1900-01-01','','Closed')")
'	f.Data.DataTable.AddExpressionColumn("MainTB","IssueStatus","String","IIF(Issued > 0 AND Required - Issued = 0,'Fully Issued',IIF(Issued > 0 AND Required - Issued < 0,'Over Issued',IIF(Issued > 0 AND Required - Issued > 0,'Partially Issued','')))")
'	f.Data.DataTable.AddExpressionColumn("MainTB","ToBeIssued","Float","Required - Issued")
'	f.Data.DataTable.AddExpressionColumn("MainTB","NetQty","Float","QTY_ONHAND + QTY_ONORDER_PO + QTY_ONORDER_WO - QTY_REQUIRED")
'	f.Data.DataTable.AddExpressionColumn("MainTB","OpenQty","Float","Required - Issued")
'	f.Data.DataTable.AddExpressionColumn("MainTB","ParentPartDescription","String","IIF(ParentPartExtraDesc <> '',ParentPartExtraDesc,ParentPartDesc)")
'	f.Data.DataTable.AddExpressionColumn("MainTB","PartToIssueDescription","String","IIF(PartToIssueExtraDesc <> '',PartToIssueExtraDesc,PartToIssueDesc)")
'	
'	'Add Replace Flag to Data Table
'	F.Data.DataTable.AddColumn("MainTB","FlagUpdate","Boolean")
'	F.Data.DataTable.SetValue("MainTB",-1,"FlagUpdate",False)
'		
'	'Bind to grid		
'	gui.Form.gsWO.AddGridviewFromDatatable("GVMain","MainTB")
'	
'	f.Intrinsic.Control.CallSub(Format_Grid)
'	gui.Form.gsWO.MainView("GVMain")
'	
'	f.Intrinsic.Control.CallSub(Deserialize)
'		
''	f.Intrinsic.UI.CloseWaitDialog
'		
'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
Program.Sub.Bind.End

Program.Sub.gsWO_RowCellClick.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sHold.Declare
	v.Local.sPartWithRev.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
		'Open Work Order View
		f.Intrinsic.Control.CaseAny("JOB","SUFFIX","SEQ")	
			F.Intrinsic.Control.BlockEvents
			f.Intrinsic.UI.InvokeWaitDialog("Opening Work Order View...")
			F.Intrinsic.String.Concat("7","!*!",v.DataTable.MainTB(v.Args.RowIndex).Job!FieldValString,"!*!",v.DataTable.MainTB(v.Args.RowIndex).Suffix!FieldValString,"!*!","A",V.Local.sHold)
			F.Global.General.CallWrapperSync(450000,v.Local.sHold)
			f.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub

		'Open Supply and Demand screen for the ParentPart
		f.Intrinsic.Control.CaseAny("PARENTPART","PARENTPARTREV","PARENTPARTLOC")
			F.Intrinsic.Control.BlockEvents
			f.Intrinsic.UI.InvokeWaitDialog("Opening Supply and Demand...")
			f.Intrinsic.String.GSSPartString(v.DataTable.MainTB(v.Args.RowIndex).ParentPart!FieldValString,v.DataTable.MainTB(v.Args.RowIndex).ParentPartRev!FieldValString,V.Local.sPartWithRev)
			f.Intrinsic.String.Build("{0}!*!{1}!*!W",V.Local.sPartWithRev.Trim,v.DataTable.MainTB(v.Args.RowIndex).ParentPartLoc!FieldValString,v.Local.sHold)
			F.Global.General.CallWrapperSync(300011,v.Local.sHold)
			f.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub
		
		f.Intrinsic.Control.CaseAny("PARTTOISSUE","PARTTOISSUEREV","PARTTOISSUELOC")	
			F.Intrinsic.Control.BlockEvents
			f.Intrinsic.UI.InvokeWaitDialog("Opening Supply and Demand...")
			f.Intrinsic.String.GSSPartString(v.DataTable.MainTB(v.Args.RowIndex).PartToIssue!FieldValString,v.DataTable.MainTB(v.Args.RowIndex).PartToIssueRev!FieldValString,V.Local.sPartWithRev)
			f.Intrinsic.String.Build("{0}!*!{1}!*!W",V.Local.sPartWithRev.Trim,v.DataTable.MainTB(v.Args.RowIndex).PartToIssueLoc!FieldValString,v.Local.sHold)
			F.Global.General.CallWrapperSync(300011,v.Local.sHold)
			f.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndSelect
		
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.gsWO_RowCellClick.End

Program.Sub.MenuClickResetColumns.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.MenuName.UCase)
		F.Intrinsic.Control.Case("CTXREPLACE")
			F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVMAIN",V.Global.lProgID,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,"")
		F.Intrinsic.Control.Case("CTXADD")
			F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVBOM",V.Global.lProgID,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,"")
	F.Intrinsic.Control.EndSelect
	V.Global.bLoadData.Set(False)
	F.Intrinsic.Control.CallSub(cmdRefresh_Click)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry	
Program.Sub.MenuClickResetColumns.End

Program.Sub.Format_Grid.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sLableTotal.Declare
	v.Local.iCnt.Declare
	V.Local.iRequiredColIndex.Declare
	V.Local.iFlagUpdateColIndex.Declare
	
	Gui.Form.gsWO.SuspendLayout()
	'General format for the grid
	Gui.Form.gsWO.SetGridViewProperty("GVMain","AllowSort",True)
	Gui.Form.gsWO.SetGridViewProperty("GVMain","AllowFilter",True)
	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsFindAlwaysVisible",True)
	Gui.Form.gsWO.SetGridViewProperty("GVMain","EnableAppearanceOddRow",False)
	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsViewShowAutoFilterRow",True)
	
	Gui.Form.gsWO.SetGridViewProperty("GVMain","MultiSelect",True)
	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionBehaviorEditable",True)
	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsDetailShowDetailTabs",True)
	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsViewShowGroupPanel",True)
	
	Gui.Form.gsWO.SetGridViewProperty("GVMain","AllowColumnResizing",True)
	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsViewColumnAutoWidth",False)

	Gui.Form.gsWO.SetGridViewProperty("GVMain","MultiSelectMode",0)
	
	'Added: JobSuffixSeq,CustomerName
	'Invisible
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPartWithRev,ParentPartWithLoc,JobSuffixSeq,Customer,PartToIssueWithRev,PartToIssueWithLoc,QTY_ORDER","sProperty","Invisible")
	'Width	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,FlagClosed,Customer","sProperty","Width","sWidth","50")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Customer_PO","sProperty","Width","sWidth","130")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPart,PartToIssue","sProperty","Width","sWidth","100")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPartRev,ParentPartLoc,PartToIssueRev,PartToIssueLoc","sProperty","Width","sWidth","30")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Date_Start,Date_Due","sProperty","Width","sWidth","70")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","IssueStatus,ParentPartSortCode,PartToIssueSortCode,OpCode","sProperty","Width","sWidth","65")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPartDesc,PartToIssueDesc,JobSuffixSeq,CustomerName","sProperty","Width","sWidth","150")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPartExtraDesc,PartToIssueExtraDesc","sProperty","Width","sWidth","200")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Onhand,Required,Issued,ToBeIssued,OpenQty,NetQty","sProperty","Width","sWidth","100")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","SalesOrder,SalesOrderLine","sProperty","Width","sWidth","60")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","FlagUpdate","sProperty","Width","sWidth","80")
	
	'Caption
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPart@!@Header Part,ParentPartRev@!@Header Part Rev,PartToIssue@!@Part to Issue,PartToIssueRev@!@Part to Issue Rev,ParentPartDesc@!@Header Part Desc,ParentPartExtraDesc@!@Header Part Extra Desc,PartToIssueDesc@!@Part To Issue Desc,PartToIssueExtraDesc@!@Part To Issue Extra Desc,OpCode@!@Op Code,ParentPartLoc@!@Header Part Loc,PartToIssueLoc@!@Part To Issue Loc,CustomerName@!@Customer Name,Customer_PO@!@Customer PO,SalesOrder@!@SO,SalesOrderLine@!@SO LineDate_Start@!@Start Date,Date_Due@!@Due Date,OpenQty@!@Open,IssueStatus@!@Status,FlagClosed@!@Closed,NetQty@!@Net Qty,ToBeIssued@!@To be Issued,ParentPartSortCode@!@Parent Part Sort Code,PartToIssueSortCode@!@Part To Issue Sort Code,FlagUpdate@!@Update","sProperty","Caption")		
	'Header Font bold
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,JobSuffixSeq,Customer,CustomerName,ParentPart,ParentPartRev,ParentPartLoc,PartToIssue,PartToIssueRev,PartToIssueLoc,OpCode,Date_Start,Date_Due,Onhand,Required,Issued,OpenQty,Customer_PO,IssueStatus,FlagClosed,NetQty,ToBeIssued,ParentPartSortCode,PartToIssueSortCode,SalesOrder,SalesOrderLine,FlagUpdate,ParentPartDesc,ParentPartExtraDesc,PartToIssueDesc,PartToIssueExtraDesc","sProperty","HeaderFontBold")	
	'For_Row_CellClick
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,ParentPart,ParentPartRev,ParentPartLoc,PartToIssue,PartToIssueRev,PartToIssueLoc","sProperty","For_RowCell_Click")
	'For_CellValue_Changed
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Required,FlagUpdate","sProperty","For_CellValue_Changed")
	'HeaderHAlignment_Far	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Onhand,Required,Issued,OpenQty,NetQty,ToBeIssued","sProperty","HeaderAllign_Far")
	'Format Display Numeric
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Onhand,Required,Issued,OpenQty,ToBeIssued","sProperty","Decimal_1")	
	'Fixed columns left
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,ParentPart,ParentPartExtraDesc,SortCode,PartToIssue,IssueStatus,FlagClosed,Customer_PO,SalesOrder,SalesOrderLine","sProperty","FixedColumn_Left")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,ParentPart,ParentPartRev,ParentPartLoc,PartToIssue,PartToIssueRev,PartToIssueLoc,IssueStatus,FlagClosed","sProperty","FixedColumn_Left")
	'Fixed columns right
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","FlagUpdate,Required","sProperty","FixedColumn_Right")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Required,FlagUpdate","sProperty","FixedColumn_Right")
	'Columns clickable
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,ParentPart,ParentPartRev,ParentPartLoc,PartToIssue,PartToIssueRev,PartToIssueLoc","sProperty","Clickable")
	
	'Display date
	Gui.Form.gsWO.SetColumnProperty("GVMain","Date_Start","DisplayCustomDatetime","d")
	Gui.Form.gsWO.SetColumnProperty("GVMain","Date_Due","DisplayCustomDatetime","d")
	
	
	'Modified by TDjohan - 07/15/2022
	'Remove looping to speed up data loading
'	Gui.Form.gsWO.GetColumnIndexByName("GVMain","Required",V.Local.iRequiredColIndex)
'	Gui.Form.gsWO.GetColumnIndexByName("GVMain","FlagUpdate",V.Local.iFlagUpdateColIndex)
'	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.MainTB.RowCount--,1)	
'		F.Intrinsic.Control.If(v.DataTable.MainTB(v.Local.iCnt).IssueStatus!FieldValTrim,=,"Over Issued")
'			Gui.Form.gsWO.setRowAppearance("GVMain",v.Local.iCnt,"BackColor",V.Color.LtRed)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iRequiredColIndex,V.Local.iCnt,"Locked",True)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iFlagUpdateColIndex,V.Local.iCnt,"Locked",True)
'		F.Intrinsic.Control.ElseIf(v.DataTable.MainTB(v.Local.iCnt).IssueStatus!FieldValTrim,=,"Fully Issued")
'			Gui.Form.gsWO.setRowAppearance("GVMain",v.Local.iCnt,"BackColor",V.Color.LtGreen)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iRequiredColIndex,V.Local.iCnt,"Locked",True)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iFlagUpdateColIndex,V.Local.iCnt,"Locked",True)
'		F.Intrinsic.Control.ElseIf(v.DataTable.MainTB(v.Local.iCnt).IssueStatus!FieldValTrim,=,"Partially Issued")
'			Gui.Form.gsWO.setRowAppearance("GVMain",v.Local.iCnt,"BackColor",V.Color.Yellow)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iRequiredColIndex,V.Local.iCnt,"Locked",True)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iFlagUpdateColIndex,V.Local.iCnt,"Locked",True)
''		F.Intrinsic.Control.Else
''			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iRequiredColIndex,V.Local.iCnt,"Locked",False)
'		F.Intrinsic.Control.EndIf
'	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	Gui.Form.gsWO.AddStyleFormatCondition("GVMain","IssueStatus","IssueStatus1","Equal","Over Issued")
	Gui.Form.gsWO.SetStyleFormatConditionProperty("GVMain","IssueStatus","IssueStatus1","BackColor",v.Color.LtRed)
	
	Gui.Form.gsWO.AddStyleFormatCondition("GVMain","IssueStatus","IssueStatus2","Equal","Fully Issued")
	Gui.Form.gsWO.SetStyleFormatConditionProperty("GVMain","IssueStatus","IssueStatus2","BackColor",v.Color.LtGreen)
	
	Gui.Form.gsWO.AddStyleFormatCondition("GVMain","IssueStatus","IssueStatus3","Equal","Partially Issued")
	Gui.Form.gsWO.SetStyleFormatConditionProperty("GVMain","IssueStatus","IssueStatus3","BackColor",v.Color.Yellow)
	
	gui.Form.gsWO.ResumeLayout()

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)	
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.Format_Grid.End

'Program.Sub.Format_Grid.Start
'f.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	v.Local.sLableTotal.Declare
'	v.Local.iCnt.Declare
'	V.Local.iRequiredColIndex.Declare
'	V.Local.iFlagUpdateColIndex.Declare
'	
'	Gui.Form.gsWO.SuspendLayout()
'	'General format for the grid
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","AllowSort",True)
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","AllowFilter",True)
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsFindAlwaysVisible",True)
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","EnableAppearanceOddRow",False)
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsViewShowAutoFilterRow",True)
'	
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","MultiSelect",True)
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionBehaviorEditable",True)
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsDetailShowDetailTabs",True)
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsViewShowGroupPanel",True)
'	
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","AllowColumnResizing",True)
'	Gui.Form.gsWO.SetGridViewProperty("GVMain","OptionsViewColumnAutoWidth",False)

'	Gui.Form.gsWO.SetGridViewProperty("GVMain","MultiSelectMode",0)
'	
'	'Added: JobSuffixSeq,CustomerName
'	'Invisible
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPartDesc,ParentPartExtraDesc,PartToIssueDesc,PartToIssueExtraDesc,Date_Closed,Customer,QTY_ORDER,QTY_ONORDER_PO,QTY_ONORDER_WO,QTY_REQUIRED","sProperty","Invisible")
'	'Width	
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPartDesc,ParentPartExtraDesc,PartToIssueDesc,PartToIssueExtraDesc","sProperty","Width","sWidth","150")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,FlagClosed,Customer","sProperty","Width","sWidth","50")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPart,Customer_PO","sProperty","Width","sWidth","130")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPartRev,PartToIssueRev,ParentPartLoc,PartToIssueLoc","sProperty","Width","sWidth","50")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","PartToIssue","sProperty","Width","sWidth","75")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Date_Start,Date_Due,Date_Closed","sProperty","Width","sWidth","70")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","IssueStatus,SortCode,OpCode","sProperty","Width","sWidth","65")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPartDescription,PartToIssueDescription,CustomerName","sProperty","Width","sWidth","150")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","QTY_ONHAND,Required,Issued,ToBeIssued,OpenQty,NetQty","sProperty","Width","sWidth","100")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","SalesOrder,SalesOrderLine","sProperty","Width","sWidth","60")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","FlagUpdate","sProperty","Width","sWidth","80")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPartExtraDesc","sProperty","Width","sWidth","200")
'	
'	'Caption
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPart@!@Header Part,ParentPartRev@!@Header Part Rev,ParentPartLoc@!@Header Part Loc,PartToIssue@!@Part to Issue,PartToIssueRev@!@Part to Issue Rev,PartToIssueLoc@!@Part to Issue Loc,ParentPartDescription@!@Header Part Desc,OpCode@!@Op Code,ParentPartLoc@!@HeaderPartLoc,CustomerName@!@Customer Name,Customer_PO@!@Customer PO,SalesOrder@!@SO,SalesOrderLine@!@SO Line,PartToIssueDescription@!@Part To Issue Desc,Issued@!@Issued Qty,Date_Closed@!@Closed Date,Date_Start@!@Start Date,Date_Due@!@Due Date,OpenQty@!@Open,IssueStatus@!@Status,FlagClosed@!@Closed,NetQty@!@Net Qty,ToBeIssued@!@To be Issued Qty,SortCode@!@Sort Code,FlagUpdate@!@Update,Required@!@Required Qty,QTY_ONHAND@!@Onhand Qty,QTY_ONORDER_PO@!@OnOrderPO Qty,QTY_ONORDER_WO@!@OnOrderWO Qty,QTY_REQUIRED@!@Reqd Qty,QTY_ORDER@!@Order Qty,CUSTOMER@!@Customer Code","sProperty","Caption")		
'	'Header Font bold
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,Customer,CustomerName,ParentPart,ParentPartRev,ParentPartLoc,PartToIssue,PartToIssueRev,PartToIssueLoc,OpCode,Date_Closed,Date_Start,Date_Due,ParentPartDescription,QTY_ONHAND,Required,Issued,OpenQty,Customer_PO,IssueStatus,FlagClosed,NetQty,ToBeIssued,SortCode,ParentPartLoc,SalesOrder,SalesOrderLine,FlagUpdate,PartToIssueDescription,QTY_ONHAND,QTY_ONORDER_PO,QTY_ONORDER_WO,QTY_REQUIRED,QTY_ORDER","sProperty","HeaderFontBold")	
'	'For_Row_CellClick
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPart,PartToIssue","sProperty","For_RowCell_Click")
'	'For_CellValue_Changed
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Required,FlagUpdate","sProperty","For_CellValue_Changed")
'	'HeaderHAlignment_Far	
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","QTY_ONHAND,Required,Issued,OpenQty,NetQty,ToBeIssued","sProperty","HeaderAllign_Far")
'	'Format Display Numeric
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","QTY_ONHAND,Required,Issued,OpenQty,NetQty,ToBeIssued","sProperty","Decimal_1")	
'	'Fixed columns left
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,ParentPart,ParentPartRev,ParentPartLoc,ParentPartDescription,SortCode","sProperty","FixedColumn_Left")
''	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","Job,Suffix,Seq,ParentPart,ParentPartRev,ParentPartLoc,ParentPartDescription,SortCode,PartToIssue,PartToIssueRev,PartToIssueLoc,IssueStatus,FlagClosed","sProperty","FixedColumn_Left")
'	'Fixed columns right
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","FlagUpdate,Required","sProperty","FixedColumn_Right")
'	'Columns clickable
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsWO","GV","GVMain","sInputColumns","ParentPart,PartToIssue","sProperty","Clickable")
'	
'	'Display date
'	Gui.Form.gsWO.SetColumnProperty("GVMain","Date_Closed","DisplayCustomDatetime","d")
'	Gui.Form.gsWO.SetColumnProperty("GVMain","Date_Start","DisplayCustomDatetime","d")
'	Gui.Form.gsWO.SetColumnProperty("GVMain","Date_Due","DisplayCustomDatetime","d")
'	
'	Gui.Form.gsWO.GetColumnIndexByName("GVMain","Required",V.Local.iRequiredColIndex)
'	Gui.Form.gsWO.GetColumnIndexByName("GVMain","FlagUpdate",V.Local.iFlagUpdateColIndex)
'	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.MainTB.RowCount--,1)	
'		F.Intrinsic.Control.If(v.DataTable.MainTB(v.Local.iCnt).IssueStatus!FieldValTrim,=,"Over Issued")
'			Gui.Form.gsWO.setRowAppearance("GVMain",v.Local.iCnt,"BackColor",V.Color.LtRed)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iRequiredColIndex,V.Local.iCnt,"Locked",True)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iFlagUpdateColIndex,V.Local.iCnt,"Locked",True)
'		F.Intrinsic.Control.ElseIf(v.DataTable.MainTB(v.Local.iCnt).IssueStatus!FieldValTrim,=,"Fully Issued")
'			Gui.Form.gsWO.setRowAppearance("GVMain",v.Local.iCnt,"BackColor",V.Color.LtGreen)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iRequiredColIndex,V.Local.iCnt,"Locked",True)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iFlagUpdateColIndex,V.Local.iCnt,"Locked",True)
'		F.Intrinsic.Control.ElseIf(v.DataTable.MainTB(v.Local.iCnt).IssueStatus!FieldValTrim,=,"Partially Issued")
'			Gui.Form.gsWO.setRowAppearance("GVMain",v.Local.iCnt,"BackColor",V.Color.Yellow)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iRequiredColIndex,V.Local.iCnt,"Locked",True)
'			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iFlagUpdateColIndex,V.Local.iCnt,"Locked",True)
''		F.Intrinsic.Control.Else
''			Gui.Form.gsWO.SetCellProperty("GVMain",V.Local.iRequiredColIndex,V.Local.iCnt,"Locked",False)
'		F.Intrinsic.Control.EndIf
'	f.Intrinsic.Control.Next(v.Local.iCnt)
'	
'	gui.Form.gsWO.ResumeLayout()

'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)	
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.Format_Grid.End

Program.Sub.FormatBulk.Start
f.Intrinsic.Control.Try
	V.Local..BulkDeclareString(sError,sColumns,sHold)
	v.Local..BulkDeclareLong(iCnt)
	
	f.Intrinsic.String.Split(v.Args.sInputColumns,",",v.Local.sColumns)
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sColumns.UBound,1)
		F.Intrinsic.Control.SelectCase(v.Args.sProperty)
			F.Intrinsic.Control.Case("MinWidth")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"MinWidth",v.Args.sWidth)
			F.Intrinsic.Control.Case("MaxWidth")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"MaxWidth",v.Args.sWidth)
			F.Intrinsic.Control.Case("Width")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"Width",v.Args.sWidth)
			F.Intrinsic.Control.Case("Invisible")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"Visible",False)
			F.Intrinsic.Control.Case("VisibleIndex")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"VisibleIndex",v.Local.iCnt)
			F.Intrinsic.Control.Case("Caption")
				f.Intrinsic.String.Split(v.Local.sColumns(v.Local.iCnt),"@!@",v.Local.sHold)
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sHold(0),"Caption",v.Local.sHold(1))
			F.Intrinsic.Control.Case("HeaderAllign_Far")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"HeaderHAlignment","Far")
			F.Intrinsic.Control.Case("HeaderFontBold")	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"HeaderFontBold",True)
			F.Intrinsic.Control.Case("Decimal_1")	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"DisplayCustomNumeric","###,###,###,##0.00")
			F.Intrinsic.Control.Case("Decimal_2")	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"DisplayCustomNumeric","###,###,###,##0.0000")
			F.Intrinsic.Control.Case("Integer")	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"DisplayCustomNumeric","###,###,###,##0")
			f.Intrinsic.Control.Case("For_CellValue_Changed")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"AllowEdit",True)	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"ReadOnly",False)
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"CellBackColor","LightYellow")
			f.Intrinsic.Control.Case("For_RowCell_Click")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"AllowEdit",False)	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"ReadOnly",True)
			f.Intrinsic.Control.Case("FixedColumn_Left")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"Fixed","Left")
			f.Intrinsic.Control.Case("FixedColumn_Right")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"Fixed","Right")
			f.Intrinsic.Control.Case("FixedColumn_Right")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"Fixed","Right")
			f.Intrinsic.Control.Case("HeaderWordWrap")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"HeaderWordWrap","Wrap")	
'				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"CellFontBold",True)
			f.Intrinsic.Control.Case("EditorButton")
				f.Intrinsic.String.Split(v.Local.sColumns(v.Local.iCnt),"@!@",v.Local.sHold)
				gui.Form.[v.Args.GS].ColumnEdit(v.Args.GV,v.Local.sHold(0),"EditorButton",v.Local.sHold(1))	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sHold(0),"ShowCaption",False)	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sHold(0),"AllowEdit",False)	
			f.Intrinsic.Control.Case("IconBrowse")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"Icon","Browse")
			f.Intrinsic.Control.Case("Clickable")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"CellForeColor","Blue")	
			f.Intrinsic.Control.Case("DisplayCustomDateTime")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"DisplayCustomDateTime",V.Args.sDateTimeFormat)	
			F.Intrinsic.Control.EndSelect		
	f.Intrinsic.Control.Next(v.Local.iCnt)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.FormatBulk.End

Program.Sub.UnLoad.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.iPID.Declare
	v.Local.sMessage.Declare
	v.Local.iRet.Declare
	
	F.Intrinsic.Control.If(V.Global.bSqlTrans)
		F.ODBC.Connection!conx.RollbackTransaction
		V.Global.bSqlTrans.Set(False)
	F.Intrinsic.Control.EndIf
				
	F.Intrinsic.Control.CallSub(DeleteDataFromCustomTable)
		
	F.Intrinsic.Control.If(V.ODBC.conx.State,=,1)
		F.ODBC.Connection!conx.close
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.MainTB.Exists,=,True)
		F.Data.DataTable.Close("MainTB")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtBOM.Exists,=,True)
		F.Data.DataTable.Close("dtBOM")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtBomBrowser.Exists,=,True)
		F.Data.DataTable.Close("dtBomBrowser")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtInventoryBrowser.Exists,=,True)
		F.Data.DataTable.Close("dtInventoryBrowser")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtNewJobCommitments.Exists,=,True)
		F.Data.DataTable.Close("dtNewJobCommitments")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtOldJobCommitments.Exists,=,True)
		F.Data.DataTable.Close("dtOldJobCommitments")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtNewMaterial.Exists,=,True)
		F.Data.DataTable.Close("dtNewMaterial")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Global.bPartReplaced)
		F.Intrinsic.String.Build("It is recommended to run Balance Requirements after you replace Parts in Work Order.{0}Do you want to run Balance Requirements now?",V.Ambient.NewLine,V.Local.sMessage)
		F.Intrinsic.UI.Msgbox(V.Local.sMessage,,4,V.Local.iRet)
		F.Intrinsic.Control.If(V.Local.iRet,=,6)
			'Run Inventory > Administration > Balance Requirements
			f.Global.General.LaunchMenuTask(319,v.Local.iPID)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	Function.Intrinsic.String.Build("Subroutine Error {0}{0}Subroutine: {1}{0}Error Occurred {2} with description {3}",V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End	
F.Intrinsic.Control.EndTry
Program.Sub.UnLoad.End

Program.Sub.cmdExport_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
 	V.Local.sFileExport.Declare
    V.Local.bExcel.Declare
    V.Local.bFileLocked.Declare
    V.Local.sMsg.Declare
	
	F.Intrinsic.Control.BlockEvents	
	
    F.Automation.MSExcel.CheckPresence(V.Local.bExcel)

    F.Intrinsic.Control.If(V.Local.bExcel)
        F.Intrinsic.String.Build("{0}\GAB_6169_OpenWOs_{1}.xlsx",V.Caller.LocalGssTempDir,v.Ambient.Now.FormatMMDDYYYYHhNnSs,V.Local.sFileExport)
        F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
        F.Intrinsic.Control.If(V.Local.bFileLocked)
            F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
            F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
        F.Intrinsic.Control.Else
            Gui.Form.gsWO.Export(V.Local.sFileExport,"xlsx")
            F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
        F.Intrinsic.Control.EndIf
    F.Intrinsic.Control.Else
        F.Intrinsic.String.Build("{0}\GAB_6169_OpenWOs_{1}.xlsx",V.Caller.LocalGssTempDir,v.Ambient.Now.FormatMMDDYYHhNnSs,V.Local.sFileExport)
        F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
        F.Intrinsic.Control.If(V.Local.bFileLocked)
            F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
            F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
        F.Intrinsic.Control.Else
            Gui.Form.gsWO.Export(V.Local.sFileExport,"csv")
        F.Intrinsic.Control.EndIf
        F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
    F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.UnBlockEvents
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.cmdExport_Click.End

Program.Sub.cmdRefresh_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
				
	F.Intrinsic.Control.If(V.Screen.Form!frameReplace.Visible,=,True)
		F.Intrinsic.Control.CallSub(txtPartLoc_LostFocus)
	F.Intrinsic.Control.ElseIf(V.Screen.Form!frameAdd.Visible,=,True)
		F.Intrinsic.Control.CallSub(txtRev_LostFocus)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.cmdRefresh_Click.End

Program.Sub.Form_UnLoad.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	'Serialize before closing all
	f.Intrinsic.Control.If(V.Global.bLoadData)
		f.Intrinsic.Control.CallSub(Serialize)	
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub(Unload)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.Form_UnLoad.End

Program.Sub.SetContextMenus.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	Gui.Form..ContextMenuCreate("ctxReplace")
	Gui.Form..ContextMenuCreate("ctxAdd")
	Gui.Form.gsWO.ContextMenuAttach("ctxReplace")
	Gui.Form.gsBOM.ContextMenuAttach("ctxAdd")
	
	Gui.Form..ContextMenuAddItem("ctxReplace","ResetColumns",0,"Reset Columns")
	Gui.Form..ContextMenuAddItem("ctxAdd","ResetColumns",0,"Reset Columns")
	
	Gui.Form..ContextMenuSetItemEventHandler("ctxReplace","ResetColumns","MenuClickResetColumns")
	Gui.Form..ContextMenuSetItemEventHandler("ctxAdd","ResetColumns","MenuClickResetColumns")
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.SetContextMenus.End

Program.Sub.Deserialize.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sSerialize.Declare	
	v.Local.sSQL.Declare	
	v.Local.sUserID.Declare
	
	F.Global.Security.GetUserID(v.Caller.User.Trim,v.Caller.CompanyCode,v.Local.sUserID)
	
	'Delete old registry records
	F.ODBC.Connection!common.OpenConnection(V.Ambient.Ccon,V.Ambient.Cuser,V.Ambient.Cpass)		
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = {2} and Seq < 1000;",v.Local.sUserID,v.Caller.CompanyCode,V.Global.lProgID,v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)
	F.ODBC.Connection!common.Close
	
	F.Intrinsic.Control.If(v.Screen.Form!frameReplace.Visible,=,True)
		F.Global.Registry.ReadValue(V.Caller.User.Trim,V.Caller.CompanyCode,"GVMAIN",V.Global.lProgID,1000,6,"",V.Local.sSerialize)
		F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
			Gui.Form.gsWO.Deserialize(V.Local.sSerialize)
		F.Intrinsic.Control.EndIf	
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.If(v.Screen.Form!frameAdd.Visible,=,True)
		F.Global.Registry.ReadValue(V.Caller.User.Trim,V.Caller.CompanyCode,"GVBOM",V.Global.lProgID,1000,6,"",V.Local.sSerialize)
		F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
			Gui.Form.gsBOM.Deserialize(V.Local.sSerialize)
		F.Intrinsic.Control.EndIf	
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.Deserialize.End

Program.Sub.Serialize.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare	
	V.Local.sSerialize.Declare
	
	'GVMain
	F.Intrinsic.Control.If(V.DataTable.MainTB.Exists,=,True)
		Gui.Form.gsWO.Serialize("GVMAIN",V.Local.sSerialize)
		F.Global.Registry.AddValue(V.Caller.User.Trim,V.Caller.CompanyCode,"GVMAIN",V.Global.lProgID,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	F.Intrinsic.Control.EndIf
	
	'GVBOM
	F.Intrinsic.Control.If(V.DataTable.dtBOM.Exists,=,True)
		Gui.Form.gsBOM.Serialize("GVBOM",V.Local.sSerialize)
		F.Global.Registry.AddValue(V.Caller.User.Trim,V.Caller.CompanyCode,"GVBOM",V.Global.lProgID,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.gsWO_CellValueChanged.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare	
		
	'QtyRequired
	f.Intrinsic.Control.If(v.Args.Column.UCase,=,"REQUIRED")	
		F.Intrinsic.Control.BlockEvents
		F.Intrinsic.Control.If(V.DataTable.MainTB(v.Args.RowIndex).Required!FieldValFloat,<,0)
			F.Data.DataTable.SetValue("MainTB",V.Args.RowIndex,"Required",0.00,"ToBeIssued",0.00,"FlagUpdate",True)
		F.Intrinsic.Control.Else
			F.Data.DataTable.SetValue("MainTB",V.Args.RowIndex,"ToBeIssued",V.DataTable.MainTB(v.Args.RowIndex).Required!FieldValFloat,"FlagUpdate",True)
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.UnBlockEvents
	f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.gsWO_CellValueChanged.End

Program.Sub.cmdBrowsePart_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.bFileExists.Declare
	
'	f.Intrinsic.Control.If(v.DataTable.dtInventoryBrowser.Exists,=,False)
'		f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'		f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
'		f.Global.Object.Dispose("oParts")
'		f.Global.Object.Dispose("oExtraTextParts")
'	f.Intrinsic.Control.EndIf
	
'	Function.Intrinsic.Debug.InvokeDebugger
'	Function.Intrinsic.Debug.Stop
'	
'	f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	F.Global.Object.ImportFromXML("oParts","D:\oParts.xml")
		
	F.Intrinsic.File.Exists(V.Global.sInventoryBrowserFilename,V.Local.bFileExists)
	F.Intrinsic.Control.If(V.Local.bFileExists)
		F.Intrinsic.Control.If(V.DataTable.dtInventoryBrowser.Exists)
			F.Data.DataTable.Close("dtInventoryBrowser")
		F.Intrinsic.Control.EndIf
'		F.Global.Object.ImportFromMessagePackFile(V.Global.sInventoryBrowserFilename,"dtInventoryBrowser",True)
		F.Data.DataTable.CreateFromXML("dtInventoryBrowser",V.Global.sInventoryBrowserFilename,True)
	F.Intrinsic.Control.Else
		f.Intrinsic.Control.If(v.DataTable.dtInventoryBrowser.Exists,=,False)
			f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
			f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
			f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Information.ProductLine.ProductLineCode As ProdLine*!*P.Description.Primary As Description*!*P.Description.Alternate1 As Description1*!*P.Description.Alternate2 As Description2*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty*!*P.Scheduling.LeadTime As LeadTime*!*P.Cost.MonetaryValue.Company.Unit As Cost*!*P.Cost.Alternate.MonetaryValue.Company.Unit As AltCost","","","","dtInventoryBrowser",True)
'			f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
			f.Global.Object.Dispose("oParts")
			f.Global.Object.Dispose("oExtraTextParts")
		f.Intrinsic.Control.EndIf		
	F.Intrinsic.Control.EndIf
	
	gui.Form.lookupInventoryPart.DataTableBasis("dtInventoryBrowser")
	gui.Form.lookupInventoryPart.Show

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrowsePart_Click.End

'Program.Sub.FormatGridInventoryBrowser.Start
'F.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	V.Local.sCaption.Declare
'	V.Local.iCnt.Declare
'	
'	V.Local.sCaption.Redim(0,6)
'	V.Local.sCaption(0).Set("Part")
'	V.Local.sCaption(1).Set("Rev")
'	V.Local.sCaption(2).Set("Loc")
'	V.Local.sCaption(3).Set("Description")
'	V.Local.sCaption(4).Set("Extra Description)
'	V.Local.sCaption(5).Set("UM Inv")
'	V.Local.sCaption(6).Set("onHand Qty")
'	
'	Gui.Form.lookupInventoryPart.LayoutCaption(V.Local.sCaption)
'	F.Intrinsic.Control.Next(V.Local.iCnt)

'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.FormatGridInventoryBrowser.End

Program.Sub.txtPartLoc_LostFocus.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.sPartNo.Declare
	V.Local.sPartRev.Declare
	V.Local.sPartLoc.Declare
	V.Local.sFilter.Declare
	V.Local.iRet.Declare(Long,0)
		
	'Validate the PartNo, PartRev & PartLoc
	F.Intrinsic.Control.If(V.Screen.Form!txtPartNo.Text.Trim,<>,"")
		V.Local.sPartNo.Set(V.Screen.Form!txtPartNo.Text.Trim)
		V.Local.sPartRev.Set(V.Screen.Form!txtPartRev.Text.Trim)
		V.Local.sPartLoc.Set(V.Screen.Form!txtPartLoc.Text.Trim)
		
		F.Intrinsic.Control.BlockEvents
		
		
		F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected part","Mass Replace Parts on Open WOs [ARC 6169]")	
		
'		f.Global.Object.Create("oPart","Inventory.Parts","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oExtraTextPart","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
''		f.Intrinsic.String.Build("P.PartNumberRevision = '{0}'",V.Local.sPartRev,V.Local.sPartLoc,V.Local.sFilter)
'		f.Intrinsic.String.Build("P.PartNumberRevision = '{0}' AND P.LocationCode = '{1}'",V.Local.sPartRev,V.Local.sPartLoc,V.Local.sFilter)
''		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1595,V.Local.sPartNo,V.Local.sPartRev,"OBJECT","oExtraTextPart*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtPart",False)
'		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1384,V.Local.sPartNo,V.Local.sPartNo,V.Local.sPartRev,V.Local.sPartRev,V.Local.sPartLoc,V.Local.sPartLoc,"OBJECT","oExtraTextPart*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty",V.Local.sFilter,"","","dtPart",False)
		f.Global.Object.Create("oPart","Inventory.Part","oDatabase",V.Global.iCon,True)
		f.Global.Object.SetValue("oPart", "PartNumber", V.Local.sPartNo)
		f.Global.Object.SetValue("oPart", "PartNumberRevision", V.Local.sPartRev)
		f.Global.Object.SetValue("oPart", "LocationCode", V.Local.sPartLoc)
		f.Global.Object.Load("oPart",1267,V.Local.iRet)
		f.Intrinsic.Control.If(V.Local.iRet,<>,0)
			F.Intrinsic.Control.If(V.DataTable.MainTB.Exists)
				Gui.Form.gsWO.ClearRows("GVMain")
				F.Data.DataTable.Close("MainTB")
			F.Intrinsic.Control.EndIf
			F.Intrinsic.UI.CloseWaitDialog
			F.Global.Object.Dispose("oPart")
			F.Intrinsic.Control.UnBlockEvents
			F.Intrinsic.UI.Msgbox("Current Part No is invalid")
		F.Intrinsic.Control.Else
			f.Global.Object.Create("oExtraTextPart","Inventory.Support.ExtraText","oDatabase",V.Global.iCon,True)
			f.Global.Object.SetValue("oExtraTextPart", "PartNumber", V.Local.sPartNo)
			f.Global.Object.SetValue("oExtraTextPart", "PartNumberRevision", V.Local.sPartRev)
			f.Global.Object.Load("oExtraTextPart",1,V.Local.iRet)
			f.Intrinsic.Control.If(V.Local.iRet,=,0,AND,V.Object.oExtraTextPart(0).Information.Comment!FieldValTrim,<>,"")
				gui.Form.txtPartExtraDesc.Text(V.Object.oExtraTextPart(0).Information.Comment!FieldValTrim)
			f.Intrinsic.Control.Else
				gui.Form.txtPartExtraDesc.Text(V.Object.oPart(0).Description.Primary!FieldValTrim)
			f.Intrinsic.Control.EndIf
			gui.Form.txtPartDesc.Text(V.Object.oPart(0).Description.Primary!FieldValTrim)
			gui.Form.txtPartUM.Text(V.Object.oPart(0).Information.UnitOfMeasure.UnitOfMeasureCode!FieldValTrim)
			f.Intrinsic.Control.CallSub(InitializeNewPartNo)
			f.Intrinsic.Control.CallSub(Bind,"sPartNo",V.Object.oPart(0).PartNumber!FieldValTrim,"sPartRev",V.Object.oPart(0).PartNumberRevision!FieldValTrim,"sPartLoc",V.Object.oPart(0).LocationCode!FieldValTrim)
			F.Global.Object.Dispose("oPart")
			F.Global.Object.Dispose("oExtraTextPart")
			F.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.UnBlockEvents
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.txtPartLoc_LostFocus.End

'Program.Sub.txtPartLoc_LostFocus.Start
'f.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	V.Local.sPartNo.Declare
'	V.Local.sPartRev.Declare
'	V.Local.sPartLoc.Declare
'	V.Local.sFilter.Declare
'		
'	'Validate the PartNo, PartRev & PartLoc
'	F.Intrinsic.Control.If(V.Screen.Form!txtPartNo.Text.Trim,<>,"")
'		V.Local.sPartNo.Set(V.Screen.Form!txtPartNo.Text.Trim)
'		V.Local.sPartRev.Set(V.Screen.Form!txtPartRev.Text.Trim)
'		V.Local.sPartLoc.Set(V.Screen.Form!txtPartLoc.Text.Trim)
'		
'		F.Intrinsic.Control.BlockEvents		
'		
'		F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected part","Mass Replace Parts on Open WOs [ARC 6169]")	
'		
''		f.Global.Object.Create("oPart","Inventory.Parts","oDatabase",V.Global.iCon,True)
''		f.Global.Object.Create("oExtraTextPart","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'''		f.Intrinsic.String.Build("P.PartNumberRevision = '{0}'",V.Local.sPartRev,V.Local.sPartLoc,V.Local.sFilter)
''		f.Intrinsic.String.Build("P.PartNumberRevision = '{0}' AND P.LocationCode = '{1}'",V.Local.sPartRev,V.Local.sPartLoc,V.Local.sFilter)
'''		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1595,V.Local.sPartNo,V.Local.sPartRev,"OBJECT","oExtraTextPart*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtPart",False)
''		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1384,V.Local.sPartNo,V.Local.sPartNo,V.Local.sPartRev,V.Local.sPartRev,V.Local.sPartLoc,V.Local.sPartLoc,"OBJECT","oExtraTextPart*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty",V.Local.sFilter,"","","dtPart",False)
'		f.Global.Object.Create("oPart","Inventory.Part","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oExtraTextPart","Inventory.Support.ExtraText","oDatabase",V.Global.iCon,True)
'		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1267,V.Local.sPartNo,V.Local.sPartRev,V.Local.sPartLoc,"OBJECT","oExtraTextPart*!*E",1,V.Local.sPartNo,V.Local.sPartRev,"P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtPart",False)
'		f.Global.Object.Dispose("oPart")
'		f.Global.Object.Dispose("oExtraTextPart")
'		f.Intrinsic.Control.If(V.DataTable.dtPart.Exists,=,True,"AND",V.DataTable.dtPart.RowCount,>,0)
'			F.Intrinsic.Control.If(V.DataTable.dtPart(0).Text!FieldValTrim,<>,"")
'				gui.Form.txtPartExtraDesc.Text(V.DataTable.dtPart(0).Text!FieldValTrim)
'			F.Intrinsic.Control.Else
'				gui.Form.txtPartExtraDesc.Text(V.DataTable.dtPart(0).Description!FieldValTrim)
'			F.Intrinsic.Control.EndIf
'			gui.Form.txtPartDesc.Text(V.DataTable.dtPart(0).Description!FieldValTrim)
'			gui.Form.txtPartUM.Text(V.DataTable.dtPart(0).UM_INVENTORY!FieldValTrim)
'			f.Intrinsic.Control.CallSub(InitializeNewPartNo)
'			f.Intrinsic.Control.CallSub(Bind,"sPartNo",V.DataTable.dtPart(0).Part!FieldValTrim,"sPartRev",V.DataTable.dtPart(0).PartRev!FieldValTrim,"sPartLoc",V.DataTable.dtPart(0).PartLoc!FieldValTrim)
'			F.Data.DataTable.Close("dtPart")
'			F.Intrinsic.UI.CloseWaitDialog
'			F.Intrinsic.Control.UnBlockEvents
'		F.Intrinsic.Control.Else
'			F.Intrinsic.Control.If(V.DataTable.MainTB.Exists)
'				Gui.Form.gsWO.ClearRows("GVMain")
'				F.Data.DataTable.Close("MainTB")
'			F.Intrinsic.Control.EndIf
'			F.Intrinsic.UI.CloseWaitDialog
'			F.Intrinsic.Control.UnBlockEvents
'			F.Intrinsic.UI.Msgbox("Current Part No is invalid")
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndIf
'	
'	

'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.txtPartLoc_LostFocus.End

'Program.Sub.cmdUpdate_Click.Start
'f.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	V.Local.sQuery.Declare
'	V.Local.sRet.Declare
'	V.Local.iCnt.Declare
'	V.Local.sMapper.Declare
'	V.Local.sUM.Declare
'	V.Local.fUnitCost.Declare
'	V.Local.fMatlLeadTimeHours.Declare
'	V.Local.iMatlLeadTimeHours.Declare
'	V.Local.iLeadTimeDays.Declare
'	V.Local.sOldPartWithRev.Declare
'	V.Local.sNewPartWithRev.Declare
'	
'	F.Intrinsic.Control.If(V.Screen.Form!txtPartNo.Text.Trim,<>,"",AND,V.Screen.Form!txtNewPartNo.Text.Trim,<>,"")	
'		F.Intrinsic.Control.BlockEvents
'		
'		'Validate Current Part No
'		F.Intrinsic.String.GSSPartString(V.Screen.Form!txtPartNo.Text.Trim,V.Screen.Form!txtPartRev.Text.Trim,V.Local.sOldPartWithRev)
'		F.Intrinsic.String.Build("SELECT PART, LOCATION, DESCRIPTION FROM V_INVENTORY_MSTR WHERE PART = '{0}' AND LOCATION = '{1}'",V.Local.sOldPartWithRev.Trim,V.Screen.Form!txtPartLoc.Text.Trim,V.Local.sQuery)
'		F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sQuery,V.Local.sRet)
'		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF,=,True)
'			F.Intrinsic.UI.Msgbox("Current Part No is invalid")
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
'	
'		'Validate New Part No
'		F.Intrinsic.String.GSSPartString(V.Screen.Form!txtNewPartNo.Text.Trim,V.Screen.Form!txtNewPartRev.Text.Trim,V.Local.sNewPartWithRev)
'		F.Intrinsic.String.Build("SELECT PART, LOCATION, DESCRIPTION, CAST(LTRIM(RTRIM(UM_INVENTORY)) AS CHAR(2)) AS UM, IF(AMT_ALT_COST > 0.00, AMT_ALT_COST, AMT_COST) AS UNIT_COST, TIME_MATERIAL_LEAD As LEAD_TIME FROM V_INVENTORY_MSTR WHERE PART = '{0}' AND LOCATION = '{1}'",V.Local.sNewPartWithRev.Trim,V.Screen.Form!txtNewPartLoc.Text.Trim,V.Local.sQuery)
'		F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sQuery,V.Local.sRet)
'		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF,=,True)
'			F.Intrinsic.UI.Msgbox("New Part No is invalid")
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.Else
'			F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
'			V.Local.sUM.Set(V.Local.sRet(3).Trim)
'			V.Local.fUnitCost.Set(V.Local.sRet(4))
'			V.Local.iLeadTimeDays.Set(V.Local.sRet(5))
'			F.Intrinsic.Math.Mult(V.Global.fDayLengthHrs,V.Local.iLeadTimeDays,V.Local.fMatlLeadTimeHours)
'			F.Intrinsic.Math.Round(V.Local.fMatlLeadTimeHours,0,V.Local.iMatlLeadTimeHours)
'		F.Intrinsic.Control.EndIf
'				
'		F.Intrinsic.Control.If(V.DataTable.dtLineSelected.Exists,=,True)
'			F.Data.DataTable.Close("dtLineSelected")
'		F.Intrinsic.Control.EndIf
'		F.Data.DataView.Create("MainTB","dvLineSelected",22,"FlagUpdate = True","Job ASC, Suffix ASC")
'		F.Data.DataView.ToDataTable("MainTB","dvLineSelected","dtLineSelected",True)
'		F.Data.DataView.Close("MainTB","dvLineSelected")
'		
'		
'		F.Intrinsic.Control.If(V.DataTable.dtLineSelected.RowCount,>,0)
'			F.Intrinsic.Control.CallSub(CheckLockFile)
'			F.Intrinsic.Control.If(V.Global.bLock,=,True)
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.Else
'				
'				'Remove unneeded columns from DataTable dtLineSelected
'				F.Data.DataTable.RemoveColumn("dtLineSelected","JobSuffixSeq")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","SortCode")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPart")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentLoc")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPartLoc")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","PartToIssueWithLoc")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","IssueStatus")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","FlagClosed")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","OpCode")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Date_Start")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Date_Due")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","OnHand")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Issued")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","ToBeIssued")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","NetQty")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","OpenQty")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Customer_PO")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Customer")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","SalesOrder")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","SalesOrderLine")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","CustomerName")			
'				
'				'Add new columns to DataTable dtLineSelected
'				F.Data.DataTable.AddColumn("dtLineSelected","UserID","String","",8)
'				F.Data.DataTable.AddColumn("dtLineSelected","TRMNL","String","",3)
'				F.Data.DataTable.AddColumn("dtLineSelected","UM","String","",2)
'				F.Data.DataTable.AddColumn("dtLineSelected","UNIT_COST","Float",0.00)
'				F.Data.DataTable.AddColumn("dtLineSelected","LEAD_TIME","Long",0)
'				
'				'Set values to DataTable dtLineSelected
'				F.Data.DataTable.SetValue("dtLineSelected",-1,"UserID",V.Caller.User.Trim,"TRMNL",V.Caller.Terminal.Trim)
'				F.Data.DataTable.SetValue("dtLineSelected",-1,"PartToIssue",V.Local.sNewPartWithRev.Trim,"PartToIssueLoc",V.Screen.Form!txtNewPartLoc.Text.Trim,"Description",V.Screen.Form!txtNewPartDesc.Text.Trim,"UM",V.Local.sUM,"UNIT_COST",V.Local.fUnitCost,"LEAD_TIME",V.Local.iMatlLeadTimeHours)		
'				
'				'Save the DataTable to database in Table GAB_6169_NEW_PART
'				V.Local.sMapper.Set("UserID@!@UserID*!*TRMNL@!@TRMNL*!*Job@!@Job*!*Suffix@!@Suffix*!*Seq@!@Seq*!*PartToIssue@!@Part*!*PartToIssueLoc@!@Locn*!*Description@!@Description*!*Required@!@Hours_Estimated*!*UM@!@UM*!*QTY_ORDER@!@QTY_ORDER*!*UNIT_COST@!@UNIT_COST*!*LEAD_TIME@!@LEAD_TIME")
'				F.Data.DataTable.SaveToDB("dtLineSelected",conx,"GAB_6169_NEW_PART","",128,V.Local.sMapper)
'				F.Data.DataTable.Close("dtLineSelected")			
'				
'				'Start ODBC Transaction
'				F.ODBC.Connection!conx.BeginTransaction
'				
'				'Set Sql Transaction flag
'				V.Global.bSqlTrans.Set(True)
'				
''				'Update Job Operations table
'				F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET PART = n.PART, LOCN = n.LOCN, DESCRIPTION = n.DESCRIPTION, UM = n.UM, HOURS_ESTIMATED = n.HOURS_ESTIMATED, BURDEN = n.UNIT_COST, UNITS = n.HOURS_ESTIMATED / n.QTY_ORDER, UNIT_D6 = n.HOURS_ESTIMATED / n.QTY_ORDER, DOLLARS_ESTIMATED = n.UNIT_COST * n.HOURS_ESTIMATED, LEAD_TIME = n.LEAD_TIME FROM JOB_OPERATIONS o, GAB_6169_NEW_PART n WHERE o.JOB = n.JOB AND o.SUFFIX = n.SUFFIX AND o.SEQ = n.SEQ AND n.USERID = '{0}' AND n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
'				F.ODBC.Connection!conx.Execute(V.Local.sQuery)				
'				
'				'Cannot update PART on Job_Commitments table because it is not modifiable
'				'Have to do select, delete, and insert
'				'Select the related records from JOB_COMMITMENTS table
'				F.Intrinsic.Control.If(V.DataTable.dtNewJobCommitments.Exists,=,True)
'					F.Data.DataTable.Close("dtNewJobCommitments")
'				F.Intrinsic.Control.EndIf
'				F.Intrinsic.Control.If(V.DataTable.dtOldJobCommitments.Exists,=,True)
'					F.Data.DataTable.Close("dtOldJobCommitments")
'				F.Intrinsic.Control.EndIf
'				F.Intrinsic.String.Build("SELECT n.PART, n.LOCN AS LOCATION, c.JOB, c.SUFFIX, c.DATE_COMMITMENT, c.SEQUENCE, c.CUSTOMER, n.HOURS_ESTIMATED AS QTY_COMMITTED, c.DATE_ISSUED, c.QTY_ISSUED, c.QTY_SHIP, c.DATE_DUE, n.UNIT_COST, c.CLOSED, c.JOB_PARENT, c.FLAG_SHORT, c.START_DATE, c.F_TYPE, c.FILLER FROM JOB_COMMITMENTS c, GAB_6169_NEW_PART n WHERE c.JOB = n.JOB and c.SUFFIX = n.SUFFIX and c.SEQUENCE = n.SEQ and n.USERID = '{0}' and n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
'				F.Data.DataTable.CreateFromSQL("dtNewJobCommitments",conx,V.Local.sQuery)
'				F.Intrinsic.Control.If(V.DataTable.dtNewJobCommitments.RowCount,>,0)			
'					F.Intrinsic.String.Build("SELECT c.* FROM JOB_COMMITMENTS c, GAB_6169_NEW_PART n WHERE c.JOB = n.JOB and c.SUFFIX = n.SUFFIX and c.SEQUENCE = n.SEQ and n.USERID = '{0}' and n.TRMNL = '{1}' and c.PART = '{2}' and c.LOCATION = '{3}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sOldPartWithRev.Trim,V.Screen.Form!txtPartLoc.Text.Trim,V.Local.sQuery)
'					F.Data.DataTable.CreateFromSQL("dtOldJobCommitments",conx,V.Local.sQuery)
'					F.Intrinsic.Control.If(V.DataTable.dtOldJobCommitments.RowCount,>,0)
'						'Delete old records from Job_Commitments table
'						F.Data.DataTable.DeleteRow("dtOldJobCommitments")
'						F.Data.DataTable.SaveToDB("dtOldJobCommitments",conx,"JOB_COMMITMENTS","JOB*!*SUFFIX*!*SEQUENCE*!*PART*!*LOCATION",4,"")
'						F.Data.DataTable.Close("dtOldJobCommitments")
'					F.Intrinsic.Control.EndIf
'					
'					'Insert new records into Job_Commitments table
'					F.Data.DataTable.SaveToDB("dtNewJobCommitments",conx,"JOB_COMMITMENTS","",128,"")
'					F.Data.DataTable.Close("dtNewJobCommitments")
'				F.Intrinsic.Control.EndIf
'				
'				F.Intrinsic.Control.If(V.Global.bSqlTrans)
'					F.ODBC.Connection!conx.CommitTransaction
'					V.Global.bSqlTrans.Set(False)
'					V.Global.bPartReplaced.Set(True)
'					F.Intrinsic.Control.CallSub(DeleteDataFromCustomTable)
'				F.Intrinsic.Control.EndIf
'				
'				F.Intrinsic.Control.CallSub(cmdRefresh_Click)
'			F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.EndIf
'		
'		F.Intrinsic.Control.UnBlockEvents
'	
'	F.Intrinsic.Control.Else
'		F.Intrinsic.Control.If(V.Screen.Form!txtPartNo.Text.Trim,=,"")
'			F.Intrinsic.UI.Msgbox("Part No is invalid")
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.If(V.Screen.Form!txtNewPartNo.Text.Trim,=,"")
'			F.Intrinsic.UI.Msgbox("New Part No is invalid")
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.cmdUpdate_Click.End

'Program.Sub.cmdUpdate_Click.Start
'f.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	V.Local.sQuery.Declare
'	V.Local.sRet.Declare
'	V.Local.iCnt.Declare
'	V.Local.sMapper.Declare
'	V.Local.sUM.Declare
'	V.Local.fUnitCost.Declare

'	F.Intrinsic.Control.If(V.Screen.Form!txtPartNo.Text.Trim,<>,"",AND,V.Screen.Form!txtNewPartNo.Text.Trim,<>,"")	
'		F.Intrinsic.Control.BlockEvents
'		
'		'Validate Current Part No
'		F.Intrinsic.String.Build("SELECT PART, LOCATION, DESCRIPTION FROM V_INVENTORY_MSTR WHERE PART = '{0}' AND LOCATION = '{1}'",V.Screen.Form!txtPartNo.Text.Trim,V.Screen.Form!txtPartLoc.Text.Trim,V.Local.sQuery)
'		F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sQuery,V.Local.sRet)
'		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF,=,True)
'			F.Intrinsic.UI.Msgbox("Current Part No is invalid")
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
'	
'		'Validate New Part No
'		F.Intrinsic.String.Build("SELECT PART, LOCATION, DESCRIPTION, CAST(LTRIM(RTRIM(UM_INVENTORY)) AS CHAR(2)) AS UM, IF(AMT_ALT_COST > 0.00, AMT_ALT_COST, AMT_COST) AS UNIT_COST FROM V_INVENTORY_MSTR WHERE PART = '{0}' AND LOCATION = '{1}'",V.Screen.Form!txtNewPartNo.Text.Trim,V.Screen.Form!txtNewPartLoc.Text.Trim,V.Local.sQuery)
'		F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sQuery,V.Local.sRet)
'		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF,=,True)
'			F.Intrinsic.UI.Msgbox("New Part No is invalid")
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.Else
'			F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
'			V.Local.sUM.Set(V.Local.sRet(3).Trim)
'			V.Local.fUnitCost.Set(V.Local.sRet(4))
'		F.Intrinsic.Control.EndIf
'				
'		F.Intrinsic.Control.If(V.DataTable.dtLineSelected.Exists,=,True)
'			F.Data.DataTable.Close("dtLineSelected")
'		F.Intrinsic.Control.EndIf
'		F.Data.DataView.Create("MainTB","dvLineSelected",22,"FlagUpdate = True","Job ASC, Suffix ASC")
'		F.Data.DataView.ToDataTable("MainTB","dvLineSelected","dtLineSelected",True)
'		F.Data.DataView.Close("MainTB","dvLineSelected")
'		
'		
'		F.Intrinsic.Control.If(V.DataTable.dtLineSelected.RowCount,>,0)
'			F.Intrinsic.Control.CallSub(CheckLockFile)
'			F.Intrinsic.Control.If(V.Global.bLock,=,True)
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.Else
'				
'				'Remove unneeded columns from DataTable dtLineSelected
'				F.Data.DataTable.RemoveColumn("dtLineSelected","JobSuffixSeq")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","SortCode")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPart")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentLoc")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPartLoc")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","PartToIssueWithLoc")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","IssueStatus")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","FlagClosed")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","OpCode")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Date_Start")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Date_Due")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","OnHand")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Issued")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","ToBeIssued")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","NetQty")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","OpenQty")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Customer_PO")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","Customer")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","SalesOrder")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","SalesOrderLine")
'				F.Data.DataTable.RemoveColumn("dtLineSelected","CustomerName")			
'				
'				'Add new columns to DataTable dtLineSelected
'				F.Data.DataTable.AddColumn("dtLineSelected","UserID","String","",8)
'				F.Data.DataTable.AddColumn("dtLineSelected","TRMNL","String","",3)
'				F.Data.DataTable.AddColumn("dtLineSelected","UM","String","",2)
'				F.Data.DataTable.AddColumn("dtLineSelected","UNIT_COST","Float",0.00)
'				
'				'Set values to DataTable dtLineSelected
'				F.Data.DataTable.SetValue("dtLineSelected",-1,"UserID",V.Caller.User.Trim,"TRMNL",V.Caller.Terminal.Trim)
'				F.Data.DataTable.SetValue("dtLineSelected",-1,"PartToIssue",V.Screen.Form!txtNewPartNo.Text.Trim,"PartToIssueLoc",V.Screen.Form!txtNewPartLoc.Text.Trim,"Description",V.Screen.Form!txtNewPartDesc.Text.Trim,"UM",V.Local.sUM,"UNIT_COST",V.Local.fUnitCost)		
'				
'				'Save the DataTable to database in Table GAB_6169_NEW_PART
'				V.Local.sMapper.Set("UserID@!@UserID*!*TRMNL@!@TRMNL*!*Job@!@Job*!*Suffix@!@Suffix*!*Seq@!@Seq*!*PartToIssue@!@Part*!*PartToIssueLoc@!@Locn*!*Description@!@Description*!*Required@!@Hours_Estimated*!*UM@!@UM*!*QTY_ORDER@!@QTY_ORDER*!*UNIT_COST@!@UNIT_COST")
'				F.Data.DataTable.SaveToDB("dtLineSelected",conx,"GAB_6169_NEW_PART","",128,V.Local.sMapper)
'				F.Data.DataTable.Close("dtLineSelected")			
'				
'				'Start ODBC Transaction
'				F.ODBC.Connection!conx.BeginTransaction
'				
'				'Set Sql Transaction flag
'				V.Global.bSqlTrans.Set(True)
'				
''				'Update Job Operations table
'				F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET PART = n.PART, LOCN = n.LOCN, DESCRIPTION = n.DESCRIPTION, UM = n.UM, HOURS_ESTIMATED = n.HOURS_ESTIMATED, BURDEN = n.UNIT_COST, UNITS = n.HOURS_ESTIMATED / n.QTY_ORDER, UNIT_D6 = n.HOURS_ESTIMATED / n.QTY_ORDER, DOLLARS_ESTIMATED = n.UNIT_COST * n.HOURS_ESTIMATED FROM JOB_OPERATIONS o, GAB_6169_NEW_PART n WHERE o.JOB = n.JOB AND o.SUFFIX = n.SUFFIX AND o.SEQ = n.SEQ AND n.USERID = '{0}' AND n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
'				F.ODBC.Connection!conx.Execute(V.Local.sQuery)		
'				
'				'Cannot update PART on Job_Commitments table because it is not modifiable
'				'Have to do select, delete, and insert
'				'Select the related records from JOB_COMMITMENTS table
'				F.Intrinsic.Control.If(V.DataTable.dtNewJobCommitments.Exists,=,True)
'					F.Data.DataTable.Close("dtNewJobCommitments")
'				F.Intrinsic.Control.EndIf
'				F.Intrinsic.Control.If(V.DataTable.dtOldJobCommitments.Exists,=,True)
'					F.Data.DataTable.Close("dtOldJobCommitments")
'				F.Intrinsic.Control.EndIf
'				F.Intrinsic.String.Build("SELECT n.PART, n.LOCN AS LOCATION, c.JOB, c.SUFFIX, c.DATE_COMMITMENT, c.SEQUENCE, c.CUSTOMER, n.HOURS_ESTIMATED AS QTY_COMMITTED, c.DATE_ISSUED, c.QTY_ISSUED, c.QTY_SHIP, c.DATE_DUE, n.UNIT_COST, c.CLOSED, c.JOB_PARENT, c.FLAG_SHORT, c.START_DATE, c.F_TYPE, c.FILLER FROM JOB_COMMITMENTS c, GAB_6169_NEW_PART n WHERE c.JOB = n.JOB and c.SUFFIX = n.SUFFIX and c.SEQUENCE = n.SEQ and n.USERID = '{0}' and n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
'				F.Data.DataTable.CreateFromSQL("dtNewJobCommitments",conx,V.Local.sQuery)
'				F.Intrinsic.Control.If(V.DataTable.dtNewJobCommitments.RowCount,>,0)			
'					F.Intrinsic.String.Build("SELECT c.* FROM JOB_COMMITMENTS c, GAB_6169_NEW_PART n WHERE c.JOB = n.JOB and c.SUFFIX = n.SUFFIX and c.SEQUENCE = n.SEQ and n.USERID = '{0}' and n.TRMNL = '{1}' and c.PART = '{2}' and c.LOCATION = '{3}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Screen.Form!txtPartNo.Text.Trim,V.Screen.Form!txtPartLoc.Text.Trim,V.Local.sQuery)
'					F.Data.DataTable.CreateFromSQL("dtOldJobCommitments",conx,V.Local.sQuery)
'					F.Intrinsic.Control.If(V.DataTable.dtOldJobCommitments.RowCount,>,0)
'						'Delete old records from Job_Commitments table
'						F.Data.DataTable.DeleteRow("dtOldJobCommitments")
'						F.Data.DataTable.SaveToDB("dtOldJobCommitments",conx,"JOB_COMMITMENTS","JOB*!*SUFFIX*!*SEQUENCE*!*PART*!*LOCATION",4,"")
'						F.Data.DataTable.Close("dtOldJobCommitments")
'					F.Intrinsic.Control.EndIf
'					
'					'Insert new records into Job_Commitments table
'					F.Data.DataTable.SaveToDB("dtNewJobCommitments",conx,"JOB_COMMITMENTS","",128,"")
'					F.Data.DataTable.Close("dtNewJobCommitments")
'				F.Intrinsic.Control.EndIf
'				
'				F.Intrinsic.Control.If(V.Global.bSqlTrans)
'					F.ODBC.Connection!conx.CommitTransaction
'					V.Global.bSqlTrans.Set(False)
'					V.Global.bPartReplaced.Set(True)
'					F.Intrinsic.Control.CallSub(DeleteDataFromCustomTable)
'				F.Intrinsic.Control.EndIf
'				
'				F.Intrinsic.Control.CallSub(cmdRefresh_Click)
'			F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.EndIf
'		
'		F.Intrinsic.Control.UnBlockEvents
'	
'	F.Intrinsic.Control.Else
'		F.Intrinsic.Control.If(V.Screen.Form!txtPartNo.Text.Trim,=,"")
'			F.Intrinsic.UI.Msgbox("Part No is invalid")
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.If(V.Screen.Form!txtNewPartNo.Text.Trim,=,"")
'			F.Intrinsic.UI.Msgbox("New Part No is invalid")
'			F.Intrinsic.Control.ExitSub
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.cmdUpdate_Click.End

Program.Sub.cmdUpdate_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.sQuery.Declare
	V.Local.sRet.Declare
	V.Local.iCnt.Declare
	V.Local.sMapper.Declare
	V.Local.sUM.Declare
	V.Local.fUnitCost.Declare
	
	V.Local.iRet.Declare(Long)
	V.Local.fMatlLeadTimeHours.Declare
	V.Local.iMatlLeadTimeHours.Declare
	
	V.Local.sOldPartNoWithRev.Declare
	V.Local.sOldPartLoc.Declare
	V.Local.sOldPartDesc.Declare
	V.Local.sNewPartNoWithRev.Declare
	V.Local.sNewPartLoc.Declare
	V.Local.sNewPartDesc.Declare
	
	V.Local.sMsg.Declare
	V.Local.sFilter.Declare
	V.Local.iRow.Declare
	V.Local.bFlagUpdate.Declare
	
	Gui.Form.cmdUpdate.Enabled(False)
	
	F.Intrinsic.Control.If(V.Screen.Form!txtPartNo.Text.Trim,<>,"",AND,V.Screen.Form!txtNewPartNo.Text.Trim,<>,"")	
		F.Intrinsic.Control.BlockEvents	
		
		F.Intrinsic.UI.InvokeWaitDialog("Updating Work Orders with the selected part","Mass Replace Parts on Open WOs [ARC 6169]")
		
		'Validate Current Part No
		f.Global.Object.Create("oOldPart","Inventory.Part","oDatabase",V.Global.iCon,False)
		f.Global.Object.SetValue("oOldPart", "PartNumber", V.Screen.Form!txtPartNo.Text.Trim)
		f.Global.Object.SetValue("oOldPart", "PartNumberRevision", V.Screen.Form!txtPartRev.Text.Trim)
		f.Global.Object.SetValue("oOldPart", "LocationCode", V.Screen.Form!txtPartLoc.Text.Trim)
		f.Global.Object.Load("oOldPart",1267,V.Local.iRet)
		f.Intrinsic.Control.If(V.Local.iRet,<>,0)
			F.Intrinsic.UI.Msgbox("Current Part No is invalid")
			Gui.Form.cmdUpdate.Enabled(True)
			f.Global.Object.Dispose("oOldPart")
			F.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.UnBlockEvents
			F.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.Else
			f.Intrinsic.String.GSSPartString(V.Object.oOldPart(0).PartNumber!FieldValTrim,V.Object.oOldPart.PartNumberRevision(0)!FieldValTrim,V.Local.sOldPartNoWithRev)
			V.Local.sOldPartLoc.Set(V.Object.oOldPart(0).LocationCode!FieldvalTrim)
			V.Local.sOldPartDesc.Set(V.Object.oOldPart(0).Description.Primary!FieldValTrim)
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.If(V.Object.oOldPart!IsNothing,=,False)
			f.Global.Object.Dispose("oOldPart")
		f.Intrinsic.Control.EndIf
	
		'Validate New Part No
		f.Global.Object.Create("oNewPart","Inventory.Part","oDatabase",V.Global.iCon,False)
		f.Global.Object.SetValue("oNewPart", "PartNumber", V.Screen.Form!txtNewPartNo.Text.Trim)
		f.Global.Object.SetValue("oNewPart", "PartNumberRevision", V.Screen.Form!txtNewPartRev.Text.Trim)
		f.Global.Object.SetValue("oNewPart", "LocationCode", V.Screen.Form!txtNewPartLoc.Text.Trim)
		f.Global.Object.Load("oNewPart",1267,V.Local.iRet)
		f.Intrinsic.Control.If(V.Local.iRet,<>,0)
			F.Intrinsic.UI.Msgbox("New Part No is invalid")
			Gui.Form.cmdUpdate.Enabled(True)
			f.Global.Object.Dispose("oNewPart")
			F.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.UnBlockEvents
			F.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.Else
			V.Local.sUM.Set(V.Object.oNewPart(0).Information.UnitOfMeasure.UnitOfMeasureCode!FieldValTrim)
			f.Intrinsic.Control.If(V.Object.oNewPart(0).Cost.Alternate.MonetaryValue.Company.Unit!FieldVal,>,0.00)
				V.Local.fUnitCost.Set(V.Object.oNewPart(0).Cost.Alternate.MonetaryValue.Company.Unit!FieldVal)
			f.Intrinsic.Control.Else
				V.Local.fUnitCost.Set(V.Object.oNewPart(0).Cost.MonetaryValue.Company.Unit!FieldVal)
			f.Intrinsic.Control.EndIf
			F.Intrinsic.Math.Mult(V.Global.fDayLengthHrs,V.Object.oNewPart(0).Scheduling.LeadTime!FieldVal,V.Local.fMatlLeadTimeHours)
			F.Intrinsic.Math.Round(V.Local.fMatlLeadTimeHours,0,V.Local.iMatlLeadTimeHours)
			f.Intrinsic.String.GSSPartString(V.Object.oNewPart(0).PartNumber!FieldValTrim,V.Object.oNewPart(0).PartNumberRevision!FieldValTrim,V.Local.sNewPartNoWithRev)
			V.Local.sNewPartLoc.Set(V.Object.oNewPart(0).LocationCode!FieldvalTrim)
			V.Local.sNewPartDesc.Set(V.Object.oNewPart(0).Description.Primary!FieldValTrim)
		f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.If(V.Object.oNewPart!IsNothing,=,False)
			f.Global.Object.Dispose("oNewPart")
		f.Intrinsic.Control.EndIf
				
		F.Intrinsic.Control.If(V.DataTable.dtLineSelected.Exists,=,True)
			F.Data.DataTable.Close("dtLineSelected")
		F.Intrinsic.Control.EndIf
		F.Data.DataView.Create("MainTB","dvLineSelected",22,"FlagUpdate = True","Job ASC, Suffix ASC")
		F.Data.DataView.ToDataTable("MainTB","dvLineSelected","dtLineSelected",True)
		F.Data.DataView.Close("MainTB","dvLineSelected")
		
		F.Intrinsic.Control.If(V.DataTable.dtLineSelected.RowCount,>,0)
			F.Intrinsic.Control.CallSub(CheckLockFile)
			F.Intrinsic.Control.If(V.Global.bLock,=,True)
				
				Gui.Form.cmdUpdate.Enabled(True)
				F.Intrinsic.UI.CloseWaitDialog
				F.Intrinsic.Control.UnBlockEvents
				F.Intrinsic.Control.ExitSub
			
			F.Intrinsic.Control.Else
			
				F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtLineSelected.RowCount--,1)					
					'Retrieve the latest data from database in case the data has changed since the user loads the data initially
					f.Intrinsic.Control.If(v.Global.bUseRevision)
						f.Intrinsic.String.Build("select o.Part as PartToIssueWithRev,LEFT(o.Part,17) as PartToIssue,RIGHT(o.Part,3) as PartToIssueRev,if(o.Locn = '00', '  ', o.Locn) as PartToIssueLoc, o.Part + '-' + if(o.Locn='00','  ',o.Locn) as PartToIssueWithLoc,Case when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual = 0) then 'Fully Issued' when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual < 0) then 'Over Issued' when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual > 0) then 'Partially Issued' else '' end as IssueStatus, o.Hours_Actual as Issued, o.Hours_Estimated - o.Hours_Actual as ToBeIssued, o.Hours_Estimated - o.Hours_Actual as OpenQty from V_JOB_OPERATIONS o where o.Job = '{0}' and o.Suffix = '{1}' and o.Seq = '{2}';",v.DataTable.dtLineSelected(v.Local.iCnt).Job!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Suffix!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Seq!FieldValTrim,V.Local.sQuery)
					f.Intrinsic.Control.Else
						f.Intrinsic.String.Build("select o.Part as PartToIssueWithRev,o.Part as PartToIssue,'' as PartToIssueRev,if(o.Locn = '00', '  ', o.Locn) as PartToIssueLoc, o.Part + '-' + if(o.Locn='00','  ',o.Locn) as PartToIssueWithLoc,Case when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual = 0) then 'Fully Issued' when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual < 0) then 'Over Issued' when (o.Hours_Actual > 0 AND o.Hours_Estimated - o.Hours_Actual > 0) then 'Partially Issued' else '' end as IssueStatus, o.Hours_Actual as Issued, o.Hours_Estimated - o.Hours_Actual as ToBeIssued, o.Hours_Estimated - o.Hours_Actual as OpenQty from V_JOB_OPERATIONS o where o.Job = '{0}' and o.Suffix = '{1}' and o.Seq = '{2}';",v.DataTable.dtLineSelected(v.Local.iCnt).Job!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Suffix!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Seq!FieldValTrim,V.Local.sQuery)
					f.Intrinsic.Control.EndIf
					F.ODBC.Connection!conx.OpenLocalRecordsetRO("rstJob",V.Local.sQuery)					
					f.Intrinsic.Control.If(v.ODBC.conx!rstJob.EOF,=,False)
						'The Part To Issue on the Job Sequence has changed. Thus, we should no longer replace the Part To Issue
						f.Intrinsic.Control.If(v.ODBC.conx!rstJob.FieldVal!PartToIssueWithLoc,<>,v.DataTable.dtLineSelected(v.Local.iCnt).PartToIssueWithLoc!FieldVal)
							v.Local.bFlagUpdate.Set(False)
						'The Part To Issue on the Job Sequence is still the same
						f.Intrinsic.Control.Else
							v.Local.bFlagUpdate.Set(True)
						f.Intrinsic.Control.EndIf
						'Update the datatable dtSelectedLine
						f.Data.DataTable.SetValue("dtLineSelected",v.Local.iCnt,"PartToIssueWithRev",v.ODBC.conx!rstJob.FieldVal!PartToIssueWithRev,"PartToIssue",v.ODBC.conx!rstJob.FieldVal!PartToIssue,"PartToIssueRev",v.ODBC.conx!rstJob.FieldVal!PartToIssueRev,"PartToIssueLoc",v.ODBC.conx!rstJob.FieldVal!PartToIssueLoc,"PartToIssueWithLoc",v.ODBC.conx!rstJob.FieldVal!PartToIssueWithLoc,"IssueStatus",v.ODBC.conx!rstJob.FieldVal!IssueStatus,"Issued",v.ODBC.conx!rstJob.FieldVal!Issued,"ToBeIssued",v.ODBC.conx!rstJob.FieldVal!ToBeIssued,"OpenQty",v.ODBC.conx!rstJob.FieldVal!OpenQty)
						'Update the datatable MainTB which is binded to the main gridview
						f.Data.DataTable.AcceptChanges("dtLineSelected")
							f.Intrinsic.String.Build("Job = '{0}' and Suffix = '{1}' and Seq = '{2}'",v.DataTable.dtLineSelected(v.Local.iCnt).Job!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Suffix!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Seq!FieldValTrim,v.Local.sFilter)
							f.Data.DataTable.Select("MainTB",v.Local.sFilter,v.Local.sRet)
							f.Intrinsic.Control.If(v.Local.sRet.IsNotNoReturn)
								f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
								v.Local.iRow.Set(v.Local.sRet(0).Long)
								f.Data.DataTable.SetValue("MainTB",v.Local.iRow,"PartToIssueWithRev",v.ODBC.conx!rstJob.FieldVal!PartToIssueWithRev,"PartToIssue",v.ODBC.conx!rstJob.FieldVal!PartToIssue,"PartToIssueRev",v.ODBC.conx!rstJob.FieldVal!PartToIssueRev,"PartToIssueLoc",v.ODBC.conx!rstJob.FieldVal!PartToIssueLoc,"PartToIssueWithLoc",v.ODBC.conx!rstJob.FieldVal!PartToIssueWithLoc,"IssueStatus",v.ODBC.conx!rstJob.FieldVal!IssueStatus,"Issued",v.ODBC.conx!rstJob.FieldVal!Issued,"ToBeIssued",v.ODBC.conx!rstJob.FieldVal!ToBeIssued,"OpenQty",v.ODBC.conx!rstJob.FieldVal!OpenQty)
								f.Data.DataTable.AcceptChanges("MainTB")
								
								'Re-apply the Conditional Formatting
								Gui.Form.gsWO.AddStyleFormatCondition("GVMain","IssueStatus","IssueStatus1","Equal","Over Issued")
								Gui.Form.gsWO.SetStyleFormatConditionProperty("GVMain","IssueStatus","IssueStatus1","BackColor",v.Color.LtRed)
								
								Gui.Form.gsWO.AddStyleFormatCondition("GVMain","IssueStatus","IssueStatus2","Equal","Fully Issued")
								Gui.Form.gsWO.SetStyleFormatConditionProperty("GVMain","IssueStatus","IssueStatus2","BackColor",v.Color.LtGreen)
								
								Gui.Form.gsWO.AddStyleFormatCondition("GVMain","IssueStatus","IssueStatus3","Equal","Partially Issued")
								Gui.Form.gsWO.SetStyleFormatConditionProperty("GVMain","IssueStatus","IssueStatus3","BackColor",v.Color.Yellow)
							f.Intrinsic.Control.EndIf
					f.Intrinsic.Control.EndIf
					f.ODBC.conx!rstJob.Close
					
					'Cannot replace the Part To Issue anymore if there is already qty issued to that Job Seq
					f.Intrinsic.Control.If(v.DataTable.dtLineSelected(v.Local.iCnt).Issued!FieldVal,>,0)
						Gui.Form.cmdUpdate.Enabled(True)
						F.Intrinsic.UI.CloseWaitDialog
						F.Intrinsic.Control.If(v.DataTable.dtLineSelected(v.Local.iCnt).Suffix!FieldValTrim,=,"")
							F.Intrinsic.String.Build("Job: {0} Seq: {1} already has some quantity issued. Cannot replace the Part to Issue anymore.",v.DataTable.dtLineSelected(v.Local.iCnt).Job!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Seq!FieldValTrim,v.Local.sMsg)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("Job: {0}-{1} Seq: {2} already has some quantity issued. Cannot replace the Part to Issue anymore.",v.DataTable.dtLineSelected(v.Local.iCnt).Job!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Suffix!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Seq!FieldValTrim,v.Local.sMsg)
						F.Intrinsic.Control.EndIf
						F.Intrinsic.UI.Msgbox(v.Local.sMsg)
						F.Intrinsic.Control.UnBlockEvents
						F.Intrinsic.Control.ExitSub
					f.Intrinsic.Control.ElseIf(v.Local.bFlagUpdate,=,False)
						Gui.Form.cmdUpdate.Enabled(True)
						F.Intrinsic.UI.CloseWaitDialog
						F.Intrinsic.Control.If(v.DataTable.dtLineSelected(v.Local.iCnt).Suffix!FieldValTrim,=,"")
							F.Intrinsic.String.Build("The Part to Issue on Job: {0} Seq: {1} has changed. Please unselect the line.",v.DataTable.dtLineSelected(v.Local.iCnt).Job!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Seq!FieldValTrim,v.Local.sMsg)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("The Part to Issue on Job: {0}-{1} Seq: {2} has changed. Please unselect the line.",v.DataTable.dtLineSelected(v.Local.iCnt).Job!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Suffix!FieldValTrim,v.DataTable.dtLineSelected(v.Local.iCnt).Seq!FieldValTrim,v.Local.sMsg)
						F.Intrinsic.Control.EndIf
						F.Intrinsic.UI.Msgbox(v.Local.sMsg)
						F.Intrinsic.Control.UnBlockEvents
						F.Intrinsic.Control.ExitSub
					f.Intrinsic.Control.EndIf
				
					'Check whether the Parent Part Loc is the same as the New Part Location
					F.Intrinsic.Control.If(V.Local.sNewPartLoc,<>,V.DataTable.dtLineSelected(V.Local.iCnt).ParentPartLoc!FieldValTrim)
						Gui.Form.cmdUpdate.Enabled(True)
						F.Intrinsic.UI.CloseWaitDialog
						F.Intrinsic.UI.Msgbox("Part To Issue Location has to be the same as Parent Part Location")
						F.Intrinsic.Control.UnBlockEvents
						F.Intrinsic.Control.ExitSub
					F.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.Next(V.Local.iCnt)
				
				'Remove unneeded columns from DataTable dtLineSelected
				F.Data.DataTable.RemoveColumn("dtLineSelected","JobSuffixSeq")
				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPartSortCode")
				F.Data.DataTable.RemoveColumn("dtLineSelected","PartToIssueSortCode")
				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPart")
				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPartRev")
				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPartLoc")
				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPartWithLoc")
				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPartDesc")
				F.Data.DataTable.RemoveColumn("dtLineSelected","ParentPartExtraDesc")
				F.Data.DataTable.RemoveColumn("dtLineSelected","PartToIssueRev")
				F.Data.DataTable.RemoveColumn("dtLineSelected","PartToIssueWithLoc")
				F.Data.DataTable.RemoveColumn("dtLineSelected","PartToIssueExtraDesc")
				F.Data.DataTable.RemoveColumn("dtLineSelected","IssueStatus")
				F.Data.DataTable.RemoveColumn("dtLineSelected","FlagClosed")
				F.Data.DataTable.RemoveColumn("dtLineSelected","OpCode")
				F.Data.DataTable.RemoveColumn("dtLineSelected","Date_Start")
				F.Data.DataTable.RemoveColumn("dtLineSelected","Date_Due")
				F.Data.DataTable.RemoveColumn("dtLineSelected","OnHand")
				F.Data.DataTable.RemoveColumn("dtLineSelected","Issued")
				F.Data.DataTable.RemoveColumn("dtLineSelected","ToBeIssued")
				F.Data.DataTable.RemoveColumn("dtLineSelected","NetQty")
				F.Data.DataTable.RemoveColumn("dtLineSelected","OpenQty")
				F.Data.DataTable.RemoveColumn("dtLineSelected","Customer_PO")
				F.Data.DataTable.RemoveColumn("dtLineSelected","Customer")
				F.Data.DataTable.RemoveColumn("dtLineSelected","SalesOrder")
				F.Data.DataTable.RemoveColumn("dtLineSelected","SalesOrderLine")
				F.Data.DataTable.RemoveColumn("dtLineSelected","CustomerName")			
				
				'Add new columns to DataTable dtLineSelected
				F.Data.DataTable.AddColumn("dtLineSelected","UserID","String","",8)
				F.Data.DataTable.AddColumn("dtLineSelected","TRMNL","String","",3)
				F.Data.DataTable.AddColumn("dtLineSelected","UM","String","",2)
				F.Data.DataTable.AddColumn("dtLineSelected","UNIT_COST","Float",0.00)
				F.Data.DataTable.AddColumn("dtLineSelected","LEAD_TIME","Long",0)
				
				'Set values to DataTable dtLineSelected
				F.Data.DataTable.SetValue("dtLineSelected",-1,"UserID",V.Caller.User.Trim,"TRMNL",V.Caller.Terminal.Trim)
				F.Data.DataTable.SetValue("dtLineSelected",-1,"PartToIssue",V.Local.sNewPartNoWithRev.Trim,"PartToIssueLoc",V.Local.sNewPartLoc.Trim,"PartToIssueDesc",V.Local.sNewPartDesc.Trim,"UM",V.Local.sUM,"UNIT_COST",V.Local.fUnitCost,"LEAD_TIME",V.Local.iMatlLeadTimeHours)		
				
				'Save the DataTable to database in Table GAB_6169_NEW_PART
				V.Local.sMapper.Set("UserID@!@UserID*!*TRMNL@!@TRMNL*!*Job@!@Job*!*Suffix@!@Suffix*!*Seq@!@Seq*!*PartToIssue@!@Part*!*PartToIssueLoc@!@Locn*!*PartToIssueDesc@!@Description*!*Required@!@Hours_Estimated*!*UM@!@UM*!*QTY_ORDER@!@QTY_ORDER*!*UNIT_COST@!@UNIT_COST*!*LEAD_TIME@!@LEAD_TIME")
				F.Data.DataTable.SaveToDB("dtLineSelected",conx,"GAB_6169_NEW_PART","",128,V.Local.sMapper)
				F.Data.DataTable.Close("dtLineSelected")			
				
				'Start ODBC Transaction
				F.ODBC.Connection!conx.BeginTransaction
				
				'Set Sql Transaction flag
				V.Global.bSqlTrans.Set(True)
				
'				'Update Job Operations table
'				F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET PART = n.PART, DESCRIPTION = n.DESCRIPTION, UM = n.UM, HOURS_ESTIMATED = n.HOURS_ESTIMATED, BURDEN = n.UNIT_COST, UNITS = n.HOURS_ESTIMATED / n.QTY_ORDER, UNIT_D6 = n.HOURS_ESTIMATED / n.QTY_ORDER, DOLLARS_ESTIMATED = n.UNIT_COST * n.HOURS_ESTIMATED, LEAD_TIME = n.LEAD_TIME FROM JOB_OPERATIONS o, GAB_6169_NEW_PART n WHERE o.JOB = n.JOB AND o.SUFFIX = n.SUFFIX AND o.SEQ = n.SEQ AND n.USERID = '{0}' AND n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
				F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET PART = n.PART, LOCN = n.LOCN, DESCRIPTION = n.DESCRIPTION, UM = n.UM, HOURS_ESTIMATED = n.HOURS_ESTIMATED, BURDEN = n.UNIT_COST, UNITS = n.HOURS_ESTIMATED / n.QTY_ORDER, UNIT_D6 = n.HOURS_ESTIMATED / n.QTY_ORDER, DOLLARS_ESTIMATED = n.UNIT_COST * n.HOURS_ESTIMATED, LEAD_TIME = n.LEAD_TIME FROM JOB_OPERATIONS o, GAB_6169_NEW_PART n WHERE o.JOB = n.JOB AND o.SUFFIX = n.SUFFIX AND o.SEQ = n.SEQ AND n.USERID = '{0}' AND n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
'				F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET PART = n.PART, LOCN = n.LOCN, DESCRIPTION = n.DESCRIPTION, UM = n.UM, HOURS_ESTIMATED = n.HOURS_ESTIMATED, BURDEN = n.UNIT_COST, UNITS = n.HOURS_ESTIMATED / n.QTY_ORDER, UNIT_D6 = n.HOURS_ESTIMATED / n.QTY_ORDER, DOLLARS_ESTIMATED = n.UNIT_COST * n.HOURS_ESTIMATED FROM JOB_OPERATIONS o, GAB_6169_NEW_PART n WHERE o.JOB = n.JOB AND o.SUFFIX = n.SUFFIX AND o.SEQ = n.SEQ AND n.USERID = '{0}' AND n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
				F.ODBC.Connection!conx.Execute(V.Local.sQuery)		
				
				'Cannot update PART on Job_Commitments table because it is not modifiable
				'Have to do select, delete, and insert
				'Select the related records from JOB_COMMITMENTS table
				F.Intrinsic.Control.If(V.DataTable.dtNewJobCommitments.Exists,=,True)
					F.Data.DataTable.Close("dtNewJobCommitments")
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.If(V.DataTable.dtOldJobCommitments.Exists,=,True)
					F.Data.DataTable.Close("dtOldJobCommitments")
				F.Intrinsic.Control.EndIf
				F.Intrinsic.String.Build("SELECT n.PART, n.LOCN AS LOCATION, c.JOB, c.SUFFIX, c.DATE_COMMITMENT, c.SEQUENCE, c.CUSTOMER, n.HOURS_ESTIMATED AS QTY_COMMITTED, c.DATE_ISSUED, c.QTY_ISSUED, c.QTY_SHIP, c.DATE_DUE, n.UNIT_COST, c.CLOSED, c.JOB_PARENT, c.FLAG_SHORT, c.START_DATE, c.F_TYPE, c.FILLER FROM JOB_COMMITMENTS c, GAB_6169_NEW_PART n WHERE c.JOB = n.JOB and c.SUFFIX = n.SUFFIX and c.SEQUENCE = n.SEQ and n.USERID = '{0}' and n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
				F.Data.DataTable.CreateFromSQL("dtNewJobCommitments",conx,V.Local.sQuery)
				F.Intrinsic.Control.If(V.DataTable.dtNewJobCommitments.RowCount,>,0)			
					F.Intrinsic.String.Build("SELECT c.* FROM JOB_COMMITMENTS c, GAB_6169_NEW_PART n WHERE c.JOB = n.JOB and c.SUFFIX = n.SUFFIX and c.SEQUENCE = n.SEQ and n.USERID = '{0}' and n.TRMNL = '{1}' and c.PART = '{2}' and c.LOCATION = '{3}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sOldPartNoWithRev.Trim,V.Local.sOldPartLoc.Trim,V.Local.sQuery)
					F.Data.DataTable.CreateFromSQL("dtOldJobCommitments",conx,V.Local.sQuery)
					F.Intrinsic.Control.If(V.DataTable.dtOldJobCommitments.RowCount,>,0)
						'Delete old records from Job_Commitments table
						F.Data.DataTable.DeleteRow("dtOldJobCommitments")
						F.Data.DataTable.SaveToDB("dtOldJobCommitments",conx,"JOB_COMMITMENTS","JOB*!*SUFFIX*!*SEQUENCE*!*PART*!*LOCATION",4,"")
						F.Data.DataTable.Close("dtOldJobCommitments")
					F.Intrinsic.Control.EndIf
					
					'Insert new records into Job_Commitments table
					F.Data.DataTable.SaveToDB("dtNewJobCommitments",conx,"JOB_COMMITMENTS","",128,"")
					F.Data.DataTable.Close("dtNewJobCommitments")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.Global.bSqlTrans)
					F.ODBC.Connection!conx.CommitTransaction
					V.Global.bSqlTrans.Set(False)
					V.Global.bPartReplaced.Set(True)
					F.Intrinsic.Control.CallSub(DeleteDataFromCustomTable)
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.UI.CloseWaitDialog
				F.Intrinsic.Control.UnBlockEvents
				F.Intrinsic.Control.CallSub(cmdRefresh_Click)
			F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.Else
			F.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.UnBlockEvents
			F.Intrinsic.UI.Msgbox("Please select at least 1 line to update")
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.If(V.Screen.Form!txtPartNo.Text.Trim,=,"")
			F.Intrinsic.UI.Msgbox("Part No is invalid")
			Gui.Form.cmdUpdate.Enabled(True)
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.If(V.Screen.Form!txtNewPartNo.Text.Trim,=,"")
			F.Intrinsic.UI.Msgbox("New Part No is invalid")
			Gui.Form.cmdUpdate.Enabled(True)
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	Gui.Form.cmdUpdate.Enabled(True)
	

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.cmdUpdate_Click.End

Program.Sub.cmdBrowseNewPart_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.bFileExists.Declare
	V.Local.iRet.Declare
	
'	f.Intrinsic.Control.If(v.DataTable.dtInventoryBrowser.Exists,=,False)
'		f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'		f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = P.PartNumber AND E.PartNumberRevision = P.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
'		f.Global.Object.Dispose("oParts")
'		f.Global.Object.Dispose("oExtraTextParts")
'	f.Intrinsic.Control.EndIf
'	
'	Gui.Form.lookupInventoryNewPart.DataTableBasis("dtInventoryBrowser")
'	Gui.Form.lookupInventoryNewPart.Show
	
'	f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	F.Global.Object.ImportFromXML("oParts","D:\oParts.xml")
'	
	F.Intrinsic.File.Exists(V.Global.sInventoryBrowserFilename,V.Local.bFileExists)
	F.Intrinsic.Control.If(V.Local.bFileExists)
		F.Intrinsic.Control.If(V.DataTable.dtInventoryBrowser.Exists)
			F.Data.DataTable.Close("dtInventoryBrowser")
		F.Intrinsic.Control.EndIf
'		F.Global.Object.ImportFromMessagePackFile(V.Global.sInventoryBrowserFilename,"dtInventoryBrowser",True)
		F.Data.DataTable.CreateFromXML("dtInventoryBrowser",V.Global.sInventoryBrowserFilename,True)
	F.Intrinsic.Control.Else
		f.Intrinsic.Control.If(v.DataTable.dtInventoryBrowser.Exists,=,False)
			f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
			f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
			f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Information.ProductLine.ProductLineCode As ProdLine*!*P.Description.Primary As Description*!*P.Description.Alternate1 As Description1*!*P.Description.Alternate2 As Description2*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty*!*P.Scheduling.LeadTime As LeadTime*!*P.Cost.MonetaryValue.Company.Unit As Cost*!*P.Cost.Alternate.MonetaryValue.Company.Unit As AltCost","","","","dtInventoryBrowser",True)
'			f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
			f.Global.Object.Dispose("oParts")
			f.Global.Object.Dispose("oExtraTextParts")
		f.Intrinsic.Control.EndIf		
	F.Intrinsic.Control.EndIf
	
'	Function.Intrinsic.Debug.InvokeDebugger
'	Function.Intrinsic.Debug.Stop
'	
'	f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	F.Global.Object.Load("oParts",1466,"","","",V.Local.iRet)
'	F.Global.Object.ExportToXML("oParts","D:\oParts.xml",False)
'	f.Global.Object.Dispose("oParts")
''	F.Global.Object.ImportFromXML("oParts","D:\oParts.xml")
	
	Gui.Form.lookupInventoryNewPart.DataTableBasis("dtInventoryBrowser")
	Gui.Form.lookupInventoryNewPart.Show

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrowseNewPart_Click.End

Program.Sub.txtNewPartLoc_LostFocus.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.sPartNo.Declare
	V.Local.sPartRev.Declare
	V.Local.sPartLoc.Declare
	V.Local.sFilter.Declare
	V.Local.iRet.Declare
	
	'Validate the PartNo & PartLoc
	F.Intrinsic.Control.If(V.Screen.Form!txtNewPartNo.Text.Trim,<>,"")
		V.Local.sPartNo.Set(V.Screen.Form!txtNewPartNo.Text.Trim)
		V.Local.sPartRev.Set(V.Screen.Form!txtNewPartRev.Text.Trim)
		V.Local.sPartLoc.Set(V.Screen.Form!txtNewPartLoc.Text.Trim)
		
'		f.Global.Object.Create("oPart","Inventory.Parts","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oExtraTextPart","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
''		f.Intrinsic.String.Build("P.PartNumberRevision = '{0}'",V.Local.sPartRev,V.Local.sPartLoc,V.Local.sFilter)
'		f.Intrinsic.String.Build("P.PartNumberRevision = '{0}' AND P.LocationCode = '{1}'",V.Local.sPartRev,V.Local.sPartLoc,V.Local.sFilter)
''		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1595,V.Local.sPartNo,V.Local.sPartRev,"OBJECT","oExtraTextPart*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtPart",False)
'		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1384,V.Local.sPartNo,V.Local.sPartNo,V.Local.sPartRev,V.Local.sPartRev,V.Local.sPartLoc,V.Local.sPartLoc,"OBJECT","oExtraTextPart*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty",V.Local.sFilter,"","","dtPart",False)
		f.Global.Object.Create("oPart","Inventory.Part","oDatabase",V.Global.iCon,True)
		f.Global.Object.SetValue("oPart", "PartNumber", V.Local.sPartNo)
		f.Global.Object.SetValue("oPart", "PartNumberRevision", V.Local.sPartRev)
		f.Global.Object.SetValue("oPart", "LocationCode", V.Local.sPartLoc)
		f.Global.Object.Load("oPart",1267,V.Local.iRet)
		f.Intrinsic.Control.If(V.Local.iRet,<>,0)
			F.Global.Object.Dispose("oPart")
			F.Intrinsic.UI.Msgbox("New Part No is invalid")
		f.Intrinsic.Control.Else
			f.Global.Object.Create("oExtraTextPart","Inventory.Support.ExtraText","oDatabase",V.Global.iCon,True)
			f.Global.Object.SetValue("oExtraTextPart", "PartNumber", V.Local.sPartNo)
			f.Global.Object.SetValue("oExtraTextPart", "PartNumberRevision", V.Local.sPartRev)
			f.Global.Object.Load("oExtraTextPart",1,V.Local.iRet)
			f.Intrinsic.Control.If(V.Local.iRet,=,0,AND,V.Object.oExtraTextPart(0).Information.Comment!FieldValTrim,<>,"")
				gui.Form.txtNewPartExtraDesc.Text(V.Object.oExtraTextPart(0).Information.Comment!FieldValTrim)
			f.Intrinsic.Control.Else
				gui.Form.txtNewPartExtraDesc.Text(V.Object.oPart(0).Description.Primary!FieldValTrim)
			f.Intrinsic.Control.EndIf
			gui.Form.txtNewPartDesc.Text(V.Object.oPart(0).Description.Primary!FieldValTrim)
			gui.Form.txtNewPartUM.Text(V.Object.oPart(0).Information.UnitOfMeasure.UnitOfMeasureCode!FieldValTrim)
			F.Global.Object.Dispose("oPart")
			F.Global.Object.Dispose("oExtraTextPart")
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.txtNewPartLoc_LostFocus.End

'Program.Sub.txtNewPartLoc_LostFocus.Start
'f.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	V.Local.sPartNo.Declare
'	V.Local.sPartRev.Declare
'	V.Local.sPartLoc.Declare
'	V.Local.sFilter.Declare
'	
'	'Validate the PartNo & PartLoc
'	F.Intrinsic.Control.If(V.Screen.Form!txtNewPartNo.Text.Trim,<>,"")
'		V.Local.sPartNo.Set(V.Screen.Form!txtNewPartNo.Text.Trim)
'		V.Local.sPartRev.Set(V.Screen.Form!txtNewPartRev.Text.Trim)
'		V.Local.sPartLoc.Set(V.Screen.Form!txtNewPartLoc.Text.Trim)
'		
''		f.Global.Object.Create("oPart","Inventory.Parts","oDatabase",V.Global.iCon,True)
''		f.Global.Object.Create("oExtraTextPart","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'''		f.Intrinsic.String.Build("P.PartNumberRevision = '{0}'",V.Local.sPartRev,V.Local.sPartLoc,V.Local.sFilter)
''		f.Intrinsic.String.Build("P.PartNumberRevision = '{0}' AND P.LocationCode = '{1}'",V.Local.sPartRev,V.Local.sPartLoc,V.Local.sFilter)
'''		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1595,V.Local.sPartNo,V.Local.sPartRev,"OBJECT","oExtraTextPart*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtPart",False)
''		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1384,V.Local.sPartNo,V.Local.sPartNo,V.Local.sPartRev,V.Local.sPartRev,V.Local.sPartLoc,V.Local.sPartLoc,"OBJECT","oExtraTextPart*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty",V.Local.sFilter,"","","dtPart",False)
'		f.Global.Object.Create("oPart","Inventory.Part","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oExtraTextPart","Inventory.Support.ExtraText","oDatabase",V.Global.iCon,True)
'		f.Data.Linq.Join("LEFTJOIN","OBJECT","oPart*!*P",1267,V.Local.sPartNo,V.Local.sPartRev,V.Local.sPartLoc,"OBJECT","oExtraTextPart*!*E",1,V.Local.sPartNo,V.Local.sPartRev,"P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtPart",False)
'		f.Global.Object.Dispose("oPart")
'		f.Global.Object.Dispose("oExtraTextPart")
'		f.Intrinsic.Control.If(V.DataTable.dtPart.Exists,=,True,"AND",V.DataTable.dtPart.RowCount,>,0)
'			F.Intrinsic.Control.If(V.DataTable.dtPart(0).Text!FieldValTrim,<>,"")
'				gui.Form.txtNewPartExtraDesc.Text(V.DataTable.dtPart(0).Text!FieldValTrim)
'			F.Intrinsic.Control.Else
'				gui.Form.txtNewPartExtraDesc.Text(V.DataTable.dtPart(0).Description!FieldValTrim)
'			F.Intrinsic.Control.EndIf
'			gui.Form.txtNewPartDesc.Text(V.DataTable.dtPart(0).Description!FieldValTrim)
'			gui.Form.txtNewPartUM.Text(V.DataTable.dtPart(0).UM_INVENTORY!FieldValTrim)
'			F.Data.DataTable.Close("dtPart")
'		F.Intrinsic.Control.Else
'			F.Intrinsic.UI.Msgbox("New Part No is invalid")
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.txtNewPartLoc_LostFocus.End

Program.Sub.InitializeNewPartNo.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	
	gui.Form.txtNewPartNo.Text("")
	gui.Form.txtNewPartRev.Text("")
	gui.Form.txtNewPartLoc.Text("")
	gui.Form.txtNewPartDesc.Text("")
	gui.Form.txtNewPartExtraDesc.Text("")
	gui.Form.frmNewPartNo.Enabled(True)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.InitializeNewPartNo.End

Program.Sub.CheckLockFile.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sJob.Declare
'	V.Local.sSQL.Declare
	V.Local.sSuffix.Declare
	V.Local.sErrorMsg.Declare
	V.Local.iCnt.Declare
	
'	V.Local.iRet.Declare(Long)
	V.Local.sFilter.Declare
	V.Local.sRet.Declare
	
'	f.Global.Object.Create("oInUseCDs","Support.InUseCDs","oDatabase",V.Global.iCon,False)
'	f.Global.Object.Load("oInUseCDs",2,"","","",V.Local.iRet)
	F.Global.Object.LoadDataTable("dtInUseCDs","oInUseCDs","Support.InUseCDs","oDatabase",v.Global.iCon,2,False,,-1,"","WorkOrder","")
	
'	F.Global.Object.Dispose("oInUseCDs")
	
	V.Global.bLock.Set(False)
	V.Local.sJob.Set("")
	V.Local.sSuffix.Set("")
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtLineSelected.RowCount--,1)
		F.Intrinsic.Control.If(V.DataTable.dtLineSelected(V.Local.iCnt).Job!FieldValTrim,<>,V.Local.sJob,OR,V.DataTable.dtLineSelected(V.Local.iCnt).Suffix!FieldValTrim,<>,V.Local.sSuffix)
			V.Local.sJob.Set(V.DataTable.dtLineSelected(V.Local.iCnt).Job!FieldValTrim)
			V.Local.sSuffix.Set(V.DataTable.dtLineSelected(V.Local.iCnt).Suffix!FieldValTrim)
			
			F.Intrinsic.String.Build("[CompanyCode] = '{0}' AND [InUseReference] = '{1}-{2}'",V.Caller.CompanyCode,V.Local.sJob,V.Local.sSuffix,V.Local.sFilter)
			F.Data.DataTable.Select("dtInUseCDs",V.Local.sFilter,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
				V.Global.bLock.Set(True)
				F.Intrinsic.String.Build("Job: {0} {1}Suffix: {2} is locked by {3}.{4}All update cancelled.",V.Local.sJob,V.Ambient.Tab,V.Local.sSuffix,V.DataTable.dtInUseCDs(V.Local.sRet).TASK-USERCD-INFORMATION-SHORTNAME!FieldValTrim,V.Ambient.NewLine,V.Local.sErrorMsg)
				F.Data.DataTable.Close("dtInUseCDs")
				F.Intrinsic.UI.Msgbox(V.Local.sErrorMsg)
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			
'			F.Intrinsic.String.Build("select user_id from x_lock_file where company = '{0}' and lock_type = 'WO' and rec_key = '{1}-{2}'",V.Caller.CompanyCode,V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
'			F.ODBC.Connection!conx.OpenLocalRecordsetRO("rst",V.Local.sSQL)
'			F.Intrinsic.Control.If(V.ODBC.conx!rst.EOF,=,False)
'				V.Global.bLock.Set(True)
'				F.Intrinsic.String.Build("Job: {0} {1}Suffix: {2} is locked by {3}.{4}All update cancelled.",V.Local.sJob,V.Ambient.Tab,V.Local.sSuffix,V.ODBC.conx!rst.FieldValTrim!user_id,V.Ambient.NewLine,V.Local.sErrorMsg)
'				F.Intrinsic.UI.Msgbox(V.Local.sErrorMsg)
'				F.ODBC.conx!rst.Close
'				F.Intrinsic.Control.ExitSub
'			F.Intrinsic.Control.EndIf
'			F.ODBC.conx!rst.Close
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	F.Intrinsic.Control.If(V.DataTable.dtInUseCDs.Exists,=,True)
		F.Data.DataTable.Close("dtInUseCDs")
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry	
Program.Sub.CheckLockFile.End

Program.Sub.CheckCustomTable.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.bExists.Declare
	
	F.ODBC.Connection!conx.TableExists("GAB_6169_NEW_PART",V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,=,False)
		F.ODBC.Connection!conx.Execute("CREATE TABLE GAB_6169_NEW_PART(UserID CHAR(8), TRMNL CHAR(3), JOB CHAR(6), SUFFIX CHAR(3), SEQ CHAR(6), PART CHAR(20), LOCN CHAR(2), DESCRIPTION CHAR(30), HOURS_ESTIMATED NUMERIC(12,4), UM CHAR(2), QTY_ORDER NUMERIC(12,4), UNIT_COST NUMERIC(12,4), LEAD_TIME NUMERIC(4,0));")
		F.ODBC.Connection!conx.Execute("CREATE INDEX GAB_6169_NEW_PART01 USING 1 ON GAB_6169_NEW_PART(JOB, SUFFIX, SEQ);")
		F.ODBC.Connection!conx.Execute("CREATE INDEX GAB_6169_NEW_PART02 USING 2 ON GAB_6169_NEW_PART(UserID, TRMNL);")
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry	
Program.Sub.CheckCustomTable.End

Program.Sub.DeleteDataFromCustomTable.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.bExists.Declare
	V.Local.sQuery.Declare
	
	F.ODBC.Connection!conx.TableExists("GAB_6169_NEW_PART",V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,=,True)
		F.Intrinsic.String.Build("DELETE FROM GAB_6169_NEW_PART WHERE UserID = '{0}' AND TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
		F.ODBC.Connection!conx.Execute(V.Local.sQuery)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry		
Program.Sub.DeleteDataFromCustomTable.End

Program.Sub.timerAutoCopyCacheFiles_Timer.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sXML.Declare
	V.Local.sQuery.Declare
	
'	f.Intrinsic.Control.If(v.DataTable.dtInventoryBrowser.Exists)
'		f.Data.Datatable.Close("dtInventoryBrowser")
'	f.Intrinsic.Control.EndIf
'	
'	f.Intrinsic.String.Build("{0}\{1}InventoryBrowserCacheData.xml",v.Caller.FilesDir,v.Caller.CompanyCode,v.Local.sXML)
'	f.Data.DataTable.CreateFromXML("dtInventoryBrowser",v.Local.sXML,True)
'	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry	
Program.Sub.timerAutoCopyCacheFiles_Timer.End

Program.Sub.lookupInventoryPart_SelectionMade.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.Form.lookupInventoryPart.Enabled(False)
	
	F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected part","Mass Replace Parts on Open WOs [ARC 6169]")
	
	f.Intrinsic.Control.CallSub(Bind,"sPartNo",v.DataTable.lookupInventoryPart_Result(0).Part!FieldValTrim,"sPartRev",v.DataTable.lookupInventoryPart_Result(0).PartRev!FieldValTrim,"sPartLoc",v.DataTable.lookupInventoryPart_Result(0).PartLoc!FieldValTrim)
	gui.Form.txtPartNo.Text(v.DataTable.lookupInventoryPart_Result(0).Part!FieldValTrim)
	gui.Form.txtPartRev.Text(v.DataTable.lookupInventoryPart_Result(0).PartRev!FieldValTrim)
	gui.Form.txtPartLoc.Text(v.DataTable.lookupInventoryPart_Result(0).PartLoc!FieldValTrim)	
	F.Intrinsic.Control.If(v.DataTable.lookupInventoryPart_Result(0).TEXT!FieldValTrim,<>,"")
		gui.Form.txtPartExtraDesc.Text(v.DataTable.lookupInventoryPart_Result(0).TEXT!FieldValTrim)
	F.Intrinsic.Control.Else
		gui.Form.txtPartExtraDesc.Text(v.DataTable.lookupInventoryPart_Result(0).Description!FieldValTrim)
	F.Intrinsic.Control.EndIf
	gui.Form.txtPartDesc.Text(v.DataTable.lookupInventoryPart_Result(0).Description!FieldValTrim)
	gui.Form.txtPartUM.Text(v.DataTable.lookupInventoryPart_Result(0).UM_INVENTORY!FieldValTrim)
	f.Intrinsic.Control.CallSub(InitializeNewPartNo)
	
	F.Intrinsic.UI.CloseWaitDialog
	
	gui.Form.lookupInventoryPart.Enabled(True)
	

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry		
Program.Sub.lookupInventoryPart_SelectionMade.End

Program.Sub.lookupInventoryNewPart_SelectionMade.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	gui.Form.lookupInventoryNewPart.Enabled(False)
	
'	F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected part","Mass Replace Parts on Open WOs [ARC 6169]")
	
	gui.Form.txtNewPartNo.Text(v.DataTable.lookupInventoryNewPart_Result(0).Part!FieldValTrim)
	gui.Form.txtNewPartRev.Text(v.DataTable.lookupInventoryNewPart_Result(0).PartRev!FieldValTrim)
	gui.Form.txtNewPartLoc.Text(v.DataTable.lookupInventoryNewPart_Result(0).PartLoc!FieldValTrim)	
	F.Intrinsic.Control.If(v.DataTable.lookupInventoryNewPart_Result(0).TEXT!FieldValTrim,<>,"")
		gui.Form.txtNewPartExtraDesc.Text(v.DataTable.lookupInventoryNewPart_Result(0).TEXT!FieldValTrim)
	F.Intrinsic.Control.Else
		gui.Form.txtNewPartExtraDesc.Text(v.DataTable.lookupInventoryNewPart_Result(0).Description!FieldValTrim)
	F.Intrinsic.Control.EndIf
	gui.Form.txtNewPartDesc.Text(v.DataTable.lookupInventoryNewPart_Result(0).Description!FieldValTrim)
	gui.Form.txtNewPartUM.Text(v.DataTable.lookupInventoryNewPart_Result(0).UM_INVENTORY!FieldValTrim)
	
'	F.Intrinsic.UI.CloseWaitDialog

	gui.Form.lookupInventoryNewPart.Enabled(True)
	
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry		
Program.Sub.lookupInventoryNewPart_SelectionMade.End

Program.Sub.acc_ElementClick.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	f.Intrinsic.Control.SelectCase(v.Args.Caption)
		f.Intrinsic.Control.Case("Add Material")
			Gui.Form..Caption("Mass Replace Parts on Open Work Orders (6169) - Add Material")
			Gui.Form.frameReplace.Visible(False)
			Gui.Form.frameAdd.Visible(True)	
		f.Intrinsic.Control.Case("Replace Material")
			Gui.Form..Caption("Mass Replace Parts on Open Work Orders (6169) - Replace Material")
			Gui.Form.frameReplace.Visible(True)
			Gui.Form.frameAdd.Visible(False)
	f.Intrinsic.Control.EndSelect
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry		
Program.Sub.acc_ElementClick.End

Program.Sub.lookupBOM_SelectionMade.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.iRet.Declare(Long)
	
	gui.Form.lookupBOM.Enabled(False)
	
	F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected BOM","Mass Replace Parts on Open WOs [ARC 6169]")
	
'	F.Intrinsic.Control.If(V.Global.bUseRevision)
'		gui.Form.txtBOM.Text(v.DataTable.lookupBOM_Result(0).Part!FieldValTrim)
'		gui.Form.txtRev.Text(v.DataTable.lookupBOM_Result(0).Rev!FieldValTrim)
'		gui.Form.lblBOMDescr.Caption(v.DataTable.lookupBOM_Result(0).Description!FieldValTrim)
'	F.Intrinsic.Control.Else
'		gui.Form.txtBOM.Text(v.DataTable.lookupBOM_Result(0).Part!FieldValTrim)
'		gui.Form.txtRev.Text("")
'		gui.Form.lblBOMDescr.Caption(v.DataTable.lookupBOM_Result(0).Description!FieldValTrim)
'	F.Intrinsic.Control.EndIf
	
	gui.Form.lblBOMDescr.Caption("")
	gui.Form.lblBOMDescr.ForeColor(V.Color.Black)
			
	gui.Form.txtBOM.Text(v.DataTable.lookupBOM_Result(0).Part!FieldValTrim)
	gui.Form.txtRev.Text(v.DataTable.lookupBOM_Result(0).Rev!FieldValTrim)
	gui.Form.lblBOMDescr.Caption(v.DataTable.lookupBOM_Result(0).ExtraDescription!FieldValTrim)
		
	f.Intrinsic.Control.CallSub(BindBOM,"sParent",v.DataTable.lookupBOM_Result(0).Part!FieldValTrim,"sParentRev",v.DataTable.lookupBOM_Result(0).Rev!FieldValTrim)
	
	f.Intrinsic.UI.CloseWaitDialog
	
	gui.Form.lookupBOM.Enabled(True)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry		
Program.Sub.lookupBOM_SelectionMade.End

'Program.Sub.lookupBOM_SelectionMade.Start
'F.Intrinsic.Control.Try
'	V.Local.sError.Declare
'	V.Local.iRet.Declare(Long)
'	
'	F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected BOM","Mass Replace Parts on Open WOs [ARC 6169]")
'	
'	gui.Form.txtBOM.Text(v.Object.lookupBOM_Result(0).ParentNumber!FieldValTrim)
'	gui.Form.txtRev.Text(v.Object.lookupBOM_Result(0).ParentNumberRevision!FieldValTrim)
'	
'	f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Load("oParts",1251,v.Object.lookupBOM_Result(0).ParentNumber!FieldValTrim,v.Object.lookupBOM_Result(0).ParentNumberRevision!FieldValTrim,V.Local.iRet)
'	f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Load("oExtraTextParts",3,v.Object.lookupBOM_Result(0).ParentNumber!FieldValTrim,v.Object.lookupBOM_Result(0).ParentNumberRevision!FieldValTrim,v.Object.lookupBOM_Result(0).ParentNumber!FieldValTrim,v.Object.lookupBOM_Result(0).ParentNumberRevision!FieldValTrim,V.Local.iRet)
'	f.Data.Linq.Join("LEFTJOIN","OBJECTONLY","oParts*!*P","OBJECTONLY","oExtraTextParts*!*E","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Manufacturing.Issue.UnitOfMeasure.UnitOfMeasureCode As UM_ISSUE*!*P.Information.UnitOfMeasure.UnitOfMeasureCode AS UM_INVENTORY","","","","oTempParts",False)
'	gui.Form.lblBOMDescr.Caption(v.Object.oTempParts(0).Description!FieldValTrim)
'	f.Intrinsic.Control.If(v.Object.oTempParts(0).Text!FieldValTrim,<>,"")
'		gui.Form.lblBOMDescr.Caption(v.Object.oTempParts(0).Text!FieldValTrim)
'	f.Intrinsic.Control.Else		
'		gui.Form.lblBOMDescr.Caption(v.Object.oTempParts(0).Description!FieldValTrim)
'	f.Intrinsic.Control.EndIf
'	
'	f.Global.Object.Dispose("oParts")
'	f.Global.Object.Dispose("oExtraTextParts")
'	
'	f.Intrinsic.Control.CallSub(BindBOM,"sParent",v.Object.lookupBOM_Result(0).ParentNumber!FieldValTrim,"sParentRev",v.Object.lookupBOM_Result(0).ParentNumberRevision!FieldValTrim)
'	
'	f.Intrinsic.UI.CloseWaitDialog
'	
'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry		
'Program.Sub.lookupBOM_SelectionMade.End

Program.Sub.cmdBrowseBOM_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sQuery.Declare
	V.Local.bFileExists.Declare
	
'	F.Intrinsic.Control.If(V.DataTable.dtBomBrowser.Exists,=,False)
'		F.Intrinsic.Control.If(V.Global.bUseRevision)
'			V.Local.sQuery.Set("select LEFT(BM.PARENT,17) As Part, RIGHT(BM.PARENT,3) As Rev, IF(RTRIM(LTRIM(ET.TEXT))='',IM.DESCRIPTION,ET.TEXT) AS Description from V_BOM_MSTR BM LEFT JOIN V_INVENTORY_MSTR IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.SEQUENCE_BOM = '0000' ORDER BY BM.PARENT")
'		F.Intrinsic.Control.Else
'			V.Local.sQuery.Set("select BM.PARENT As Part, '' As Rev, IF(RTRIM(LTRIM(ET.TEXT))='',IM.DESCRIPTION,ET.TEXT) AS Description from V_BOM_MSTR BM LEFT JOIN V_INVENTORY_MSTR IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.SEQUENCE_BOM = '0000' ORDER BY BM.PARENT")
'		F.Intrinsic.Control.EndIf
'		F.Data.DataTable.CreateFromSQL("dtBomBrowser","conx",V.Local.sQuery,True)
'		Gui.Form.lookupBOM.DataTableBasis("dtBomBrowser")
'	F.Intrinsic.Control.EndIf
'	
'	Gui.Form.lookupBOM.Show
	
	Gui.Form.cmdBrowseBOM.Enabled(False)
	
	F.Intrinsic.File.Exists(V.Global.sBomBrowserFilename,V.Local.bFileExists)
	F.Intrinsic.Control.If(V.Local.bFileExists)
		F.Intrinsic.Control.If(V.DataTable.dtBomBrowser.Exists)
			F.Data.DataTable.Close("dtBomBrowser")
		F.Intrinsic.Control.EndIf
'		F.Global.Object.ImportFromMessagePackFile(V.Global.sBomBrowserFilename,"dtBomBrowser",True)
		F.Data.DataTable.CreateFromXML("dtBomBrowser",V.Global.sBomBrowserFilename,True)
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.If(V.DataTable.dtBomBrowser.Exists,=,False)
			F.Intrinsic.Control.If(V.Global.bUseRevision)
				V.Local.sQuery.Set("select LEFT(BM.PARENT,17) As Part, RIGHT(BM.PARENT,3) As Rev, RTRIM(IM.DESCRIPTION) As Description, RTRIM(ET.TEXT) As ExtraDescription from V_BOM_MSTR BM LEFT JOIN (SELECT PART, DESCRIPTION FROM V_INVENTORY_MSTR GROUP BY PART, DESCRIPTION) IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.SEQUENCE_BOM = '0000' ORDER BY BM.PARENT")
'				V.Local.sQuery.Set("select LEFT(BM.PARENT,17) As Part, RIGHT(BM.PARENT,3) As Rev, IF(RTRIM(LTRIM(ET.TEXT))='',IM.DESCRIPTION,ET.TEXT) AS Description from V_BOM_MSTR BM LEFT JOIN V_INVENTORY_MSTR IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.SEQUENCE_BOM = '0000' ORDER BY BM.PARENT")
			F.Intrinsic.Control.Else
				V.Local.sQuery.Set("select BM.PARENT As Part, '' As Rev, RTRIM(IM.DESCRIPTION) As Description, RTRIM(ET.TEXT) As ExtraDescription from V_BOM_MSTR BM LEFT JOIN (SELECT PART, DESCRIPTION FROM V_INVENTORY_MSTR GROUP BY PART, DESCRIPTION) IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.SEQUENCE_BOM = '0000' ORDER BY BM.PARENT")
'				V.Local.sQuery.Set("select BM.PARENT As Part, '' As Rev, IF(RTRIM(LTRIM(ET.TEXT))='',IM.DESCRIPTION,ET.TEXT) AS Description from V_BOM_MSTR BM LEFT JOIN V_INVENTORY_MSTR IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.SEQUENCE_BOM = '0000' ORDER BY BM.PARENT")
			F.Intrinsic.Control.EndIf
			F.Data.DataTable.CreateFromSQL("dtBomBrowser","conx",V.Local.sQuery,True)		
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	Gui.Form.lookupBOM.DataTableBasis("dtBomBrowser")
	Gui.Form.lookupBOM.Show
	
	Gui.Form.cmdBrowseBOM.Enabled(True)
	
'	f.Intrinsic.Control.If(v.DataTable.dtBOMBrowser.Exists,=,False)
'		'Build Data Table for the entire session
'		f.Global.Object.Create("oBomEng","Manufacturing.Bom.EngineeringBoms","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'		f.Data.Linq.Join("LEFTJOIN","OBJECT","oBomEng*!*B",97,"","","OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = B.ParentNumber AND P.PartNumberRevision = B.ParentNumberRevision","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = B.ParentNumber AND E.PartNumberRevision = B.ParentNumberRevision","B.ParentNumber As Parent*!*B.ParentNumberRevision As ParentRev*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*B.Part.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*B.Information.IsComplete As BOM_COMPLETE*!*B.Information.IsInactive As INACTIVE","B.BomParentSequence = 0","","","dtBOMBrowser",True)
'		f.Global.Object.Dispose("oBomEng")
'		f.Global.Object.Dispose("oParts")
'		f.Global.Object.Dispose("oExtraTextParts")
'		
'		gui.Form.lookupBOM.DataTableBasis("dtBOMBrowser")
'	F.Intrinsic.Control.EndIf
	
'	f.Intrinsic.Control.If(v.DataTable.dtBOMBrowser.Exists,=,False)
'		'Build Data Table for the entire session
'		f.Global.Object.LoadLookup("oBomLookup","Manufacturing.Lookup.Boms")
'		
''		f.Global.Object.Create("oBomEng","Manufacturing.Bom.EngineeringBoms","oDatabase",V.Global.iCon,True)
''		f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
''		f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
''		f.Data.Linq.Join("LEFTJOIN","OBJECT","oBomEng*!*B",97,"","","OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = B.ParentNumber AND P.PartNumberRevision = B.ParentNumberRevision","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = B.ParentNumber AND E.PartNumberRevision = B.ParentNumberRevision","B.ParentNumber As Parent*!*B.ParentNumberRevision As ParentRev*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*B.Part.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*B.Information.IsComplete As BOM_COMPLETE*!*B.Information.IsInactive As INACTIVE","B.BomParentSequence = 0","","","dtBOMBrowser",True)
''		f.Global.Object.Dispose("oBomEng")
''		f.Global.Object.Dispose("oParts")
''		f.Global.Object.Dispose("oExtraTextParts")

'		gui.Form.lookupBOM.DataTableBasis("dtBOMBrowser")
'	F.Intrinsic.Control.EndIf
	
'	gui.Form.lookupBOM.Show
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrowseBOM_Click.End

'Program.Sub.cmdBrowseBOM_Click.Start
'f.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	v.Local.sQuery.Declare
'		
''	f.Intrinsic.Control.If(v.DataTable.dtBOMBrowser.Exists,=,False)
''		'Build Data Table for the entire session
''		f.Global.Object.Create("oBomEng","Manufacturing.Bom.EngineeringBoms","oDatabase",V.Global.iCon,True)
''		f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
''		f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
''		f.Data.Linq.Join("LEFTJOIN","OBJECT","oBomEng*!*B",97,"","","OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = B.ParentNumber AND P.PartNumberRevision = B.ParentNumberRevision","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = B.ParentNumber AND E.PartNumberRevision = B.ParentNumberRevision","B.ParentNumber As Parent*!*B.ParentNumberRevision As ParentRev*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*B.Part.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*B.Information.IsComplete As BOM_COMPLETE*!*B.Information.IsInactive As INACTIVE","B.BomParentSequence = 0","","","dtBOMBrowser",True)
''		f.Global.Object.Dispose("oBomEng")
''		f.Global.Object.Dispose("oParts")
''		f.Global.Object.Dispose("oExtraTextParts")
''		
''		gui.Form.lookupBOM.DataTableBasis("dtBOMBrowser")
''	F.Intrinsic.Control.EndIf
'	
''	f.Intrinsic.Control.If(v.DataTable.dtBOMBrowser.Exists,=,False)
''		'Build Data Table for the entire session
''		f.Global.Object.LoadLookup("oBomLookup","Manufacturing.Lookup.Boms")
''		
'''		f.Global.Object.Create("oBomEng","Manufacturing.Bom.EngineeringBoms","oDatabase",V.Global.iCon,True)
'''		f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'''		f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'''		f.Data.Linq.Join("LEFTJOIN","OBJECT","oBomEng*!*B",97,"","","OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = B.ParentNumber AND P.PartNumberRevision = B.ParentNumberRevision","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = B.ParentNumber AND E.PartNumberRevision = B.ParentNumberRevision","B.ParentNumber As Parent*!*B.ParentNumberRevision As ParentRev*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*B.Part.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*B.Information.IsComplete As BOM_COMPLETE*!*B.Information.IsInactive As INACTIVE","B.BomParentSequence = 0","","","dtBOMBrowser",True)
'''		f.Global.Object.Dispose("oBomEng")
'''		f.Global.Object.Dispose("oParts")
'''		f.Global.Object.Dispose("oExtraTextParts")

''		gui.Form.lookupBOM.DataTableBasis("dtBOMBrowser")
''	F.Intrinsic.Control.EndIf
'	
'	gui.Form.lookupBOM.Show
'	
'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.cmdBrowseBOM_Click.End

'Program.Sub.BindBOM.Start
'F.Intrinsic.Control.Try
'	V.Local.sError.Declare
'	V.Local.sColumns.Declare
'	V.Local.sDataType.Declare
'	V.Local.sFilter.Declare
'	
''	F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected BOM","Mass Replace Parts on Open WOs [ARC 6169]")
'	
'	V.Global.bLoadData.Set(True)
'	
'	'Create dtBOM
'	f.Intrinsic.Control.If(v.DataTable.dtBOM.Exists)
'		f.Data.DataTable.Close("dtBOM")
'	f.Intrinsic.Control.EndIf	
'	
'	f.Global.Object.Create("oJobHeaders","Manufacturing.WorkOrders","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'	f.Intrinsic.String.Build("H.Router.RouterNumber = '{0}' AND H.Router.RouterNumberRevision = '{1}' AND H.Scheduling.ClosedDate = '1900-01-01'",V.Args.sParent.Trim,V.Args.sParentRev.Trim,V.Local.sFilter)
'	f.Data.Linq.Join("LEFTJOIN","OBJECT","oJobHeaders*!*H",149,"","","~~~~~~","OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = H.Part.PartNumber AND P.PartNumberRevision = H.Part.PartNumberRevision AND P.LocationCode = H.Part.LocationCode","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = H.Part.PartNumber AND E.PartNumberRevision = H.Part.PartNumberRevision","H.WorkOrderNumber As Job*!*H.WorkOrderSuffix As Suffix*!*H.Part.PartNumber As ParentPart*!*H.Part.PartNumberRevision As ParentPartRev*!*H.Part.LocationCode As ParentPartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*H.Information.CustomerPurchaseOrderNumber As Customer_PO*!*H.SalesOrderLine.SalesOrderNumber As SalesOrder*!*H.SalesOrderLine.SalesOrderLineNumber As SalesOrderLine*!*H.Scheduling.Quantity.Run As OrderQty",V.Local.sFilter,"","","dtBOM",True)
'		
'	f.Global.Object.Dispose("oJobHeaders")
'	f.Global.Object.Dispose("oParts")
'	f.Global.Object.Dispose("oExtraTextParts")
'	
'	f.Data.DataTable.AddExpressionColumn("dtBOM","ParentPartDesc","String","IIF(Text='',Description,Text)")
'								
'	'Add Replace Flag to Data Table
'	F.Data.DataTable.AddColumn("dtBOM","FlagUpdate","Boolean")
'	F.Data.DataTable.SetValue("dtBOM",-1,"FlagUpdate",False)
'		
'	'Bind to grid		
'	gui.Form.gsBOM.AddGridviewFromDatatable("GVBOM","dtBOM")
'	f.Intrinsic.Control.CallSub(Format_Grid_BOM)
'	gui.Form.gsBOM.MainView("GVBOM")
'	
'	'Create dtAddMatl
'	f.Intrinsic.Control.If(v.DataTable.dtNewMaterial.Exists)
'		f.Data.DataTable.Close("dtNewMaterial")
'	f.Intrinsic.Control.EndIf
'	
'	V.Local.sColumns.Set("Part*!*PartDesc*!*OpCode*!*OpCodeDesc*!*UM*!*LeadTime*!*QtyToMake1*!*Rate*!*Add*!*Delete")
'	V.Local.sDataType.Set("String*!*String*!*String*!*String*!*String*!*Long*!*Float*!*Float*!*Long*!*Long")
'	F.Data.DataTable.CreateFromString("dtNewMaterial",V.Global.sNewRowGVNEWMATERIAL,V.Local.sColumns,V.Local.sDataType,"*!*","@!@",True)
'	
'	Gui.Form.gsNewMaterial.AddGridviewFromDatatable("GVNEWMATERIAL","dtNewMaterial")
'	f.Intrinsic.Control.CallSub(Format_Grid_NewMaterial)
'	gui.Form.gsNewMaterial.MainView("GVNEWMATERIAL")
'	
''	Gui.Form.gsNewMaterial.SetRowProperty("GVNEWMATERIAL",0,"locked",True)
'	
'	f.Intrinsic.Control.CallSub(Deserialize)
'		
''	f.Intrinsic.UI.CloseWaitDialog
'		
'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.BindBOM.End

Program.Sub.BindBOM.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sColumns.Declare
	V.Local.sDataType.Declare
	V.Local.sQuery.Declare
	V.Local.sParentPart.Declare
	
'	F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected BOM","Mass Replace Parts on Open WOs [ARC 6169]")
	
	V.Global.bLoadData.Set(True)
		
	'Create dtBOM
	f.Intrinsic.Control.If(v.DataTable.dtBOM.Exists)
		f.Data.DataTable.Close("dtBOM")
	f.Intrinsic.Control.EndIf	
	
	F.Intrinsic.String.GSSPartString(V.Args.sParent.Trim,V.Args.sParentRev.Trim,V.Local.sParentPart)
'	F.Intrinsic.Control.If(V.Global.bUseRevision)
'		F.Intrinsic.String.GSSPartString(V.Args.sParent.Trim,V.Args.sParentRev.Trim,V.Local.sParentPart)
'	F.Intrinsic.Control.Else
'		V.Local.sParentPart.Set(V.Args.sParent.Trim)
'	F.Intrinsic.Control.EndIf
	
'	F.Intrinsic.String.Build("select JH.JOB As Job, JH.SUFFIX As Suffix, JH.PART As ParentPart, JH.LOCATION As ParentPartLoc, IF(RTRIM(LTRIM(ET.TEXT))='',IM.DESCRIPTION,ET.TEXT) AS ParentPartDesc, IM.UM_INVENTORY AS UM_INVENTORY, JH.CUSTOMER_PO AS CUSTOMER_PO, JH.SALES_ORDER As SalesOrder, JH.SALES_ORDER_LINE AS SalesOrderLine, JH.QTY_ORDER As OrderQty from V_JOB_HEADER JH LEFT JOIN V_INVENTORY_MSTR IM ON JH.PART = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON ET.PART = IM.PART where JH.ROUTER = '{0}' AND JH.DATE_CLOSED = '1900-01-01'",V.Local.sParentPart,V.Local.sQuery)
	F.Intrinsic.Control.If(V.Global.bUseRevision)
		F.Intrinsic.String.Build("select JH.JOB As Job, JH.SUFFIX As Suffix, LEFT(JH.PART,17) As ParentPart, RIGHT(JH.PART,3) As ParentPartRev, JH.LOCATION As ParentPartLoc, RTRIM(IM.DESCRIPTION) AS ParentPartDesc, RTRIM(ET.TEXT) AS ParentPartExtraDesc, IM.UM_INVENTORY AS UM_INVENTORY, JH.CUSTOMER_PO AS CUSTOMER_PO, IF(JH.SALES_ORDER = '0000000', '', JH.SALES_ORDER) As SalesOrder, IF(JH.SALES_ORDER_LINE = '000', '', JH.SALES_ORDER_LINE) AS SalesOrderLine, JH.QTY_ORDER As OrderQty, JH.DATE_START, JH.DATE_DUE from V_JOB_HEADER JH LEFT JOIN (SELECT PART, DESCRIPTION, UM_INVENTORY FROM V_INVENTORY_MSTR GROUP BY PART, DESCRIPTION, UM_INVENTORY) IM ON JH.PART = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON ET.PART = IM.PART where JH.ROUTER = '{0}' AND JH.DATE_CLOSED = '1900-01-01'",V.Local.sParentPart.Trim,V.Local.sQuery)
'		F.Intrinsic.String.Build("select JH.JOB As Job, JH.SUFFIX As Suffix, LEFT(JH.PART,17) As ParentPart, RIGHT(JH.PART,3) As ParentPartRev, JH.LOCATION As ParentPartLoc, IF(RTRIM(LTRIM(ET.TEXT))='',IM.DESCRIPTION,ET.TEXT) AS ParentPartDesc, IM.UM_INVENTORY AS UM_INVENTORY, JH.CUSTOMER_PO AS CUSTOMER_PO, JH.SALES_ORDER As SalesOrder, JH.SALES_ORDER_LINE AS SalesOrderLine, JH.QTY_ORDER As OrderQty from V_JOB_HEADER JH LEFT JOIN V_INVENTORY_MSTR IM ON JH.PART = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON ET.PART = IM.PART where JH.ROUTER = '{0}' AND JH.DATE_CLOSED = '1900-01-01'",V.Local.sParentPart.Trim,V.Local.sQuery)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("select JH.JOB As Job, JH.SUFFIX As Suffix, JH.PART As ParentPart, '' As ParentPartRev, JH.LOCATION As ParentPartLoc, RTRIM(IM.DESCRIPTION) AS ParentPartDesc, RTRIM(ET.TEXT) AS ParentPartExtraDesc, IM.UM_INVENTORY AS UM_INVENTORY, JH.CUSTOMER_PO AS CUSTOMER_PO, IF(JH.SALES_ORDER = '0000000', '', JH.SALES_ORDER) As SalesOrder, IF(JH.SALES_ORDER_LINE = '000', '', JH.SALES_ORDER_LINE) AS SalesOrderLine, JH.QTY_ORDER As OrderQty, JH.DATE_START, JH.DATE_DUE from V_JOB_HEADER JH LEFT JOIN (SELECT PART, DESCRIPTION, UM_INVENTORY FROM V_INVENTORY_MSTR GROUP BY PART, DESCRIPTION, UM_INVENTORY) IM ON JH.PART = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON ET.PART = IM.PART where JH.ROUTER = '{0}' AND JH.DATE_CLOSED = '1900-01-01'",V.Local.sParentPart.Trim,V.Local.sQuery)
'		F.Intrinsic.String.Build("select JH.JOB As Job, JH.SUFFIX As Suffix, JH.PART As ParentPart, '' As ParentPartRev, JH.LOCATION As ParentPartLoc, IF(RTRIM(LTRIM(ET.TEXT))='',IM.DESCRIPTION,ET.TEXT) AS ParentPartDesc, IM.UM_INVENTORY AS UM_INVENTORY, JH.CUSTOMER_PO AS CUSTOMER_PO, JH.SALES_ORDER As SalesOrder, JH.SALES_ORDER_LINE AS SalesOrderLine, JH.QTY_ORDER As OrderQty from V_JOB_HEADER JH LEFT JOIN V_INVENTORY_MSTR IM ON JH.PART = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON ET.PART = IM.PART where JH.ROUTER = '{0}' AND JH.DATE_CLOSED = '1900-01-01'",V.Local.sParentPart.Trim,V.Local.sQuery)
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("dtBOM","conx",V.Local.sQuery,True)
	
	
'	f.Global.Object.Create("oJobHeaders","Manufacturing.WorkOrders","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'	f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'	f.Intrinsic.String.Build("H.Router.RouterNumber = '{0}' AND H.Router.RouterNumberRevision = '{1}' AND H.Scheduling.ClosedDate = '1900-01-01'",V.Args.sParent.Trim,V.Args.sParentRev.Trim,V.Local.sFilter)
'	f.Data.Linq.Join("LEFTJOIN","OBJECT","oJobHeaders*!*H",149,"","","~~~~~~","OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = H.Part.PartNumber AND P.PartNumberRevision = H.Part.PartNumberRevision AND P.LocationCode = H.Part.LocationCode","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = H.Part.PartNumber AND E.PartNumberRevision = H.Part.PartNumberRevision","H.WorkOrderNumber As Job*!*H.WorkOrderSuffix As Suffix*!*H.Part.PartNumber As ParentPart*!*H.Part.PartNumberRevision As ParentPartRev*!*H.Part.LocationCode As ParentPartLoc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*H.Information.CustomerPurchaseOrderNumber As Customer_PO*!*H.SalesOrderLine.SalesOrderNumber As SalesOrder*!*H.SalesOrderLine.SalesOrderLineNumber As SalesOrderLine*!*H.Scheduling.Quantity.Run As OrderQty",V.Local.sFilter,"","","dtBOM",True)
'		
'	f.Global.Object.Dispose("oJobHeaders")
'	f.Global.Object.Dispose("oParts")
'	f.Global.Object.Dispose("oExtraTextParts")
'	
'	f.Data.DataTable.AddExpressionColumn("dtBOM","ParentPartDesc","String","IIF(Text='',Description,Text)")
		
	'Add Replace Flag to Data Table
	F.Data.DataTable.AddColumn("dtBOM","FlagUpdate","Boolean")
	F.Data.DataTable.SetValue("dtBOM",-1,"FlagUpdate",False)
		
	'Bind to grid		
	gui.Form.gsBOM.AddGridviewFromDatatable("GVBOM","dtBOM")
	f.Intrinsic.Control.CallSub(Format_Grid_BOM)
	gui.Form.gsBOM.MainView("GVBOM")
	
	'Create dtAddMatl
	f.Intrinsic.Control.If(v.DataTable.dtNewMaterial.Exists)
		f.Data.DataTable.Close("dtNewMaterial")
	f.Intrinsic.Control.EndIf
	
	V.Local.sColumns.Set("Part*!*PartRev*!*PartLoc*!*PartLU*!*PartDesc*!*OpCode*!*OpCodeLU*!*OpCodeDesc*!*UM*!*LeadTime*!*QtyToMake1*!*Rate*!*Add*!*Delete")
	V.Local.sDataType.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*Long*!*Float*!*Float*!*Long*!*Long")
	F.Data.DataTable.CreateFromString("dtNewMaterial",V.Global.sNewRowGVNEWMATERIAL,V.Local.sColumns,V.Local.sDataType,"*!*","@!@",True)
		
	Gui.Form.gsNewMaterial.AddGridviewFromDatatable("GVNEWMATERIAL","dtNewMaterial")
	f.Intrinsic.Control.CallSub(Format_Grid_NewMaterial)
	gui.Form.gsNewMaterial.MainView("GVNEWMATERIAL")
	
'	Gui.Form.gsNewMaterial.SetRowProperty("GVNEWMATERIAL",0,"locked",True)
	
	f.Intrinsic.Control.CallSub(Deserialize)
		
'	f.Intrinsic.UI.CloseWaitDialog
		
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.BindBOM.End

Program.Sub.Format_Grid_BOM.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.iCnt.Declare
	
	Gui.Form.gsBOM.SuspendLayout()
	'General format for the grid
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","AllowSort",True)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","AllowFilter",True)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","OptionsFindAlwaysVisible",True)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","EnableAppearanceOddRow",False)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","OptionsViewShowAutoFilterRow",True)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","OptionsViewRowAutoHeight",True)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","ColumnPanelRowHeight",50)
	
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","MultiSelect",False)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","OptionBehaviorEditable",True)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","OptionsDetailShowDetailTabs",True)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","OptionsViewShowGroupPanel",True)
	
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","AllowColumnResizing",True)
	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","OptionsViewColumnAutoWidth",False)

	Gui.Form.gsBOM.SetGridViewProperty("GVBOM","MultiSelectMode",0)
	
	'Added: JobSuffixSeq,CustomerName
	'Invisible
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Description,Text","sProperty","Invisible")
	'Width	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","DATE_DUE,DATE_START","sProperty","Width","sWidth","70")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job,Suffix,UM_INVENTORY","sProperty","Width","sWidth","50")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","ParentPartRev,ParentPartLoc","sProperty","Width","sWidth","40")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","ParentPart,Customer_PO","sProperty","Width","sWidth","130")
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","ParentPartDesc,Description,Text","sProperty","Width","sWidth","200")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","ParentPartDesc,ParentPartExtraDesc","sProperty","Width","sWidth","200")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","OrderQty","sProperty","Width","sWidth","100")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","SalesOrder,SalesOrderLine","sProperty","Width","sWidth","60")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","FlagUpdate","sProperty","Width","sWidth","80")
	
	'Caption
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job@!@Job,Suffix@!@Suffix,ParentPart@!@Header Part,ParentPartRev@!@Header Part Rev,ParentPartLoc@!@Header Part Loc,ParentPartDesc@!@Header Part Extra Desc,Description@!@Part Desc,Text@!@Part Extra Desc,UM_INVENTORY@!@UM,Customer_PO@!@Customer PO,SalesOrder@!@SO,SalesOrderLine@!@SO Line,OrderQty@!@Qty Order,FlagUpdate@!@Update","sProperty","Caption")		
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job@!@Job,Suffix@!@Suffix,ParentPart@!@Header Part,ParentPartRev@!@Header Part Rev,ParentPartLoc@!@Header Part Loc,ParentPartDesc@!@Header Part Desc,ParentPartExtraDesc@!@Header Part Extra Desc,UM_INVENTORY@!@UM,Customer_PO@!@Customer PO,SalesOrder@!@SO,SalesOrderLine@!@SO Line,OrderQty@!@Qty Order,DATE_START@!@Start Date,DATE_DUE@!@Due Date,FlagUpdate@!@Update","sProperty","Caption")		
	'Header Font bold
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job,Suffix,ParentPart,ParentPartRev,ParentPartLoc,ParentPartDesc,Description,Text,UM_INVENTORY,Customer_PO,SalesOrder,SalesOrderLine,OrderQty,FlagUpdate","sProperty","HeaderFontBold")	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job,Suffix,ParentPart,ParentPartRev,ParentPartLoc,ParentPartDesc,ParentPartExtraDesc,UM_INVENTORY,Customer_PO,SalesOrder,SalesOrderLine,OrderQty,DATE_DUE,DATE_START,FlagUpdate","sProperty","HeaderFontBold")	
	'Header Word Wrap
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job,Suffix,ParentPart,ParentPartRev,ParentPartLoc,ParentPartDesc,ParentPartExtraDesc,UM_INVENTORY,Customer_PO,SalesOrder,SalesOrderLine,OrderQty,DATE_DUE,DATE_START,FlagUpdate","sProperty","HeaderWordWrap")	
	'For_CellValue_Changed
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","FlagUpdate","sProperty","For_CellValue_Changed")
	'HeaderHAlignment_Far	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","OrderQty","sProperty","HeaderAllign_Far")
	'Format Display Numeric
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","OrderQty","sProperty","Decimal_1")	
	'Fixed columns left
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job,Suffix,ParentPart,ParentPartRev,ParentPartLoc,ParentPartDesc,Description,Text,UM_INVENTORY","sProperty","FixedColumn_Left")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job,Suffix,ParentPart,ParentPartRev,ParentPartLoc,UM_INVENTORY","sProperty","FixedColumn_Left")
	'Fixed columns right
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","FlagUpdate","sProperty","FixedColumn_Right")
	'DateTime Format
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","DATE_DUE,DATE_START","sProperty","DisplayCustomDateTime","sDateTimeFormat","d")
	'Columns clickable
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job,Suffix,ParentPart,ParentPartRev,ParentPartLoc","sProperty","Clickable")
	'For_Row_CellClick
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsBOM","GV","GVBOM","sInputColumns","Job,Suffix,ParentPart,ParentPartRev,ParentPartLoc","sProperty","For_RowCell_Click")

	
	gui.Form.gsBOM.ResumeLayout()

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)	
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.Format_Grid_BOM.End

Program.Sub.Format_Grid_NewMaterial.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.iCnt.Declare
	
	Gui.Form.gsNewMaterial.SuspendLayout()
	
	'General format for the grid
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","AllowSort",True)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","AllowFilter",True)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","OptionsFindAlwaysVisible",True)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","EnableAppearanceOddRow",False)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","OptionsViewShowAutoFilterRow",True)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","OptionsViewRowAutoHeight",True)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","ColumnPanelRowHeight",50)
	
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","MultiSelect",False)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","OptionBehaviorEditable",True)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","OptionsDetailShowDetailTabs",True)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","OptionsViewShowGroupPanel",True)
	
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","AllowColumnResizing",True)
	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","OptionsViewColumnAutoWidth",False)

	Gui.Form.gsNewMaterial.SetGridViewProperty("GVNEWMATERIAL","MultiSelectMode",0)

	'Added: JobSuffixSeq,CustomerName
	'Width	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Part","sProperty","Width","sWidth","150")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","PartRev,PartLoc","sProperty","Width","sWidth","40")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","LeadTime,UM","sProperty","Width","sWidth","50")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","OpCode","sProperty","Width","sWidth","80")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","OpCodeDesc","sProperty","Width","sWidth","150")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","PartDesc","sProperty","Width","sWidth","250")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","QtyToMake1","sProperty","Width","sWidth","100")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Add,Delete","sProperty","Width","sWidth","50")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","PartLU,OpCodeLU","sProperty","Width","sWidth","30")
	
	
	
'	V.Local.sColumns.Set("Part*!*PartDesc*!*OpCode*!*OpCodeDesc*!*UM*!*LeadTime*!*QtyToMake1*!*Rate")
	
	
	'Caption
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Part@!@Part,PartRev@!@Part Rev,PartLoc@!@Part Loc,PartLU@!@Part Search,PartDesc@!@Part Desc,OpCode@!@Op Code,OpCodeLU@!@OpCode Search,OpCodeDesc@!@Op Code Desc,UM@!@UM,LeadTime@!@Lead Time (Days),QtyToMake1@!@Qty To Make 1,Rate@!@Rate","sProperty","Caption")		
	'Header Font bold
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Part,PartRev,PartLoc,PartLU,PartDesc,OpCode,OpCodeLU,OpCodeDesc,UM,LeadTime,QtyToMake1,Rate","sProperty","HeaderFontBold")	
	'Header Word Wrap
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Part,PartRev,PartLoc,PartLU,PartDesc,OpCode,OpCodeLU,OpCodeDesc,UM,LeadTime,QtyToMake1,Rate","sProperty","HeaderWordWrap")	
	'HeaderHAlignment_Far	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","QtyToMake1","sProperty","HeaderAllign_Far")
	'Format Display Numeric
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","QtyToMake1","sProperty","Decimal_1")	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Rate","sProperty","Decimal_2")	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","LeadTime","sProperty","Integer")	
	'Fixed columns left
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Part,PartRev,PartLoc,PartLU,PartDesc","sProperty","FixedColumn_Left")
	'Fixed columns right
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Add,Delete","sProperty","FixedColumn_Right")
'	'Columns clickable
'	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Job,Suffix,ParentPart","sProperty","Clickable")
	'For_CellValue_Changed
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Part,PartRev,PartLoc,OpCode,QtyToMake1,LeadTime","sProperty","For_CellValue_Changed")
	'Editor Button
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","Add@!@Add,Delete@!@Delete","sProperty","EditorButton")
	'Cell Clickable
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","PartLU,OpCodeLU","sProperty","For_RowCell_Click")
	'Icon Browse
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","PartLU,OpCodeLU","sProperty","IconBrowse")
	
	gui.Form.gsNewMaterial.ResumeLayout()

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)	
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.Format_Grid_NewMaterial.End

Program.Sub.gsNewMaterial_RowCellClick.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.bFileExists.Declare
	V.Local.sQuery.Declare
	
	F.Intrinsic.Control.BlockEvents
	
	F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
		F.Intrinsic.Control.CaseAny("DELETE")
			F.Intrinsic.Control.If(V.DataTable.dtNewMaterial.RowCount,>,1)
				F.Data.DataTable.DeleteRow("dtNewMaterial",V.Args.RowIndex)
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.CaseAny("ADD")
			Gui.Form.gsNewMaterial.AddRow("GVNEWMATERIAL",V.Global.sNewRowGVNEWMATERIAL)
			f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsNewMaterial","GV","GVNEWMATERIAL","sInputColumns","PartLU,OpCodeLU","sProperty","IconBrowse")
			
		F.Intrinsic.Control.CaseAny("PARTLU")	
			F.Intrinsic.File.Exists(V.Global.sInventoryBrowserFilename,V.Local.bFileExists)
			F.Intrinsic.Control.If(V.Local.bFileExists)
				F.Intrinsic.Control.If(V.DataTable.dtInventoryBrowser.Exists)
					F.Data.DataTable.Close("dtInventoryBrowser")
				F.Intrinsic.Control.EndIf
'				F.Global.Object.ImportFromMessagePackFile(V.Global.sInventoryBrowserFilename,"dtInventoryBrowser",True)
				F.Data.DataTable.CreateFromXML("dtInventoryBrowser",V.Global.sInventoryBrowserFilename,True)
			F.Intrinsic.Control.Else
				f.Intrinsic.Control.If(v.DataTable.dtInventoryBrowser.Exists,=,False)
					f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
					f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
					f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Information.ProductLine.ProductLineCode As ProdLine*!*P.Description.Primary As Description*!*P.Description.Alternate1 As Description1*!*P.Description.Alternate2 As Description2*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty*!*P.Scheduling.LeadTime As LeadTime*!*P.Cost.MonetaryValue.Company.Unit As Cost*!*P.Cost.Alternate.MonetaryValue.Company.Unit As AltCost","","","","dtInventoryBrowser",True)
	'				f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1341,"","","","~~~~~~~~~~~~~~~~~","~~~","~~","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Information.ProductLine.ProductLineCode As ProdLine*!*P.Description.Primary As Description*!*P.Description.Alternate1 As Description1*!*P.Description.Alternate2 As Description2*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty*!*P.Scheduling.LeadTime As LeadTime","","","","dtInventoryBrowser",True)
	'				f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
					f.Global.Object.Dispose("oParts")
					f.Global.Object.Dispose("oExtraTextParts")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			V.Global.iSelectedRow.Set(V.Args.RowIndex)
			Gui.Form.lookupNewMatlInventoryBrowser.DataTableBasis("dtInventoryBrowser")
			Gui.Form.lookupNewMatlInventoryBrowser.Show
			
		F.Intrinsic.Control.CaseAny("OPCODELU")			
			F.Intrinsic.File.Exists(V.Global.sOpCodeBrowserFilename,V.Local.bFileExists)
			F.Intrinsic.Control.If(V.Local.bFileExists)
				F.Intrinsic.Control.If(V.DataTable.dtOpCodeBrowser.Exists)
					F.Data.DataTable.Close("dtOpCodeBrowser")
				F.Intrinsic.Control.EndIf
'				F.Global.Object.ImportFromMessagePackFile(V.Global.sOpCodeBrowserFilename,"dtOpCodeBrowser",True)
				F.Data.DataTable.CreateFromXML("dtOpCodeBrowser",V.Global.sOpCodeBrowserFilename,True)
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.DataTable.dtOpCodeBrowser.Exists,=,False)
					V.Local.sQuery.Set("select MACHINE AS OperationIdentifier, OPERATION As OpCode, DESCRIPTION As OpCodeDesc from OP_CODES where LMO = 'M'")
					F.Data.DataTable.CreateFromSQL("dtOpCodeBrowser","conx",V.Local.sQuery,True)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			V.Global.iSelectedRow.Set(V.Args.RowIndex)
			Gui.Form.lookupNewMatlOpCodeBrowser.DataTableBasis("dtOpCodeBrowser")
			Gui.Form.lookupNewMatlOpCodeBrowser.Show
			
	F.Intrinsic.Control.EndSelect
	
	F.Intrinsic.Control.UnBlockEvents
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.gsNewMaterial_RowCellClick.End

Program.Sub.txtRev_LostFocus.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.sQuery.Declare
	V.Local.sParent.Declare
	V.Local.sParentRev.Declare
	V.Local.sParentPartNo.Declare
	V.Local.sRet.Declare
	V.Local.iRet.Declare(Long)
	
	'Validate the BOM
	F.Intrinsic.Control.If(V.Screen.Form!txtBOM.Text.Trim,<>,"")
		F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected BOM","Mass Replace Parts on Open WOs [ARC 6169]")
		
		F.Intrinsic.String.GSSPartString(V.Screen.Form!txtBOM.Text.Trim,V.Screen.Form!txtRev.Text.Trim,V.Local.sParentPartNo)
		V.Local.sParent.Set(V.Screen.Form!txtBOM.Text.Trim)
		V.Local.sParentRev.Set(V.Screen.Form!txtRev.Text.Trim)
		F.Intrinsic.Control.If(V.Global.bUseRevision)
'			F.Intrinsic.String.GSSPartString(V.Screen.Form!txtBOM.Text.Trim,V.Screen.Form!txtRev.Text.Trim,V.Local.sParent)
'			V.Local.sParentRev.Set("") 
			F.Intrinsic.String.Build("select LEFT(BM.PARENT,17) As Parent, RIGHT(BM.PARENT,3) As Rev, RTRIM(IM.DESCRIPTION) As Description, RTRIM(ET.TEXT) As ExtraDescription from V_BOM_MSTR BM LEFT JOIN (SELECT PART, DESCRIPTION FROM V_INVENTORY_MSTR GROUP BY PART, DESCRIPTION) IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.PARENT = '{0}' AND BM.SEQUENCE_BOM = '0000'",V.Local.sParentPartNo.Trim,V.Local.sQuery)
'			F.Intrinsic.String.Build("select LEFT(BM.PARENT,17) As Parent, RIGHT(BM.PARENT,3) As Rev, IF(RTRIM(LTRIM(ET.TEXT))='',IM.DESCRIPTION,ET.TEXT) AS Description from V_BOM_MSTR BM LEFT JOIN V_INVENTORY_MSTR IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.PARENT = '{0}' AND BM.SEQUENCE_BOM = '0000'",V.Local.sParentPartNo.Trim,V.Local.sQuery)
		F.Intrinsic.Control.Else
'			V.Local.sParent.Set(V.Screen.Form!txtBOM.Text.Trim)
'			V.Local.sParentRev.Set(V.Screen.Form!txtRev.Text.Trim)
			F.Intrinsic.String.Build("select BM.PARENT As Parent, '' As Rev, RTRIM(IM.DESCRIPTION) As Description, RTRIM(ET.TEXT) As ExtraDescription from V_BOM_MSTR BM LEFT JOIN (SELECT PART, DESCRIPTION FROM V_INVENTORY_MSTR GROUP BY PART, DESCRIPTION) IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.PARENT = '{0}' AND BM.SEQUENCE_BOM = '0000'",V.Local.sParentPartNo.Trim,V.Local.sQuery)
'			F.Intrinsic.String.Build("select BM.PARENT As Parent, '' As Rev, IF(RTRIM(LTRIM(ET.TEXT))='',IM.DESCRIPTION,ET.TEXT) AS Description from V_BOM_MSTR BM LEFT JOIN V_INVENTORY_MSTR IM ON BM.PARENT = IM.PART LEFT JOIN V_INV_EXTRA_TEXT ET ON IM.PART = ET.PART where BM.PARENT = '{0}' AND BM.SEQUENCE_BOM = '0000'",V.Local.sParentPartNo.Trim,V.Local.sQuery)
		F.Intrinsic.Control.EndIf
		
		F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sQuery,V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,=,"")
			f.Intrinsic.UI.CloseWaitDialog
			gui.Form.lblBOMDescr.Caption("** Invalid BOM **")
			gui.Form.lblBOMDescr.ForeColor(V.Color.LtRed)
			F.Intrinsic.UI.Msgbox("BOM is invalid")
			F.Intrinsic.Control.If(v.DataTable.dtBOM.Exists)
				gui.Form.gsBOM.ClearRows("GvBOM")
				f.Data.DataTable.Close("dtBOM")
			F.Intrinsic.Control.EndIf
			Gui.Form.txtBOM.SetFocus
		F.Intrinsic.Control.Else
			gui.Form.lblBOMDescr.Caption("")
			gui.Form.lblBOMDescr.ForeColor(V.Color.Black)
			F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
			gui.Form.lblBOMDescr.Caption(v.Local.sRet(3).Trim)
			f.Intrinsic.Control.CallSub(BindBOM,"sParent",V.Local.sRet(0).Trim,"sParentRev",V.Local.sRet(1).Trim)
'			f.Intrinsic.Control.CallSub(BindBOM,"sParent",V.Local.sParent,"sParentRev",V.Local.sParentRev)
			f.Intrinsic.UI.CloseWaitDialog
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.txtRev_LostFocus.End

'Program.Sub.txtRev_LostFocus.Start
'f.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	V.Local.sParent.Declare
'	V.Local.sParentRev.Declare
'	V.Local.iRet.Declare(Long)
'	
'	'Validate the BOM
'	F.Intrinsic.Control.If(V.Screen.Form!txtBOM.Text.Trim,<>,"")
'		V.Local.sParent.Set(V.Screen.Form!txtBOM.Text.Trim)
'		V.Local.sParentRev.Set(V.Screen.Form!txtRev.Text.Trim)
'		
'		F.Intrinsic.UI.InvokeWaitDialog("Loading work orders with the selected BOM","Mass Replace Parts on Open WOs [ARC 6169]")
'		
'		f.Global.Object.Create("oBomEng","Manufacturing.Bom.EngineeringBoms","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Load("oBomEng",613,V.Local.sParent,V.Local.sParentRev,V.Local.iRet)
'		f.Intrinsic.Control.If(V.Object.oBomEng!IsNothing,=,True)
'			F.Intrinsic.UI.CloseWaitDialog
'			gui.Form.lblBOMDescr.Caption("")
'			gui.Form.lblBOMDescr.ForeColor(V.Color.LtBlack)
'			F.Intrinsic.UI.Msgbox("Error retrieving BOM Object")
'			f.Intrinsic.Control.If(v.DataTable.dtBOM.Exists)
'				gui.Form.gsBOM.ClearRows("GvBOM")
'				f.Data.DataTable.Close("dtBOM")
'			f.Intrinsic.Control.EndIf
'		f.Intrinsic.Control.ElseIf(V.Object.oBomEng!GetCount,=,0)
'			F.Intrinsic.UI.CloseWaitDialog
'			gui.Form.lblBOMDescr.Caption("** Invalid BOM **")
'			gui.Form.lblBOMDescr.ForeColor(V.Color.LtRed)
'			F.Intrinsic.UI.Msgbox("BOM is invalid")
'			f.Intrinsic.Control.If(v.DataTable.dtBOM.Exists)
'				gui.Form.gsBOM.ClearRows("GvBOM")
'				f.Data.DataTable.Close("dtBOM")
'			f.Intrinsic.Control.EndIf
'			f.Global.Object.Dispose("oBomEng")
'		f.Intrinsic.Control.Else
'			gui.Form.lblBOMDescr.Caption("")
'			gui.Form.lblBOMDescr.ForeColor(V.Color.LtBlack)
'			f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'			f.Global.Object.Load("oParts",1251,V.Local.sParent,V.Local.sParentRev,V.Local.iRet)
'			f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'			f.Global.Object.Load("oExtraTextParts",3,V.Local.sParent,V.Local.sParentRev,V.Local.sParent,V.Local.sParentRev,V.Local.iRet)
'			f.Data.Linq.Join("LEFTJOIN","OBJECTONLY","oParts*!*P","OBJECTONLY","oExtraTextParts*!*E","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Manufacturing.Issue.UnitOfMeasure.UnitOfMeasureCode As UM_ISSUE*!*P.Information.UnitOfMeasure.UnitOfMeasureCode AS UM_INVENTORY","","","","oTempParts",False)
'			gui.Form.lblBOMDescr.Caption(v.Object.oTempParts(0).Description!FieldValTrim)
'			f.Intrinsic.Control.If(v.Object.oTempParts(0).Text!FieldValTrim,<>,"")
'				gui.Form.lblBOMDescr.Caption(v.Object.oTempParts(0).Text!FieldValTrim)
'			f.Intrinsic.Control.Else		
'				gui.Form.lblBOMDescr.Caption(v.Object.oTempParts(0).Description!FieldValTrim)
'			f.Intrinsic.Control.EndIf
'			
'			f.Global.Object.Dispose("oBomEng")
'			f.Global.Object.Dispose("oParts")
'			f.Global.Object.Dispose("oExtraTextParts")
'			
'			f.Intrinsic.Control.CallSub(BindBOM,"sParent",V.Local.sParent,"sParentRev",V.Local.sParentRev)
'			
'			F.Intrinsic.UI.CloseWaitDialog
'		f.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.txtRev_LostFocus.End

'Program.Sub.txtRev_LostFocus.Start
'f.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	V.Local.sParent.Declare
'	V.Local.sParentRev.Declare
'	
'	'Validate the BOM
'	F.Intrinsic.Control.If(V.Screen.Form!txtBOM.Text.Trim,<>,"")
'		V.Local.sParent.Set(V.Screen.Form!txtBOM.Text.Trim)
'		V.Local.sParentRev.Set(V.Screen.Form!txtRev.Text.Trim)
'		
'		f.Global.Object.Create("oBomMasters","Manufacturing.Bom.Boms","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'		f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'		f.Data.Linq.Join("LEFTJOIN","OBJECT","oBomMasters*!*B",97,V.Local.sBOM,V.Local.sRev,"OBJECT","oParts*!*P",1286,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = B.ParentNumber AND P.PartNumberRevision = B.ParentNumberRevision","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","E.PartNumber = B.ParentNumber AND E.PartNumberRevision = B.ParentNumberRevision","B.ParentNumber As Parent*!*B.ParentNumberRevision As ParentRev*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*B.Part.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*B.Information.IsComplete As BOM_COMPLETE*!*B.Information.IsInactive As INACTIVE","B.BomParentSequence = 0","","","dtResult",True)
'		f.Global.Object.Dispose("oBomMasters")
'		f.Global.Object.Dispose("oParts")
'		f.Global.Object.Dispose("oExtraTextParts")
'		f.Intrinsic.Control.If(V.DataTable.dtResult.Exists,=,True,"AND",V.DataTable.dtResult.RowCount,>,0)
'			F.Intrinsic.Control.If(V.DataTable.dtResult(0).Text!FieldValTrim,<>,"")
'				gui.Form.lblBOMDescr.Caption(V.DataTable.dtResult(0).Text!FieldValTrim)
'			F.Intrinsic.Control.Else
'				gui.Form.lblBOMDescr.Caption(V.DataTable.dtResult(0).Description!FieldValTrim)
'			F.Intrinsic.Control.EndIf
'			gui.Form.lblBOMDescr.ForeColor(V.Color.Black)
'			f.Intrinsic.Control.CallSub(BindBOM,"sParent",V.DataTable.dtResult(0).Parent!FieldValTrim,"sParentRev",V.DataTable.dtResult(0).ParentRev!FieldValTrim)
'			f.Data.DataTable.Close("dtResult")
'		F.Intrinsic.Control.Else
'			F.Intrinsic.UI.Msgbox("BOM is invalid")
'			gui.Form.lblBOMDescr.Caption("** Invalid BOM **")
'			gui.Form.lblBOMDescr.ForeColor(V.Color.LtRed)
'			f.Intrinsic.Control.If(v.DataTable.dtBOM.Exists)
'				gui.Form.gsBOM.ClearRows("GvBOM")
'				f.Data.DataTable.Close("dtBOM")
'			f.Intrinsic.Control.EndIf
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry
'Program.Sub.txtRev_LostFocus.End

Program.Sub.lookupNewMatlInventoryBrowser_SelectionMade.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
'	v.Local.sPart.Declare
	v.Local.sPartDesc.Declare
	v.Local.fRate.Declare
	
	Gui.Form.lookupNewMatlInventoryBrowser.Enabled(False)
	
'	F.Intrinsic.Control.If(V.Global.bUseRevision)
'		F.Intrinsic.String.GSSPartString(V.DataTable.lookupNewMatlInventoryBrowser_Result(0).Part!FieldValTrim,V.DataTable.lookupNewMatlInventoryBrowser_Result(0).Rev!FieldValTrim,V.Local.sPart)
'	F.Intrinsic.Control.Else
'		V.Local.sPart.Set(V.DataTable.lookupNewMatlInventoryBrowser_Result(0).Part!FieldValTrim)
'	F.Intrinsic.Control.EndIf
	
'	F.Intrinsic.Control.If(V.DataTable.lookupNewMatlInventoryBrowser_Result(0).Text!FieldValTrim,<>,"")
'		V.Local.sPartDesc.Set(V.DataTable.lookupNewMatlInventoryBrowser_Result(0).Text!FieldValTrim)
'	F.Intrinsic.Control.Else
'		V.Local.sPartDesc.Set(V.DataTable.lookupNewMatlInventoryBrowser_Result(0).Description!FieldValTrim)
'	F.Intrinsic.Control.EndIf
	V.Local.sPartDesc.Set(V.DataTable.lookupNewMatlInventoryBrowser_Result(0).Description!FieldValTrim)
	
	F.Intrinsic.Control.If(V.DataTable.lookupNewMatlInventoryBrowser_Result(0).AltCost!FieldVal,<>,0)
		V.Local.fRate.Set(V.DataTable.lookupNewMatlInventoryBrowser_Result(0).AltCost!FieldVal)
	F.Intrinsic.Control.Else
		V.Local.fRate.Set(V.DataTable.lookupNewMatlInventoryBrowser_Result(0).Cost!FieldVal)
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.SetValue("dtNewMaterial",V.Global.iSelectedRow,"Part",V.DataTable.lookupNewMatlInventoryBrowser_Result(0).Part!FieldValTrim,"PartRev",V.DataTable.lookupNewMatlInventoryBrowser_Result(0).PartRev!FieldValTrim,"PartLoc",V.DataTable.lookupNewMatlInventoryBrowser_Result(0).PartLoc!FieldValTrim,"PartDesc",V.Local.sPartDesc,"UM",V.DataTable.lookupNewMatlInventoryBrowser_Result(0).UM_INVENTORY!FieldValTrim,"LeadTime",V.DataTable.lookupNewMatlInventoryBrowser_Result(0).LeadTime!FieldVal,"Rate",V.Local.fRate)
	V.Global.iSelectedRow.Set(0)
	
	F.Data.DataTable.AcceptChanges("dtNewMaterial")
	
	Gui.Form.lookupNewMatlInventoryBrowser.Enabled(True)
	
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.lookupNewMatlInventoryBrowser_SelectionMade.End

Program.Sub.lookupNewMatlOpCodeBrowser_SelectionMade.Start
F.Intrinsic.Control.Try
	v.Local.sError.Declare
	
	Gui.Form.lookupNewMatlOpCodeBrowser.Enabled(False)
	
	F.Data.DataTable.SetValue("dtNewMaterial",V.Global.iSelectedRow,"OpCode",V.DataTable.lookupNewMatlOpCodeBrowser_Result(0).OpCode!FieldValTrim,"OpCodeDesc",V.DataTable.lookupNewMatlOpCodeBrowser_Result(0).OpCodeDesc!FieldValTrim)
	V.Global.iSelectedRow.Set(0)
	
	F.Data.DataTable.AcceptChanges("dtNewMaterial")
	
	Gui.Form.lookupNewMatlOpCodeBrowser.Enabled(True)
	
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.lookupNewMatlOpCodeBrowser_SelectionMade.End

Program.Sub.gsNewMaterial_CellValueChanged.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
'	v.Local.sPart.Declare
'	v.Local.sPartRev.Declare
'	v.Local.sPartNo.Declare
	v.Local.sFilter.Declare
	V.Local.sMessage.Declare
	V.Local.fRate.Declare
	V.Local.sPartDesc.Declare
	V.Local.iRet.Declare(Long)
	V.Local.sQuery.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
		F.Intrinsic.Control.CaseAny("PART")
			F.Intrinsic.Control.If(V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,<>,"")
				'Convert the value to Upper Case
				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,V.Args.Column,V.Args.Value.UCase)
				F.Data.DataTable.AcceptChanges("dtNewMaterial")
				
				f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
				f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
				F.Intrinsic.String.Build("P.PartNumberRevision = '{0}' AND P.LocationCode = '{1}'",V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,V.Local.sFilter)
				f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1286,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,"OBJECT","oExtraTextParts*!*E",3,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,"P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Information.ProductLine.ProductLineCode As ProdLine*!*P.Description.Primary As Description*!*P.Description.Alternate1 As Description1*!*P.Description.Alternate2 As Description2*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty*!*P.Scheduling.LeadTime As LeadTime*!*P.Cost.MonetaryValue.Company.Unit As Cost*!*P.Cost.Alternate.MonetaryValue.Company.Unit As AltCost",V.Local.sFilter,"","","dtInventoryResult",False)
	'			f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
				f.Global.Object.Dispose("oParts")
				f.Global.Object.Dispose("oExtraTextParts")
				F.Intrinsic.Control.If(V.DataTable.dtInventoryResult.RowCount,=,0)
					F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"PartDesc","","UM","","LeadTime",0,"Rate",0.00)
					F.Intrinsic.String.Build("Part: {1} {0}Rev: {2} {0}Loc: {3}{0}is invalid",V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,V.Local.sMessage)
					F.Intrinsic.UI.Msgbox(V.Local.sMessage)
				F.Intrinsic.Control.Else
'					F.Intrinsic.Control.If(V.DataTable.dtInventoryResult(0).Text!FieldValTrim,<>,"")
'						V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Text!FieldValTrim)
'					F.Intrinsic.Control.Else
'						V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Description!FieldValTrim)
'					F.Intrinsic.Control.EndIf
					V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Description!FieldValTrim)
					F.Intrinsic.Control.If(V.DataTable.dtInventoryResult(0).AltCost!FieldVal,<>,0)
						V.Local.fRate.Set(V.DataTable.dtInventoryResult(0).AltCost!FieldVal)
					F.Intrinsic.Control.Else
						V.Local.fRate.Set(V.DataTable.dtInventoryResult(0).Cost!FieldVal)
					F.Intrinsic.Control.EndIf
					F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"Part",V.DataTable.dtInventoryResult(0).Part!FieldValTrim,"PartRev",V.DataTable.dtInventoryResult(0).PartRev!FieldValTrim,"PartLoc",V.DataTable.dtInventoryResult(0).PartLoc!FieldValTrim,"PartDesc",V.Local.sPartDesc,"UM",V.DataTable.dtInventoryResult(0).UM_INVENTORY!FieldValTrim,"LeadTime",V.DataTable.dtInventoryResult(0).LeadTime!FieldVal,"Rate",V.Local.fRate)
					F.Data.DataTable.Close("dtInventoryResult")			
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"Part","","PartRev","","PartLoc","","PartDesc","","UM","","LeadTime",0,"Rate",0.00)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.CaseAny("PARTREV")	
			F.Intrinsic.Control.If(V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,<>,"")
				'Convert the value to Upper Case
				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,V.Args.Column,V.Args.Value.UCase)
				F.Data.DataTable.AcceptChanges("dtNewMaterial")
				
				f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
				f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
				F.Intrinsic.String.Build("P.PartNumberRevision = '{0}' AND P.LocationCode = '{1}'",V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,V.Local.sFilter)
				f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1286,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,"OBJECT","oExtraTextParts*!*E",3,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,"P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Information.ProductLine.ProductLineCode As ProdLine*!*P.Description.Primary As Description*!*P.Description.Alternate1 As Description1*!*P.Description.Alternate2 As Description2*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty*!*P.Scheduling.LeadTime As LeadTime*!*P.Cost.MonetaryValue.Company.Unit As Cost*!*P.Cost.Alternate.MonetaryValue.Company.Unit As AltCost",V.Local.sFilter,"","","dtInventoryResult",False)
	'			f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
				f.Global.Object.Dispose("oParts")
				f.Global.Object.Dispose("oExtraTextParts")
				F.Intrinsic.Control.If(V.DataTable.dtInventoryResult.RowCount,=,0)
					F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"PartDesc","","UM","","LeadTime",0,"Rate",0.00)
					F.Intrinsic.String.Build("Part: {1} {0}Rev: {2} {0}Loc: {3}{0}is invalid",V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,V.Local.sMessage)
					F.Intrinsic.UI.Msgbox(V.Local.sMessage)
				F.Intrinsic.Control.Else
'					F.Intrinsic.Control.If(V.DataTable.dtInventoryResult(0).Text!FieldValTrim,<>,"")
'						V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Text!FieldValTrim)
'					F.Intrinsic.Control.Else
'						V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Description!FieldValTrim)
'					F.Intrinsic.Control.EndIf
					V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Description!FieldValTrim)
					F.Intrinsic.Control.If(V.DataTable.dtInventoryResult(0).AltCost!FieldVal,<>,0)
						V.Local.fRate.Set(V.DataTable.dtInventoryResult(0).AltCost!FieldVal)
					F.Intrinsic.Control.Else
						V.Local.fRate.Set(V.DataTable.dtInventoryResult(0).Cost!FieldVal)
					F.Intrinsic.Control.EndIf
					F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"Part",V.DataTable.dtInventoryResult(0).Part!FieldValTrim,"PartRev",V.DataTable.dtInventoryResult(0).PartRev!FieldValTrim,"PartLoc",V.DataTable.dtInventoryResult(0).PartLoc!FieldValTrim,"PartDesc",V.Local.sPartDesc,"UM",V.DataTable.dtInventoryResult(0).UM_INVENTORY!FieldValTrim,"LeadTime",V.DataTable.dtInventoryResult(0).LeadTime!FieldVal,"Rate",V.Local.fRate)
					F.Data.DataTable.Close("dtInventoryResult")			
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"PartDesc","","UM","","LeadTime",0,"Rate",0.00)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.CaseAny("PARTLOC")
			F.Intrinsic.Control.If(V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,<>,"")
				'Convert the value to Upper Case
				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,V.Args.Column,V.Args.Value.UCase)
				F.Data.DataTable.AcceptChanges("dtNewMaterial")
				
				f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
				f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
				F.Intrinsic.String.Build("P.PartNumberRevision = '{0}' AND P.LocationCode = '{1}'",V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,V.Local.sFilter)
				f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1286,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,"OBJECT","oExtraTextParts*!*E",3,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,"P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Information.ProductLine.ProductLineCode As ProdLine*!*P.Description.Primary As Description*!*P.Description.Alternate1 As Description1*!*P.Description.Alternate2 As Description2*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty*!*P.Scheduling.LeadTime As LeadTime*!*P.Cost.MonetaryValue.Company.Unit As Cost*!*P.Cost.Alternate.MonetaryValue.Company.Unit As AltCost",V.Local.sFilter,"","","dtInventoryResult",False)
	'			f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
				f.Global.Object.Dispose("oParts")
				f.Global.Object.Dispose("oExtraTextParts")
				F.Intrinsic.Control.If(V.DataTable.dtInventoryResult.RowCount,=,0)
					F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"PartDesc","","UM","","LeadTime",0,"Rate",0.00)
					F.Intrinsic.String.Build("Part: {1} {0}Rev: {2} {0}Loc: {3}{0}is invalid",V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,V.Local.sMessage)
					F.Intrinsic.UI.Msgbox(V.Local.sMessage)
				F.Intrinsic.Control.Else
'					F.Intrinsic.Control.If(V.DataTable.dtInventoryResult(0).Text!FieldValTrim,<>,"")
'						V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Text!FieldValTrim)
'					F.Intrinsic.Control.Else
'						V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Description!FieldValTrim)
'					F.Intrinsic.Control.EndIf
					V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Description!FieldValTrim)
					F.Intrinsic.Control.If(V.DataTable.dtInventoryResult(0).AltCost!FieldVal,<>,0)
						V.Local.fRate.Set(V.DataTable.dtInventoryResult(0).AltCost!FieldVal)
					F.Intrinsic.Control.Else
						V.Local.fRate.Set(V.DataTable.dtInventoryResult(0).Cost!FieldVal)
					F.Intrinsic.Control.EndIf
					F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"Part",V.DataTable.dtInventoryResult(0).Part!FieldValTrim,"PartRev",V.DataTable.dtInventoryResult(0).PartRev!FieldValTrim,"PartLoc",V.DataTable.dtInventoryResult(0).PartLoc!FieldValTrim,"PartDesc",V.Local.sPartDesc,"UM",V.DataTable.dtInventoryResult(0).UM_INVENTORY!FieldValTrim,"LeadTime",V.DataTable.dtInventoryResult(0).LeadTime!FieldVal,"Rate",V.Local.fRate)
					F.Data.DataTable.Close("dtInventoryResult")			
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"PartDesc","","UM","","LeadTime",0,"Rate",0.00)
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.Case("OPCODE")			
			F.Intrinsic.Control.If(V.DataTable.dtNewMaterial(V.Args.RowIndex).OpCode!FieldValTrim,<>,"")
				'Convert the value to Upper Case
				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,V.Args.Column,V.Args.Value.UCase)
				F.Data.DataTable.AcceptChanges("dtNewMaterial")
				
				F.Intrinsic.String.Build("select MACHINE AS OperationIdentifier, OPERATION As OpCode, DESCRIPTION As OpCodeDesc from OP_CODES where LMO = 'M' AND OPERATION = '{0}'",V.DataTable.dtNewMaterial(V.Args.RowIndex).OpCode!FieldValTrim,V.Local.sQuery)
				F.Data.DataTable.CreateFromSQL("dtOpCodes","conx",V.Local.sQuery,False)
				F.Intrinsic.Control.If(V.DataTable.dtOpCodes.RowCount,=,0)
					F.Intrinsic.UI.Msgbox("OpCode is invalid")
					F.Data.DataTable.Close("dtOpCodes")
					F.Intrinsic.Control.ExitSub				
				F.Intrinsic.Control.EndIf
				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"OpCode",V.DataTable.dtOpCodes(0).OpCode!FieldValTrim,"OpCodeDesc",V.DataTable.dtOpCodes(0).OpCodeDesc!FieldValTrim)
				F.Data.DataTable.Close("dtOpCodes")	
			F.Intrinsic.Control.Else
				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"OpCode","","OpCodeDesc","")
			F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry	
Program.Sub.gsNewMaterial_CellValueChanged.End

'Program.Sub.gsNewMaterial_LostFocus.Start
'f.Intrinsic.Control.Try
'	v.Local.sError.Declare
'	
'	Function.Intrinsic.Debug.InvokeDebugger
'	Function.Intrinsic.Debug.Stop
'	
'	
'	F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
'		F.Intrinsic.Control.CaseAny("PARTLOC")
'			f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
'			f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
'			F.Intrinsic.String.Build("PartLoc = '{0}'",V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,V.Local.sFilter)
'			f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1286,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,"OBJECT","oExtraTextParts*!*E",3,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,"P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Information.ProductLine.ProductLineCode As ProdLine*!*P.Description.Primary As Description*!*P.Description.Alternate1 As Description1*!*P.Description.Alternate2 As Description2*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty*!*P.Scheduling.LeadTime As LeadTime*!*P.Cost.MonetaryValue.Company.Unit As Cost*!*P.Cost.Alternate.MonetaryValue.Company.Unit As AltCost",V.Local.sFilter,"","","dtInventoryResult",False)
''			f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
'			f.Global.Object.Dispose("oParts")
'			f.Global.Object.Dispose("oExtraTextParts")
'			F.Intrinsic.Control.If(V.DataTable.dtInventoryResult.RowCount,=,0)
'				F.Intrinsic.String.Build("Part: {2} {0}Rev: {3} {0}Loc: {4}{1}is invalid",V.Ambient.Tab,V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,V.Local.sMessage)
'				F.Intrinsic.UI.Msgbox(V.Local.sMessage)
'			F.Intrinsic.Control.Else
'				F.Intrinsic.Control.If(V.DataTable.dtInventoryResult(0).Text!FieldValTrim,<>,"")
'					V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Text!FieldValTrim)
'				F.Intrinsic.Control.Else
'					V.Local.sPartDesc.Set(V.DataTable.dtInventoryResult(0).Description!FieldValTrim)
'				F.Intrinsic.Control.EndIf
'				
'				F.Intrinsic.Control.If(V.DataTable.dtInventoryResult(0).AltCost!FieldVal,<>,0)
'					V.Local.fRate.Set(V.DataTable.dtInventoryResult(0).AltCost!FieldVal)
'				F.Intrinsic.Control.Else
'					V.Local.fRate.Set(V.DataTable.dtInventoryResult(0).Cost!FieldVal)
'				F.Intrinsic.Control.EndIf
'				F.Data.DataTable.SetValue("dtNewMaterial",V.Args.RowIndex,"Part",V.DataTable.dtInventoryResult(0).Part!FieldValTrim,"PartRev",V.DataTable.dtInventoryResult(0).PartRev!FieldValTrim,"PartLoc",V.DataTable.dtInventoryResult(0).PartLoc!FieldValTrim,"PartDesc",V.Local.sPartDesc,"UM",V.DataTable.dtInventoryResult(0).UM_INVENTORY!FieldValTrim,"LeadTime",V.DataTable.dtInventoryResult(0).LeadTime!FieldVal,"Rate",V.Local.fRate)
'				F.Data.DataTable.Close("dtInventoryResult")
'			F.Intrinsic.Control.EndIf
''			F.Intrinsic.Control.Else
''				f.Global.Object.Create("oParts","Inventory.Parts","oDatabase",V.Global.iCon,True)
''				f.Global.Object.Create("oExtraTextParts","Inventory.Support.ExtraTexts","oDatabase",V.Global.iCon,True)
''				f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1341,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartLoc!FieldValTrim,"OBJECT","oExtraTextParts*!*E",3,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Args.RowIndex).PartRev!FieldValTrim,"P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As PartRev*!*P.LocationCode As PartLoc*!*P.Information.ProductLine.ProductLineCode As ProdLine*!*P.Description.Primary As Description*!*P.Description.Alternate1 As Description1*!*P.Description.Alternate2 As Description2*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty*!*P.Scheduling.LeadTime As LeadTime","","","","dtInventoryBrowser",True)
'''				f.Data.Linq.Join("LEFTJOIN","OBJECT","oParts*!*P",1466,"","","","OBJECT","oExtraTextParts*!*E",3,"","","~~~~~~~~~~~~~~~~~","~~~","P.PartNumber = E.PartNumber AND P.PartNumberRevision = E.PartNumberRevision","P.PartNumber As Part*!*P.PartNumberRevision As Rev*!*P.LocationCode As Loc*!*P.Description.Primary As Description*!*E.Information.Comment As Text*!*P.Information.UnitOfMeasure.UnitOfMeasureCode As UM_INVENTORY*!*P.InventoryStatus.OnHand As OnHand_Qty","","","","dtInventoryBrowser",True)
''				f.Global.Object.Dispose("oParts")
''				f.Global.Object.Dispose("oExtraTextParts")
''			F.Intrinsic.Control.EndIf
'			
'		F.Intrinsic.Control.Case("OPCODE")
'		
'	
'	F.Intrinsic.Control.EndSelect
'	
'F.Intrinsic.Control.Catch
'	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
'	f.Intrinsic.Control.CallSub(Unload)
'F.Intrinsic.Control.EndTry	
'Program.Sub.gsNewMaterial_LostFocus.End

Program.Sub.cmdAdd_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.sQuery.Declare
	V.Local.iRet.Declare
	V.Local.sMessage.Declare
	V.Local.sRet.Declare
	V.Local.iCnt1.Declare
	V.Local.iCnt2.Declare
	V.Local.sPartWithRev.Declare
	V.Local.sDueDate.Declare
	V.Local.dDueDate.Declare
	V.Local.dStartDate.Declare
	V.Local.sStartDate.Declare
	V.Local.fMatlLeadTimeHours.Declare
	V.Local.iMatlLeadTimeHours.Declare
	V.Local.sFilter.Declare
	V.Local.iSelect.Declare
	V.Local.sMapper.Declare
	V.Local.sScheduleType.Declare
	V.Local.iSeq.Declare
	V.Local.sSeq.Declare
	V.Local.sOpCodeDesc.Declare
	V.Local.sPartLoc.Declare
	V.Local.fEstHrs.Declare
	
	Gui.Form.cmdAdd.Enabled(False)
	
	F.Intrinsic.Control.If(V.DataView.dtBOM!dvSelectedBOM.Exists)
		F.Data.DataView.Close("dtBOM","dvSelectedBOM")
	F.Intrinsic.Control.EndIf
	F.Data.DataView.Create("dtBOM","dvSelectedBOM",22,"FlagUpdate = True","")
	F.Intrinsic.Control.If(V.DataView.dtBOM!dvSelectedBOM.RowCount,>,0,AND,V.DataTable.dtNewMaterial.RowCount,>,0)	
		
		F.Intrinsic.UI.InvokeWaitDialog("Updating work orders with the selected part","Mass Replace Parts on Open WOs [ARC 6169]")
		
		'Delete Rows in DataTable 6008 & 500030
		F.Data.DataTable.DeleteRow("6008")
		F.Data.DataTable.DeleteRow("500030")
		
		'Get the Schedule Type
		F.Intrinsic.Control.If(V.Screen.Form!optBackwardSched.Value)
			V.Local.sScheduleType.Set("B")
		F.Intrinsic.Control.ElseIf(V.Screen.Form!optForwardSched.Value)
			V.Local.sScheduleType.Set("F")
		F.Intrinsic.Control.EndIf
	
		'Create Data Table
		F.Data.DataView.ToDataTable("dtBOM","dvSelectedBOM","dtBomUpload")
		F.Data.DataView.Close("dtBOM","dvSelectedBOM")

		'Check Whether WO is used by other users
		F.Global.Object.LoadDataTable("dtInUseCDs","oInUseCDs","Support.InUseCDs","oDatabase",v.Global.iCon,2,False,,-1,"","WorkOrder","")

		F.Intrinsic.Control.For(V.Local.iCnt1,0,V.DataTable.dtBomUpload.RowCount--,1)
			F.Intrinsic.String.Build("[CompanyCode] = '{0}' AND [InUseReference] = '{1}-{2}'",V.Caller.CompanyCode,V.DataTable.dtBomUpload(V.Local.iCnt1).Job!FieldValTrim,V.DataTable.dtBomUpload(V.Local.iCnt1).Suffix!FieldValTrim,V.Local.sFilter)
			F.Data.DataTable.Select("dtInUseCDs",V.Local.sFilter,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
				F.Intrinsic.String.Build("Job: {0} {1}Suffix: {2} is locked by {3}.{4}Processing is cancelled.",V.DataTable.dtBomUpload(V.Local.iCnt1).Job!FieldValTrim,V.Ambient.Tab,V.DataTable.dtBomUpload(V.Local.iCnt1).Suffix!FieldValTrim,V.DataTable.dtInUseCDs(V.Local.sRet).TASK-USERCD-INFORMATION-SHORTNAME!FieldValTrim,V.Ambient.NewLine,V.Local.sMessage)
				F.Intrinsic.UI.Msgbox(V.Local.sMessage)
				F.Intrinsic.Control.If(V.DataTable.dtInUseCDs.Exists,=,True)
					F.Data.DataTable.Close("dtInUseCDs")
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.If(V.DataTable.dtBomUpload.Exists,=,True)
					F.Data.DataTable.Close("dtBomUpload")
				F.Intrinsic.Control.EndIf
				Gui.Form.cmdAdd.Enabled(True)
				F.Intrinsic.UI.CloseWaitDialog
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iCnt1)
		
		F.Intrinsic.Control.If(V.DataTable.dtInUseCDs.Exists,=,True)
			F.Data.DataTable.Close("dtInUseCDs")
		F.Intrinsic.Control.EndIf
		
		'Add Columns to dtBomUpload 
		F.Data.DataTable.AddColumn("dtBomUpload","NewSeq","Long")
'		F.Data.DataTable.AddColumn("dtBomUpload","MaterialDueDate","String")
		F.Data.DataTable.AddColumn("dtBomUpload","MaterialDueDate","Date")
		
		'Get the last Material Sequence for the Work Order
		F.Intrinsic.Control.For(V.Local.iCnt2,0,V.DataTable.dtBomUpload.RowCount--,1)
			'Find the last material sequence number before the first labor step sequence
			F.Intrinsic.String.Build("select top 1 A.SEQ from JOB_OPERATIONS A where A.JOB = '{0}' and A.SUFFIX = '{1}' and A.SEQ < (select top 1 B.SEQ from JOB_OPERATIONS B where B.JOB = A.JOB and B.SUFFIX = A.SUFFIX and B.SEQ < '990000' and B.LMO = 'L' order by B.SEQ) order by A.SEQ DESC",V.DataTable.dtBomUpload(V.Local.iCnt2).Job!FieldValTrim,V.DataTable.dtBomUpload(V.Local.iCnt2).Suffix!FieldValTrim,V.Local.sQuery)
			F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sQuery,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.Trim,=,"")
				V.Local.iSeq.Set(0)
			F.Intrinsic.Control.Else
				V.Local.iSeq.Set(V.Local.sRet.Long)
			F.Intrinsic.Control.EndIf
			F.Data.DataTable.SetValue("dtBomUpload",V.Local.iCnt2,"NewSeq",V.Local.iSeq)			
			
			'Get the First Labor Start Date As Due Date for Material
			F.Intrinsic.String.Build("select top 1 DATE_START from JOB_OPERATIONS where JOB = '{0}' and SUFFIX = '{1}' and LMO = 'L' order by SEQ",V.DataTable.dtBomUpload(V.Local.iCnt2).Job!FieldValTrim,V.DataTable.dtBomUpload(V.Local.iCnt2).Suffix!FieldValTrim,V.Local.sQuery)
			F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sQuery,V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.Trim,=,"",OR,V.Local.sRet.Trim,=,"000000")
'				F.Intrinsic.String.Format(V.DataTable.dtBomUpload(V.Local.iCnt2).DATE_DUE!FieldVal,"MMDDYY",V.Local.sDueDate)
				V.Local.dDueDate.Set(V.DataTable.dtBomUpload(V.Local.iCnt2).DATE_DUE!FieldVal)
			F.Intrinsic.Control.Else
'				V.Local.sDueDate.Set(V.Local.sRet.Trim)
				F.Intrinsic.Date.ConvertDString(v.Local.sRet.Trim,"MMDDYY",V.Local.dDueDate)
			F.Intrinsic.Control.EndIf
			F.Intrinsic.String.DateString(V.Local.dDueDate,V.Local.sDueDate)
'			F.Data.DataTable.SetValue("dtBomUpload",V.Local.iCnt2,"MaterialDueDate",V.Local.sDueDate)
			F.Data.DataTable.SetValue("dtBomUpload",V.Local.iCnt2,"MaterialDueDate",V.Local.dDueDate)
		F.Intrinsic.Control.Next(V.Local.iCnt2)
		
		'Clone dtNewMaterial table into dtNewMaterialUpload
		F.Intrinsic.Control.If(V.DataTable.dtNewMaterialUpload.Exists)
			F.Data.DataTable.Close("dtNewMaterialUpload")
		F.Intrinsic.Control.EndIf
		F.Data.DataTable.Clone("dtNewMaterial","dtNewMaterialUpload",True)
		'Add Columns to dtNewMaterialUpload
		F.Data.DataTable.AddColumn("dtNewMaterialUpload","UserID","String","",8)
		F.Data.DataTable.AddColumn("dtNewMaterialUpload","TRMNL","String","",3)
		F.Data.DataTable.AddColumn("dtNewMaterialUpload","LEAD_TIME","LONG",0)
		F.Data.DataTable.AddColumn("dtNewMaterialUpload","Job","String","",6)
		F.Data.DataTable.AddColumn("dtNewMaterialUpload","Suffix","String","",3)
		F.Data.DataTable.AddColumn("dtNewMaterialUpload","Seq","String","",6)
		
		'Validate Work Order & OpCode
		F.Intrinsic.Control.For(V.Local.iCnt1,0,V.DataTable.dtNewMaterial.RowCount--,1)
			
			'Set the Material Location
			V.Local.sPartLoc.Set(V.DataTable.dtNewMaterial(V.Local.iCnt1).PartLoc!FieldValTrim)
			
			'Validate Part
			F.Intrinsic.Control.If(V.DataTable.dtNewMaterial(V.Local.iCnt1).Part!FieldValTrim,<>,"")
				F.Intrinsic.Control.If(V.Object.oPart!IsNothing,=,False)
					F.Global.Object.Dispose("oPart")
				F.Intrinsic.Control.EndIf
				F.Global.Object.Create("oPart","Inventory.Part","oDatabase",V.Global.iCon,True)
				f.Global.Object.SetValue("oPart", "PartNumber", V.DataTable.dtNewMaterial(V.Local.iCnt1).Part!FieldValTrim)
				f.Global.Object.SetValue("oPart", "PartNumberRevision", V.DataTable.dtNewMaterial(V.Local.iCnt1).PartRev!FieldValTrim)
				f.Global.Object.SetValue("oPart", "LocationCode", V.DataTable.dtNewMaterial(V.Local.iCnt1).PartLoc!FieldValTrim)
				f.Global.Object.Load("oPart",1267,V.Local.iRet)
				F.Intrinsic.Control.If(V.Local.iRet,<>,0)
					F.Data.DataTable.Close("dtBomUpload")
					F.Data.DataTable.Close("dtNewMaterialUpload")
					F.Global.Object.Dispose("oPart")
					Gui.Form.cmdAdd.Enabled(True)
					F.Intrinsic.UI.CloseWaitDialog
					F.Intrinsic.String.Build("Part: {1}{0}Rev: {2}{0}is invalid.{0}Processing is cancelled.",V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Local.iCnt1).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartRev!FieldValTrim,V.Local.sMessage)
					F.Intrinsic.String.Build("Part: {1}{0}Rev: {2}{0}Loc: {3}{0}is invalid.{0}Processing is cancelled.",V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Local.iCnt1).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartLoc!FieldValTrim,V.Local.sMessage)
					F.Intrinsic.UI.Msgbox(V.Local.sMessage)
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.If(V.Object.oPart!IsNothing,=,False)
					F.Global.Object.Dispose("oPart")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Data.DataTable.Close("dtBomUpload")
				F.Data.DataTable.Close("dtNewMaterialUpload")
				Gui.Form.cmdAdd.Enabled(True)
				F.Intrinsic.UI.CloseWaitDialog
'				F.Intrinsic.String.Build("Part: {1}{0}Rev: {2}{0}cannot be EMPTY.{0}Processing is cancelled.",V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Local.iCnt1).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartRev!FieldValTrim,V.Local.sMessage)
				F.Intrinsic.String.Build("Part: {1}{0}Rev: {2}{0}Loc: {3}{0}cannot be EMPTY.{0}Processing is cancelled.",V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Local.iCnt1).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartLoc!FieldValTrim,V.Local.sMessage)
				F.Intrinsic.UI.Msgbox(V.Local.sMessage)
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			
			'Validate OpCode
			F.Intrinsic.Control.If(V.DataTable.dtNewMaterial(V.Local.iCnt1).OpCode!FieldValTrim,<>,"")
				F.Intrinsic.String.Build("select OPERATION As OpCode from OP_CODES where LMO = 'M' AND OPERATION = '{0}'",V.DataTable.dtNewMaterial(V.Local.iCnt1).OpCode!FieldValTrim,V.Local.sQuery)
				F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sQuery,V.Local.sRet)
				F.Intrinsic.Control.If(V.Local.sRet,=,"")
					F.Data.DataTable.Close("dtBomUpload")
					F.Data.DataTable.Close("dtNewMaterialUpload")
					Gui.Form.cmdAdd.Enabled(True)
					F.Intrinsic.UI.CloseWaitDialog	
					F.Intrinsic.String.Build("OpCode: {1}{0}is invalid.{0}Processing is cancelled.",V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Local.iCnt1).OpCode!FieldValTrim,V.Local.sMessage)
					F.Intrinsic.UI.Msgbox(V.Local.sMessage)
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Data.DataTable.Close("dtBomUpload")
				F.Data.DataTable.Close("dtNewMaterialUpload")
				Gui.Form.cmdAdd.Enabled(True)
				F.Intrinsic.UI.CloseWaitDialog
				F.Intrinsic.String.Build("Part: {1}{0}Rev: {2}{0}Loc: {3}{0}OpCode cannot be EMPTY.{0}Processing is cancelled.",V.Ambient.NewLine,V.DataTable.dtNewMaterial(V.Local.iCnt1).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartRev!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartLoc!FieldValTrim,V.Local.sMessage)
				F.Intrinsic.UI.Msgbox(V.Local.sMessage)
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.For(V.Local.iCnt2,0,V.DataTable.dtBomUpload.RowCount--,1)
				'Check to make sure the added Part Location is the same as Parent Part Location
				F.Intrinsic.Control.If(V.DataTable.dtNewMaterial(V.Local.iCnt1).PartLoc!FieldValTrim,<>,V.DataTable.dtBomUpload(V.Local.iCnt2).ParentPartLoc!FieldValTrim)
					F.Data.DataTable.Close("dtBomUpload")
					F.Data.DataTable.Close("dtNewMaterialUpload")
					Gui.Form.cmdAdd.Enabled(True)
					F.Intrinsic.UI.CloseWaitDialog	
					F.Intrinsic.String.Build("Added Part Location has to be the same as Parent Part Location.{0}Processing is cancelled.",V.Ambient.NewLine,V.Local.sMessage)
					F.Intrinsic.UI.Msgbox(V.Local.sMessage)
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
				
				'Get the sequence to be used
				V.Local.iSeq.Set(V.DataTable.dtBomUpload(V.Local.iCnt2).NewSeq!FieldVal)
				F.Intrinsic.Control.Do
					F.Intrinsic.Math.Add(V.Local.iSeq,3,V.Local.iSeq)
					F.Intrinsic.String.LPad(V.Local.iSeq,"0",6,V.Local.sSeq)
					'Check whether the Sequence is used in the Work Order
					F.Intrinsic.String.Build("select Seq from JOB_OPERATIONS where Job = '{0}' and Suffix = '{1}' and Seq = '{2}'",V.DataTable.dtBomUpload(V.Local.iCnt2).Job!FieldValTrim,V.DataTable.dtBomUpload(V.Local.iCnt2).Suffix!FieldValTrim,V.Local.sSeq,V.Local.sQuery)
					F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sQuery,V.Local.sRet)
					F.Intrinsic.Control.If(V.Local.sRet.Trim,=,"")
						F.Data.DataTable.SetValue("dtBomUpload",V.Local.iCnt2,"NewSeq",V.Local.iSeq)
						F.Intrinsic.Control.ExitDo
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Loop
				
				F.Intrinsic.String.GSSPartString(V.DataTable.dtNewMaterial(V.Local.iCnt1).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartRev!FieldValTrim,V.Local.sPartWithRev)
				
				'Calculate the Start Date based on Lead Time & DueDate
'				V.Local.sStartDate.Set(V.DataTable.dtBomUpload(V.Local.iCnt2).MaterialDueDate!FieldVal)
'				F.Intrinsic.Date.ConvertDString(V.Local.sStartDate,"MMDDYY",V.Local.dDueDate)
'				F.Intrinsic.Date.DateSubtractWorkdays(V.Local.dDueDate,V.DataTable.dtNewMaterial(V.Local.iCnt1).LeadTime!FieldVal,V.Global.iWorkDayMask,V.Local.dStartDate)
'				F.Intrinsic.String.Format(V.Local.dStartDate,"MMDDYY",V.Local.sStartDate)
				F.Intrinsic.Date.DateSubtractWorkdays(V.DataTable.dtBomUpload(V.Local.iCnt2).MaterialDueDate!FieldVal,V.DataTable.dtNewMaterial(V.Local.iCnt1).LeadTime!FieldVal,V.Global.iWorkDayMask,V.Local.dStartDate)
				F.Intrinsic.String.Format(V.Local.dStartDate,"MMDDYY",V.Local.sStartDate)
				
				F.Intrinsic.String.Format(V.DataTable.dtBomUpload(V.Local.iCnt2).MaterialDueDate!FieldVal,"MMDDYY",V.Local.sDueDate)
				
				F.Intrinsic.Math.Mult(V.DataTable.dtNewMaterial(V.Local.iCnt1).QtyToMake1!FieldVal,V.DataTable.dtBomUpload(V.Local.iCnt2).OrderQty!FieldVal,v.Local.fEstHrs)
				
				F.Data.DataTable.AddRow("6008","WONo",V.DataTable.dtBomUpload(V.Local.iCnt2).Job!FieldValTrim,"Suffix",V.DataTable.dtBomUpload(V.Local.iCnt2).Suffix!FieldValTrim,"Seq",V.Local.sSeq,"LMO","M","PWC",V.Local.sPartWithRev,"OpCode",V.DataTable.dtNewMaterial(V.Local.iCnt1).OpCode!FieldValTrim,"OpDesc",V.DataTable.dtNewMaterial(V.Local.iCnt1).PartDesc!FieldValTrim,"UM",V.DataTable.dtNewMaterial(V.Local.iCnt1).UM!FieldValTrim,"Unit",V.DataTable.dtNewMaterial(V.Local.iCnt1).QtyToMake1!FieldVal,"EstHrs",v.Local.fEstHrs,"Rate",V.DataTable.dtNewMaterial(V.Local.iCnt1).Rate!FieldVal,"StartDate",V.Local.sStartDate,"DueDate",V.Local.sDueDate)
				
				'Add row to dtNewMaterialUpload
				F.Data.DataTable.AddRow("dtNewMaterialUpload","Job",V.DataTable.dtBomUpload(V.Local.iCnt2).Job!FieldValTrim,"Suffix",V.DataTable.dtBomUpload(V.Local.iCnt2).Suffix!FieldValTrim,"Seq",V.Local.sSeq,"Part",V.Local.sPartWithRev,"PartLoc",V.DataTable.dtNewMaterial(V.Local.iCnt1).PartLoc!FieldValTrim)
				
				'Check whether the WO No is already in the DataTable 500030
				F.Intrinsic.String.Build("WONum = '{0}' and Suffix = '{1}'",V.DataTable.dtBomUpload(V.Local.iCnt2).Job!FieldValTrim,V.DataTable.dtBomUpload(V.Local.iCnt2).Suffix!FieldValTrim,v.Local.sFilter)
				F.Data.DataTable.Select("500030",v.Local.sFilter,v.Local.sRet)
				F.Intrinsic.Control.If(v.Local.sRet.Trim,=,"***NORETURN***")
					'If using Forward Schedule then use the First Labor Start Date of the Work Order as the base date
					'If using Backward Schedule then use the Due Date of the Work Order as the base date
					'If Backward Scheduling, the Due Date of Work Order is the basis for the scheduling (Use Work Order Due Date as the StartDate & DueDate)
					'If Forward Scheduling, the First Labor Start Date of Work Order is the basis for the scheduling (Use First Labor Start Date as the StartDate & DueDate)
					F.Intrinsic.Control.If(V.Local.sScheduleType,=,"F")
						'MaterialDueDate is the same as the first labor start date
						F.Intrinsic.String.Format(V.DataTable.dtBomUpload(V.Local.iCnt2).MaterialDueDate!FieldVal,"MMDDYY",V.Local.sStartDate)
						V.Local.sDueDate.Set(V.Local.sStartDate)
					F.Intrinsic.Control.ElseIf(V.Local.sScheduleType,=,"B")
						'DATE_DUE is the same as the Work Order Due Date					
						F.Intrinsic.String.Format(V.DataTable.dtBomUpload(V.Local.iCnt2).DATE_DUE!FieldVal,"MMDDYY",V.Local.sDueDate)
					F.Intrinsic.Control.EndIf				
					
					'If Backward Scheduling, the Due Date of Work Order is the basis for the scheduling (Use Work Order Due Date as the StartDate & DueDate)
					'If Forward Scheduling, the First Labor Start Date of Work Order is the basis for the scheduling (Use First Labor Start Date as the StartDate & DueDate)
					F.Data.DataTable.AddRow("500030","StartDate",V.Local.sStartDate,"DueDate",V.Local.sDueDate,"WONum",V.DataTable.dtBomUpload(V.Local.iCnt2).Job!FieldValTrim,"Suffix",V.DataTable.dtBomUpload(V.Local.iCnt2).Suffix!FieldValTrim,"Schedule",V.Local.sScheduleType)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iCnt2)
						
		F.Intrinsic.Control.Next(V.Local.iCnt1)
		
		'Close dtBomUpload
		F.Data.DataTable.Close("dtBomUpload")
		
		F.Intrinsic.Control.If(V.DataTable.6008.RowCount,>,0)
'			'Save the DataTable to database in Table GAB_6169_NEW_PART
'			F.Data.DataView.Create("6008","dvNewMaterialUpload",22)
'			F.Data.DataView.ToDataTableDistinct("6008","dvNewMaterialUpload","dtNewMaterialUpload","WONo*!*Suffix*!*Seq*!*PWC")
'			F.Data.DataView.Close("6008","dvNewMaterialUpload")
'			
'			'Add Columns to dtNewMaterialUpload
'			F.Data.DataTable.AddColumn("dtNewMaterialUpload","UserID","String","",8)
'			F.Data.DataTable.AddColumn("dtNewMaterialUpload","TRMNL","String","",3)
'			F.Data.DataTable.AddColumn("dtNewMaterialUpload","LEAD_TIME","LONG",0)
			
			'Set values to dtNewMaterialUpload
			F.Data.DataTable.SetValue("dtNewMaterialUpload",-1,"UserID",V.Caller.User.Trim,"TRMNL",V.Caller.Terminal.Trim)
			
			F.Intrinsic.Control.For(V.Local.iCnt1,0,V.DataTable.dtNewMaterial.RowCount--,1)
				F.Intrinsic.String.GSSPartString(V.DataTable.dtNewMaterial(V.Local.iCnt1).Part!FieldValTrim,V.DataTable.dtNewMaterial(V.Local.iCnt1).PartRev!FieldValTrim,V.Local.sPartWithRev)
'				F.Intrinsic.String.Build("PWC = '{0}'",V.Local.sPartWithRev,V.Local.sFilter)
				F.Intrinsic.String.Build("Part = '{0}'",V.Local.sPartWithRev,V.Local.sFilter)
				F.Data.DataTable.Select("dtNewMaterialUpload",V.Local.sFilter,V.Local.sRet)
				F.Intrinsic.Control.If(V.Local.sRet,<>,"***NORETURN***")
					F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
					F.Intrinsic.Control.For(V.Local.iCnt2,0,V.Local.sRet.UBound,1)
						'Get the Lead Time from dtNewMaterial and convert it to Hours
						V.Local.iSelect.Set(V.Local.sRet(V.Local.iCnt2))
						F.Intrinsic.Math.Mult(V.Global.fDayLengthHrs,V.DataTable.dtNewMaterial(V.Local.iCnt1).LeadTime!FieldVal,V.Local.fMatlLeadTimeHours)
						F.Intrinsic.Math.Round(V.Local.fMatlLeadTimeHours,0,V.Local.iMatlLeadTimeHours)
						
						F.Data.DataTable.SetValue("dtNewmaterialUpload",V.Local.iSelect,"LEAD_TIME",V.Local.iMatlLeadTimeHours)
					F.Intrinsic.Control.Next(V.Local.iCnt2)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iCnt1)		
				
			'Save dtNewMaterialUpload to database in Table GAB_6169_NEW_PART
			V.Local.sMapper.Set("UserID@!@UserID*!*TRMNL@!@TRMNL*!*Job@!@Job*!*Suffix@!@Suffix*!*Seq@!@Seq*!*Part@!@Part*!*PartLoc@!@Locn*!*LEAD_TIME@!@LEAD_TIME")
'			V.Local.sMapper.Set("UserID@!@UserID*!*TRMNL@!@TRMNL*!*WONo@!@Job*!*Suffix@!@Suffix*!*Seq@!@Seq*!*PWC@!@Part*!*LEAD_TIME@!@LEAD_TIME")
			F.Data.DataTable.SaveToDB("dtNewMaterialUpload",conx,"GAB_6169_NEW_PART","",128,V.Local.sMapper)
			F.Data.DataTable.Close("dtNewMaterialUpload")
			
			'Upload the New Material Sequences to Work Orders
			F.Intrinsic.Control.CallSub(6008Sync)

			'Schedule the New Material Sequences
			F.Intrinsic.Control.CallSub(500030Sync)
				
			'Update Locn & Lead_Time on the updated Work Order in Job Operations table
			F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET LEAD_TIME = n.LEAD_TIME, LOCN = n.LOCN FROM JOB_OPERATIONS o, GAB_6169_NEW_PART n WHERE o.JOB = n.JOB AND o.SUFFIX = n.SUFFIX AND o.SEQ = n.SEQ AND o.PART = n.PART AND n.USERID = '{0}' AND n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
			F.ODBC.Connection!conx.Execute(V.Local.sQuery)	

			'Cannot update LOCATION on Job_Commitments table because it is not modifiable
			'Have to do select, delete, and insert
			'Select the related records from JOB_COMMITMENTS table
			F.Intrinsic.Control.If(V.DataTable.dtNewJobCommitments.Exists,=,True)
				F.Data.DataTable.Close("dtNewJobCommitments")
			F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.If(V.DataTable.dtOldJobCommitments.Exists,=,True)
				F.Data.DataTable.Close("dtOldJobCommitments")
			F.Intrinsic.Control.EndIf
			F.Intrinsic.String.Build("SELECT c.* FROM JOB_COMMITMENTS c, GAB_6169_NEW_PART n WHERE c.JOB = n.JOB and c.SUFFIX = n.SUFFIX and c.SEQUENCE = n.SEQ and n.USERID = '{0}' and n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
'			F.Intrinsic.String.Build("SELECT n.PART, n.LOCN AS LOCATION, c.JOB, c.SUFFIX, c.DATE_COMMITMENT, c.SEQUENCE, c.CUSTOMER, n.HOURS_ESTIMATED AS QTY_COMMITTED, c.DATE_ISSUED, c.QTY_ISSUED, c.QTY_SHIP, c.DATE_DUE, n.UNIT_COST, c.CLOSED, c.JOB_PARENT, c.FLAG_SHORT, c.START_DATE, c.F_TYPE, c.FILLER FROM JOB_COMMITMENTS c, GAB_6169_NEW_PART n WHERE c.JOB = n.JOB and c.SUFFIX = n.SUFFIX and c.SEQUENCE = n.SEQ and n.USERID = '{0}' and n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
			F.Data.DataTable.CreateFromSQL("dtNewJobCommitments",conx,V.Local.sQuery)
			F.Data.DataTable.SetValue("dtNewJobCommitments",-1,"LOCATION",V.Local.sPartLoc)
			F.Intrinsic.Control.If(V.DataTable.dtNewJobCommitments.RowCount,>,0)			
				F.Intrinsic.String.Build("SELECT c.* FROM JOB_COMMITMENTS c, GAB_6169_NEW_PART n WHERE c.JOB = n.JOB and c.SUFFIX = n.SUFFIX and c.SEQUENCE = n.SEQ and n.USERID = '{0}' and n.TRMNL = '{1}'",V.Caller.User.Trim,V.Caller.Terminal.Trim,V.Local.sQuery)
				F.Data.DataTable.CreateFromSQL("dtOldJobCommitments",conx,V.Local.sQuery)
				F.Intrinsic.Control.If(V.DataTable.dtOldJobCommitments.RowCount,>,0)
					'Delete old records from Job_Commitments table
					F.Data.DataTable.DeleteRow("dtOldJobCommitments")
					F.Data.DataTable.SaveToDB("dtOldJobCommitments",conx,"JOB_COMMITMENTS","JOB*!*SUFFIX*!*SEQUENCE*!*PART*!*LOCATION",4,"")
					F.Data.DataTable.Close("dtOldJobCommitments")
				F.Intrinsic.Control.EndIf
				
				'Insert new records into Job_Commitments table
				F.Data.DataTable.SaveToDB("dtNewJobCommitments",conx,"JOB_COMMITMENTS","",128,"")
				F.Data.DataTable.Close("dtNewJobCommitments")
			F.Intrinsic.Control.EndIf
					
			'Delete from GAB_6169_NEW_PART table
			F.Intrinsic.Control.CallSub(DeleteDataFromCustomTable)
				
			F.Intrinsic.UI.CloseWaitDialog
			
			F.Intrinsic.UI.Msgbox("Processing completed successfully")
		F.Intrinsic.Control.Else
			F.Intrinsic.UI.CloseWaitDialog
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndIf
	
	Gui.Form.cmdAdd.Enabled(True)
	

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry	
Program.Sub.cmdAdd_Click.End

Program.Sub.gsBOM_RowCellClick.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sHold.Declare
	v.Local.sPartWithRev.Declare
	
	F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)
		'Open Work Order View
		f.Intrinsic.Control.CaseAny("JOB","SUFFIX")	
			F.Intrinsic.Control.BlockEvents
			f.Intrinsic.UI.InvokeWaitDialog("Opening Work Order View...")
			F.Intrinsic.String.Concat("7","!*!",v.DataTable.dtBOM(v.Args.RowIndex).Job!FieldValString,"!*!",v.DataTable.dtBOM(v.Args.RowIndex).Suffix!FieldValString,"!*!","A",V.Local.sHold)
			F.Global.General.CallWrapperSync(450000,v.Local.sHold)
			f.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub

		'Open Supply and Demand screen for the ParentPart
		f.Intrinsic.Control.CaseAny("PARENTPART","PARENTPARTREV","PARENTPARTLOC")
			F.Intrinsic.Control.BlockEvents
			f.Intrinsic.UI.InvokeWaitDialog("Opening Supply and Demand...")
			f.Intrinsic.String.GSSPartString(v.DataTable.dtBOM(v.Args.RowIndex).ParentPart!FieldValString,v.DataTable.dtBOM(v.Args.RowIndex).ParentPartRev!FieldValString,V.Local.sPartWithRev)
			f.Intrinsic.String.Build("{0}!*!{1}!*!W",V.Local.sPartWithRev.Trim,v.DataTable.dtBOM(v.Args.RowIndex).ParentPartLoc!FieldValString,v.Local.sHold)
			F.Global.General.CallWrapperSync(300011,v.Local.sHold)
			f.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndSelect
		
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry
Program.Sub.gsBOM_RowCellClick.End

Program.Sub.cmdReset_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.sColumns.Declare
	V.Local.sDataType.Declare
	
	F.Intrinsic.Control.If(V.DataTable.dtBOM.Exists)
		F.Data.DataTable.SetValue("dtBOM",-1,"FlagUpdate",False)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtNewMaterial.Exists)
		f.Data.DataTable.Close("dtNewMaterial")
	F.Intrinsic.Control.EndIf
	
	V.Local.sColumns.Set("Part*!*PartRev*!*PartLoc*!*PartLU*!*PartDesc*!*OpCode*!*OpCodeLU*!*OpCodeDesc*!*UM*!*LeadTime*!*QtyToMake1*!*Rate*!*Add*!*Delete")
	V.Local.sDataType.Set("String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*Long*!*Float*!*Float*!*Long*!*Long")
	F.Data.DataTable.CreateFromString("dtNewMaterial",V.Global.sNewRowGVNEWMATERIAL,V.Local.sColumns,V.Local.sDataType,"*!*","@!@",True)
	
	Gui.Form.gsNewMaterial.AddGridviewFromDatatable("GVNEWMATERIAL","dtNewMaterial")
	f.Intrinsic.Control.CallSub(Format_Grid_NewMaterial)
	gui.Form.gsNewMaterial.MainView("GVNEWMATERIAL")
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry	
Program.Sub.cmdReset_Click.End

Program.Sub.gsWO_KeyPress.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.iCol.Declare
	
	f.Intrinsic.Control.SelectCase(v.Args.ColumnName)
		f.Intrinsic.Control.CaseAny("REQUIRED","Required","required")
			f.Intrinsic.Control.If(v.DataTable.MainTB(v.Args.RowIndex).IssueStatus!FieldValTrim,<>,"")
				gui.Form.gsWO.SetCellProperty("GVMain",v.Args.ColumnIndex,v.Args.RowIndex,"Locked",True)
				gui.Form.gsWO.GetColumnIndexByName("GVMain","FlagUpdate",v.Local.iCol)
				gui.Form.gsWO.SetCellProperty("GVMain",v.Local.iCol,v.Args.RowIndex,"Locked",True)
			f.Intrinsic.Control.EndIf
			
		f.Intrinsic.Control.CaseAny("FLAGUPDATE","flagupdate","FlagUpdate")
			f.Intrinsic.Control.If(v.DataTable.MainTB(v.Args.RowIndex).IssueStatus!FieldValTrim,<>,"")
				gui.Form.gsWO.SetCellProperty("GVMain",v.Args.ColumnIndex,v.Args.RowIndex,"Locked",True)
				gui.Form.gsWO.GetColumnIndexByName("GVMain","Required",v.Local.iCol)
				gui.Form.gsWO.SetCellProperty("GVMain",v.Local.iCol,v.Args.RowIndex,"Locked",True)
			f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndSelect
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry	
Program.Sub.gsWO_KeyPress.End

Program.Sub.gsWO_MouseDown.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sColName.Declare
	v.Local.iCol.Declare
	
	F.Intrinsic.Control.If(v.Args.MouseCol,<>,-1)
		Gui.Form.gsWO.GetColumnNameByIndex("GVMain",v.Args.MouseCol,v.Local.sColName)
		f.Intrinsic.Control.SelectCase(v.Local.sColName)
			f.Intrinsic.Control.CaseAny("REQUIRED","Required","required")
				f.Intrinsic.Control.If(v.DataTable.MainTB(v.Args.MouseRow).IssueStatus!FieldValTrim,<>,"")
					gui.Form.gsWO.SetCellProperty("GVMain",v.Args.MouseCol,v.Args.MouseRow,"Locked",True)
					gui.Form.gsWO.GetColumnIndexByName("GVMain","FlagUpdate",v.Local.iCol)
					gui.Form.gsWO.SetCellProperty("GVMain",v.Local.iCol,v.Args.MouseRow,"Locked",True)
				f.Intrinsic.Control.EndIf
				
			f.Intrinsic.Control.CaseAny("FLAGUPDATE","flagupdate","FlagUpdate")
				f.Intrinsic.Control.If(v.DataTable.MainTB(v.Args.MouseRow).IssueStatus!FieldValTrim,<>,"")
					gui.Form.gsWO.SetCellProperty("GVMain",v.Args.MouseCol,v.Args.MouseRow,"Locked",True)
					gui.Form.gsWO.GetColumnIndexByName("GVMain","Required",v.Local.iCol)
					gui.Form.gsWO.SetCellProperty("GVMain",v.Local.iCol,v.Args.MouseRow,"Locked",True)
				f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndSelect
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(Unload)
F.Intrinsic.Control.EndTry	
Program.Sub.gsWO_MouseDown.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$tdjohan$}$20230705084622068$}$8rAQhOSvlohpQhMDm1j544LwmwXnRbkh4uSak9AQO5KfIuaYo4sE7PISKiZi17IcejsfuRQYk4k=
Program.Sub.Comments.End